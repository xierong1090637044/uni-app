(global["webpackJsonp"] = global["webpackJsonp"] || []).push([["common/vendor"],{

/***/ 1:
/*!***********************************************************!*\
  !*** ./node_modules/@dcloudio/uni-app-plus/dist/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.createApp = createApp;exports.createComponent = createComponent;exports.createPage = createPage;exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");}function _iterableToArrayLimit(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i[\"return\"] != null) _i[\"return\"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError(\"Invalid attempt to spread non-iterable instance\");}function _iterableToArray(iter) {if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;}}\n\nvar _toString = Object.prototype.toString;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isFn(fn) {\n  return typeof fn === 'function';\n}\n\nfunction isStr(str) {\n  return typeof str === 'string';\n}\n\nfunction isPlainObject(obj) {\n  return _toString.call(obj) === '[object Object]';\n}\n\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\n\nfunction noop() {}\n\n/**\r\n                    * Create a cached version of a pure function.\r\n                    */\nfunction cached(fn) {\n  var cache = Object.create(null);\n  return function cachedFn(str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n}\n\n/**\r\n   * Camelize a hyphen-delimited string.\r\n   */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) {return c ? c.toUpperCase() : '';});\n});\n\nvar HOOKS = [\n'invoke',\n'success',\n'fail',\n'complete',\n'returnValue'];\n\n\nvar globalInterceptors = {};\nvar scopedInterceptors = {};\n\nfunction mergeHook(parentVal, childVal) {\n  var res = childVal ?\n  parentVal ?\n  parentVal.concat(childVal) :\n  Array.isArray(childVal) ?\n  childVal : [childVal] :\n  parentVal;\n  return res ?\n  dedupeHooks(res) :\n  res;\n}\n\nfunction dedupeHooks(hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res;\n}\n\nfunction removeHook(hooks, hook) {\n  var index = hooks.indexOf(hook);\n  if (index !== -1) {\n    hooks.splice(index, 1);\n  }\n}\n\nfunction mergeInterceptorHook(interceptor, option) {\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      interceptor[hook] = mergeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction removeInterceptorHook(interceptor, option) {\n  if (!interceptor || !option) {\n    return;\n  }\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      removeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction addInterceptor(method, option) {\n  if (typeof method === 'string' && isPlainObject(option)) {\n    mergeInterceptorHook(scopedInterceptors[method] || (scopedInterceptors[method] = {}), option);\n  } else if (isPlainObject(method)) {\n    mergeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction removeInterceptor(method, option) {\n  if (typeof method === 'string') {\n    if (isPlainObject(option)) {\n      removeInterceptorHook(scopedInterceptors[method], option);\n    } else {\n      delete scopedInterceptors[method];\n    }\n  } else if (isPlainObject(method)) {\n    removeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction wrapperHook(hook) {\n  return function (data) {\n    return hook(data) || data;\n  };\n}\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n\nfunction queue(hooks, data) {\n  var promise = false;\n  for (var i = 0; i < hooks.length; i++) {\n    var hook = hooks[i];\n    if (promise) {\n      promise = Promise.then(wrapperHook(hook));\n    } else {\n      var res = hook(data);\n      if (isPromise(res)) {\n        promise = Promise.resolve(res);\n      }\n      if (res === false) {\n        return {\n          then: function then() {} };\n\n      }\n    }\n  }\n  return promise || {\n    then: function then(callback) {\n      return callback(data);\n    } };\n\n}\n\nfunction wrapperOptions(interceptor) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  ['success', 'fail', 'complete'].forEach(function (name) {\n    if (Array.isArray(interceptor[name])) {\n      var oldCallback = options[name];\n      options[name] = function callbackInterceptor(res) {\n        queue(interceptor[name], res).then(function (res) {\n          /* eslint-disable no-mixed-operators */\n          return isFn(oldCallback) && oldCallback(res) || res;\n        });\n      };\n    }\n  });\n  return options;\n}\n\nfunction wrapperReturnValue(method, returnValue) {\n  var returnValueHooks = [];\n  if (Array.isArray(globalInterceptors.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(globalInterceptors.returnValue));\n  }\n  var interceptor = scopedInterceptors[method];\n  if (interceptor && Array.isArray(interceptor.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(interceptor.returnValue));\n  }\n  returnValueHooks.forEach(function (hook) {\n    returnValue = hook(returnValue) || returnValue;\n  });\n  return returnValue;\n}\n\nfunction getApiInterceptorHooks(method) {\n  var interceptor = Object.create(null);\n  Object.keys(globalInterceptors).forEach(function (hook) {\n    if (hook !== 'returnValue') {\n      interceptor[hook] = globalInterceptors[hook].slice();\n    }\n  });\n  var scopedInterceptor = scopedInterceptors[method];\n  if (scopedInterceptor) {\n    Object.keys(scopedInterceptor).forEach(function (hook) {\n      if (hook !== 'returnValue') {\n        interceptor[hook] = (interceptor[hook] || []).concat(scopedInterceptor[hook]);\n      }\n    });\n  }\n  return interceptor;\n}\n\nfunction invokeApi(method, api, options) {for (var _len = arguments.length, params = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {params[_key - 3] = arguments[_key];}\n  var interceptor = getApiInterceptorHooks(method);\n  if (interceptor && Object.keys(interceptor).length) {\n    if (Array.isArray(interceptor.invoke)) {\n      var res = queue(interceptor.invoke, options);\n      return res.then(function (options) {\n        return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n      });\n    } else {\n      return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n    }\n  }\n  return api.apply(void 0, [options].concat(params));\n}\n\nvar promiseInterceptor = {\n  returnValue: function returnValue(res) {\n    if (!isPromise(res)) {\n      return res;\n    }\n    return res.then(function (res) {\n      return res[1];\n    }).catch(function (res) {\n      return res[0];\n    });\n  } };\n\n\nvar SYNC_API_RE =\n/^\\$|getMenuButtonBoundingClientRect|^report|interceptors|Interceptor$|getSubNVueById|requireNativePlugin|upx2px|hideKeyboard|canIUse|^create|Sync$|Manager$|base64ToArrayBuffer|arrayBufferToBase64/;\n\nvar CONTEXT_API_RE = /^create|Manager$/;\n\nvar CALLBACK_API_RE = /^on/;\n\nfunction isContextApi(name) {\n  return CONTEXT_API_RE.test(name);\n}\nfunction isSyncApi(name) {\n  return SYNC_API_RE.test(name);\n}\n\nfunction isCallbackApi(name) {\n  return CALLBACK_API_RE.test(name);\n}\n\nfunction handlePromise(promise) {\n  return promise.then(function (data) {\n    return [null, data];\n  }).\n  catch(function (err) {return [err];});\n}\n\nfunction shouldPromise(name) {\n  if (\n  isContextApi(name) ||\n  isSyncApi(name) ||\n  isCallbackApi(name))\n  {\n    return false;\n  }\n  return true;\n}\n\nfunction promisify(name, api) {\n  if (!shouldPromise(name)) {\n    return api;\n  }\n  return function promiseApi() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {params[_key2 - 1] = arguments[_key2];}\n    if (isFn(options.success) || isFn(options.fail) || isFn(options.complete)) {\n      return wrapperReturnValue(name, invokeApi.apply(void 0, [name, api, options].concat(params)));\n    }\n    return wrapperReturnValue(name, handlePromise(new Promise(function (resolve, reject) {\n      invokeApi.apply(void 0, [name, api, Object.assign({}, options, {\n        success: resolve,\n        fail: reject })].concat(\n      params));\n      /* eslint-disable no-extend-native */\n      if (!Promise.prototype.finally) {\n        Promise.prototype.finally = function (callback) {\n          var promise = this.constructor;\n          return this.then(\n          function (value) {return promise.resolve(callback()).then(function () {return value;});},\n          function (reason) {return promise.resolve(callback()).then(function () {\n              throw reason;\n            });});\n\n        };\n      }\n    })));\n  };\n}\n\nvar EPS = 1e-4;\nvar BASE_DEVICE_WIDTH = 750;\nvar isIOS = false;\nvar deviceWidth = 0;\nvar deviceDPR = 0;\n\nfunction checkDeviceWidth() {var _wx$getSystemInfoSync =\n\n\n\n\n  wx.getSystemInfoSync(),platform = _wx$getSystemInfoSync.platform,pixelRatio = _wx$getSystemInfoSync.pixelRatio,windowWidth = _wx$getSystemInfoSync.windowWidth; // uni=>wx runtime 编译目标是 uni 对象，内部不允许直接使用 uni\n\n  deviceWidth = windowWidth;\n  deviceDPR = pixelRatio;\n  isIOS = platform === 'ios';\n}\n\nfunction upx2px(number, newDeviceWidth) {\n  if (deviceWidth === 0) {\n    checkDeviceWidth();\n  }\n\n  number = Number(number);\n  if (number === 0) {\n    return 0;\n  }\n  var result = number / BASE_DEVICE_WIDTH * (newDeviceWidth || deviceWidth);\n  if (result < 0) {\n    result = -result;\n  }\n  result = Math.floor(result + EPS);\n  if (result === 0) {\n    if (deviceDPR === 1 || !isIOS) {\n      return 1;\n    } else {\n      return 0.5;\n    }\n  }\n  return number < 0 ? -result : result;\n}\n\nvar interceptors = {\n  promiseInterceptor: promiseInterceptor };\n\n\n\n\nvar baseApi = /*#__PURE__*/Object.freeze({\n  upx2px: upx2px,\n  interceptors: interceptors,\n  addInterceptor: addInterceptor,\n  removeInterceptor: removeInterceptor });\n\n\nvar protocols = {};\nvar todos = [];\nvar canIUses = [];\n\nvar CALLBACKS = ['success', 'fail', 'cancel', 'complete'];\n\nfunction processCallback(methodName, method, returnValue) {\n  return function (res) {\n    return method(processReturnValue(methodName, res, returnValue));\n  };\n}\n\nfunction processArgs(methodName, fromArgs) {var argsOption = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};var returnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};var keepFromArgs = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (isPlainObject(fromArgs)) {// 一般 api 的参数解析\n    var toArgs = keepFromArgs === true ? fromArgs : {}; // returnValue 为 false 时，说明是格式化返回值，直接在返回值对象上修改赋值\n    if (isFn(argsOption)) {\n      argsOption = argsOption(fromArgs, toArgs) || {};\n    }\n    for (var key in fromArgs) {\n      if (hasOwn(argsOption, key)) {\n        var keyOption = argsOption[key];\n        if (isFn(keyOption)) {\n          keyOption = keyOption(fromArgs[key], fromArgs, toArgs);\n        }\n        if (!keyOption) {// 不支持的参数\n          console.warn(\"app-plus \".concat(methodName, \"\\u6682\\u4E0D\\u652F\\u6301\").concat(key));\n        } else if (isStr(keyOption)) {// 重写参数 key\n          toArgs[keyOption] = fromArgs[key];\n        } else if (isPlainObject(keyOption)) {// {name:newName,value:value}可重新指定参数 key:value\n          toArgs[keyOption.name ? keyOption.name : key] = keyOption.value;\n        }\n      } else if (CALLBACKS.indexOf(key) !== -1) {\n        toArgs[key] = processCallback(methodName, fromArgs[key], returnValue);\n      } else {\n        if (!keepFromArgs) {\n          toArgs[key] = fromArgs[key];\n        }\n      }\n    }\n    return toArgs;\n  } else if (isFn(fromArgs)) {\n    fromArgs = processCallback(methodName, fromArgs, returnValue);\n  }\n  return fromArgs;\n}\n\nfunction processReturnValue(methodName, res, returnValue) {var keepReturnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (isFn(protocols.returnValue)) {// 处理通用 returnValue\n    res = protocols.returnValue(methodName, res);\n  }\n  return processArgs(methodName, res, returnValue, {}, keepReturnValue);\n}\n\nfunction wrapper(methodName, method) {\n  if (hasOwn(protocols, methodName)) {\n    var protocol = protocols[methodName];\n    if (!protocol) {// 暂不支持的 api\n      return function () {\n        console.error(\"app-plus \\u6682\\u4E0D\\u652F\\u6301\".concat(methodName));\n      };\n    }\n    return function (arg1, arg2) {// 目前 api 最多两个参数\n      var options = protocol;\n      if (isFn(protocol)) {\n        options = protocol(arg1);\n      }\n\n      arg1 = processArgs(methodName, arg1, options.args, options.returnValue);\n\n      var args = [arg1];\n      if (typeof arg2 !== 'undefined') {\n        args.push(arg2);\n      }\n      var returnValue = wx[options.name || methodName].apply(wx, args);\n      if (isSyncApi(methodName)) {// 同步 api\n        return processReturnValue(methodName, returnValue, options.returnValue, isContextApi(methodName));\n      }\n      return returnValue;\n    };\n  }\n  return method;\n}\n\nvar todoApis = Object.create(null);\n\nvar TODOS = [\n'onTabBarMidButtonTap',\n'subscribePush',\n'unsubscribePush',\n'onPush',\n'offPush',\n'share'];\n\n\nfunction createTodoApi(name) {\n  return function todoApi(_ref)\n\n\n  {var fail = _ref.fail,complete = _ref.complete;\n    var res = {\n      errMsg: \"\".concat(name, \":fail:\\u6682\\u4E0D\\u652F\\u6301 \").concat(name, \" \\u65B9\\u6CD5\") };\n\n    isFn(fail) && fail(res);\n    isFn(complete) && complete(res);\n  };\n}\n\nTODOS.forEach(function (name) {\n  todoApis[name] = createTodoApi(name);\n});\n\nvar getEmitter = function () {\n  if (typeof getUniEmitter === 'function') {\n    /* eslint-disable no-undef */\n    return getUniEmitter;\n  }\n  var Emitter;\n  return function getUniEmitter() {\n    if (!Emitter) {\n      Emitter = new _vue.default();\n    }\n    return Emitter;\n  };\n}();\n\nfunction apply(ctx, method, args) {\n  return ctx[method].apply(ctx, args);\n}\n\nfunction $on() {\n  return apply(getEmitter(), '$on', Array.prototype.slice.call(arguments));\n}\nfunction $off() {\n  return apply(getEmitter(), '$off', Array.prototype.slice.call(arguments));\n}\nfunction $once() {\n  return apply(getEmitter(), '$once', Array.prototype.slice.call(arguments));\n}\nfunction $emit() {\n  return apply(getEmitter(), '$emit', Array.prototype.slice.call(arguments));\n}\n\nvar eventApi = /*#__PURE__*/Object.freeze({\n  $on: $on,\n  $off: $off,\n  $once: $once,\n  $emit: $emit });\n\n\nfunction requireNativePlugin(pluginName) {\n  /* eslint-disable no-undef */\n  if (typeof weex !== 'undefined') {\n    return weex.requireModule(pluginName);\n  }\n  /* eslint-disable no-undef */\n  return __requireNativePlugin__(pluginName);\n}\n\nfunction wrapper$1(webview) {\n  webview.$processed = true;\n\n  webview.postMessage = function (data) {\n    plus.webview.postMessageToUniNView({\n      type: 'UniAppSubNVue',\n      data: data },\n    webview.id);\n  };\n  var callbacks = [];\n  webview.onMessage = function (callback) {\n    callbacks.push(callback);\n  };\n  webview.$consumeMessage = function (e) {\n    callbacks.forEach(function (callback) {return callback(e);});\n  };\n\n  if (!webview.__uniapp_mask_id) {\n    return;\n  }\n  var maskColor = webview.__uniapp_mask;\n  var maskWebview = webview.__uniapp_mask_id === '0' ? {\n    setStyle: function setStyle(_ref2)\n\n    {var mask = _ref2.mask;\n      requireNativePlugin('uni-tabview').setMask({\n        color: mask });\n\n    } } :\n  plus.webview.getWebviewById(webview.__uniapp_mask_id);\n  var oldShow = webview.show;\n  var oldHide = webview.hide;\n  var oldClose = webview.close;\n\n  var showMask = function showMask() {\n    maskWebview.setStyle({\n      mask: maskColor });\n\n  };\n  var closeMask = function closeMask() {\n    maskWebview.setStyle({\n      mask: 'none' });\n\n  };\n  webview.show = function () {\n    showMask();for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {args[_key3] = arguments[_key3];}\n    return oldShow.apply(webview, args);\n  };\n  webview.hide = function () {\n    closeMask();for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {args[_key4] = arguments[_key4];}\n    return oldHide.apply(webview, args);\n  };\n  webview.close = function () {\n    closeMask();\n    callbacks = [];for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {args[_key5] = arguments[_key5];}\n    return oldClose.apply(webview, args);\n  };\n}\n\nfunction getSubNVueById(id) {\n  var webview = plus.webview.getWebviewById(id);\n  if (webview && !webview.$processed) {\n    wrapper$1(webview);\n  }\n  return webview;\n}\n\n\n\nvar api = /*#__PURE__*/Object.freeze({\n  getSubNVueById: getSubNVueById,\n  requireNativePlugin: requireNativePlugin });\n\n\nvar MPPage = Page;\nvar MPComponent = Component;\n\nvar customizeRE = /:/g;\n\nvar customize = cached(function (str) {\n  return camelize(str.replace(customizeRE, '-'));\n});\n\nfunction initTriggerEvent(mpInstance) {\n  {\n    if (!wx.canIUse('nextTick')) {\n      return;\n    }\n  }\n  var oldTriggerEvent = mpInstance.triggerEvent;\n  mpInstance.triggerEvent = function (event) {for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {args[_key6 - 1] = arguments[_key6];}\n    return oldTriggerEvent.apply(mpInstance, [customize(event)].concat(args));\n  };\n}\n\nfunction initHook(name, options) {\n  var oldHook = options[name];\n  if (!oldHook) {\n    options[name] = function () {\n      initTriggerEvent(this);\n    };\n  } else {\n    options[name] = function () {\n      initTriggerEvent(this);for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {args[_key7] = arguments[_key7];}\n      return oldHook.apply(this, args);\n    };\n  }\n}\n\nPage = function Page() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('onLoad', options);\n  return MPPage(options);\n};\n\nComponent = function Component() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('created', options);\n  return MPComponent(options);\n};\n\nvar PAGE_EVENT_HOOKS = [\n'onPullDownRefresh',\n'onReachBottom',\n'onShareAppMessage',\n'onPageScroll',\n'onResize',\n'onTabItemTap'];\n\n\nfunction initMocks(vm, mocks) {\n  var mpInstance = vm.$mp[vm.mpType];\n  mocks.forEach(function (mock) {\n    if (hasOwn(mpInstance, mock)) {\n      vm[mock] = mpInstance[mock];\n    }\n  });\n}\n\nfunction hasHook(hook, vueOptions) {\n  if (!vueOptions) {\n    return true;\n  }\n\n  if (_vue.default.options && Array.isArray(_vue.default.options[hook])) {\n    return true;\n  }\n\n  vueOptions = vueOptions.default || vueOptions;\n\n  if (isFn(vueOptions)) {\n    if (isFn(vueOptions.extendOptions[hook])) {\n      return true;\n    }\n    if (vueOptions.super &&\n    vueOptions.super.options &&\n    Array.isArray(vueOptions.super.options[hook])) {\n      return true;\n    }\n    return false;\n  }\n\n  if (isFn(vueOptions[hook])) {\n    return true;\n  }\n  var mixins = vueOptions.mixins;\n  if (Array.isArray(mixins)) {\n    return !!mixins.find(function (mixin) {return hasHook(hook, mixin);});\n  }\n}\n\nfunction initHooks(mpOptions, hooks, vueOptions) {\n  hooks.forEach(function (hook) {\n    if (hasHook(hook, vueOptions)) {\n      mpOptions[hook] = function (args) {\n        return this.$vm && this.$vm.__call_hook(hook, args);\n      };\n    }\n  });\n}\n\nfunction initVueComponent(Vue, vueOptions) {\n  vueOptions = vueOptions.default || vueOptions;\n  var VueComponent;\n  if (isFn(vueOptions)) {\n    VueComponent = vueOptions;\n    vueOptions = VueComponent.extendOptions;\n  } else {\n    VueComponent = Vue.extend(vueOptions);\n  }\n  return [VueComponent, vueOptions];\n}\n\nfunction initSlots(vm, vueSlots) {\n  if (Array.isArray(vueSlots) && vueSlots.length) {\n    var $slots = Object.create(null);\n    vueSlots.forEach(function (slotName) {\n      $slots[slotName] = true;\n    });\n    vm.$scopedSlots = vm.$slots = $slots;\n  }\n}\n\nfunction initVueIds(vueIds, mpInstance) {\n  vueIds = (vueIds || '').split(',');\n  var len = vueIds.length;\n\n  if (len === 1) {\n    mpInstance._$vueId = vueIds[0];\n  } else if (len === 2) {\n    mpInstance._$vueId = vueIds[0];\n    mpInstance._$vuePid = vueIds[1];\n  }\n}\n\nfunction initData(vueOptions, context) {\n  var data = vueOptions.data || {};\n  var methods = vueOptions.methods || {};\n\n  if (typeof data === 'function') {\n    try {\n      data = data.call(context); // 支持 Vue.prototype 上挂的数据\n    } catch (e) {\n      if (Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\n        console.warn('根据 Vue 的 data 函数初始化小程序 data 失败，请尽量确保 data 函数中不访问 vm 对象，否则可能影响首次数据渲染速度。', data);\n      }\n    }\n  } else {\n    try {\n      // 对 data 格式化\n      data = JSON.parse(JSON.stringify(data));\n    } catch (e) {}\n  }\n\n  if (!isPlainObject(data)) {\n    data = {};\n  }\n\n  Object.keys(methods).forEach(function (methodName) {\n    if (context.__lifecycle_hooks__.indexOf(methodName) === -1 && !hasOwn(data, methodName)) {\n      data[methodName] = methods[methodName];\n    }\n  });\n\n  return data;\n}\n\nvar PROP_TYPES = [String, Number, Boolean, Object, Array, null];\n\nfunction createObserver(name) {\n  return function observer(newVal, oldVal) {\n    if (this.$vm) {\n      this.$vm[name] = newVal; // 为了触发其他非 render watcher\n    }\n  };\n}\n\nfunction initBehaviors(vueOptions, initBehavior) {\n  var vueBehaviors = vueOptions['behaviors'];\n  var vueExtends = vueOptions['extends'];\n  var vueMixins = vueOptions['mixins'];\n\n  var vueProps = vueOptions['props'];\n\n  if (!vueProps) {\n    vueOptions['props'] = vueProps = [];\n  }\n\n  var behaviors = [];\n  if (Array.isArray(vueBehaviors)) {\n    vueBehaviors.forEach(function (behavior) {\n      behaviors.push(behavior.replace('uni://', \"wx\".concat(\"://\")));\n      if (behavior === 'uni://form-field') {\n        if (Array.isArray(vueProps)) {\n          vueProps.push('name');\n          vueProps.push('value');\n        } else {\n          vueProps['name'] = {\n            type: String,\n            default: '' };\n\n          vueProps['value'] = {\n            type: [String, Number, Boolean, Array, Object, Date],\n            default: '' };\n\n        }\n      }\n    });\n  }\n  if (isPlainObject(vueExtends) && vueExtends.props) {\n    behaviors.push(\n    initBehavior({\n      properties: initProperties(vueExtends.props, true) }));\n\n\n  }\n  if (Array.isArray(vueMixins)) {\n    vueMixins.forEach(function (vueMixin) {\n      if (isPlainObject(vueMixin) && vueMixin.props) {\n        behaviors.push(\n        initBehavior({\n          properties: initProperties(vueMixin.props, true) }));\n\n\n      }\n    });\n  }\n  return behaviors;\n}\n\nfunction parsePropType(key, type, defaultValue, file) {\n  // [String]=>String\n  if (Array.isArray(type) && type.length === 1) {\n    return type[0];\n  }\n  return type;\n}\n\nfunction initProperties(props) {var isBehavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;var file = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var properties = {};\n  if (!isBehavior) {\n    properties.vueId = {\n      type: String,\n      value: '' };\n\n    properties.vueSlots = { // 小程序不能直接定义 $slots 的 props，所以通过 vueSlots 转换到 $slots\n      type: null,\n      value: [],\n      observer: function observer(newVal, oldVal) {\n        var $slots = Object.create(null);\n        newVal.forEach(function (slotName) {\n          $slots[slotName] = true;\n        });\n        this.setData({\n          $slots: $slots });\n\n      } };\n\n  }\n  if (Array.isArray(props)) {// ['title']\n    props.forEach(function (key) {\n      properties[key] = {\n        type: null,\n        observer: createObserver(key) };\n\n    });\n  } else if (isPlainObject(props)) {// {title:{type:String,default:''},content:String}\n    Object.keys(props).forEach(function (key) {\n      var opts = props[key];\n      if (isPlainObject(opts)) {// title:{type:String,default:''}\n        var value = opts['default'];\n        if (isFn(value)) {\n          value = value();\n        }\n\n        opts.type = parsePropType(key, opts.type);\n\n        properties[key] = {\n          type: PROP_TYPES.indexOf(opts.type) !== -1 ? opts.type : null,\n          value: value,\n          observer: createObserver(key) };\n\n      } else {// content:String\n        var type = parsePropType(key, opts);\n        properties[key] = {\n          type: PROP_TYPES.indexOf(type) !== -1 ? type : null,\n          observer: createObserver(key) };\n\n      }\n    });\n  }\n  return properties;\n}\n\nfunction wrapper$2(event) {\n  // TODO 又得兼容 mpvue 的 mp 对象\n  try {\n    event.mp = JSON.parse(JSON.stringify(event));\n  } catch (e) {}\n\n  event.stopPropagation = noop;\n  event.preventDefault = noop;\n\n  event.target = event.target || {};\n\n  if (!hasOwn(event, 'detail')) {\n    event.detail = {};\n  }\n\n  if (isPlainObject(event.detail)) {\n    event.target = Object.assign({}, event.target, event.detail);\n  }\n\n  return event;\n}\n\nfunction getExtraValue(vm, dataPathsArray) {\n  var context = vm;\n  dataPathsArray.forEach(function (dataPathArray) {\n    var dataPath = dataPathArray[0];\n    var value = dataPathArray[2];\n    if (dataPath || typeof value !== 'undefined') {// ['','',index,'disable']\n      var propPath = dataPathArray[1];\n      var valuePath = dataPathArray[3];\n\n      var vFor = dataPath ? vm.__get_value(dataPath, context) : context;\n\n      if (Number.isInteger(vFor)) {\n        context = value;\n      } else if (!propPath) {\n        context = vFor[value];\n      } else {\n        if (Array.isArray(vFor)) {\n          context = vFor.find(function (vForItem) {\n            return vm.__get_value(propPath, vForItem) === value;\n          });\n        } else if (isPlainObject(vFor)) {\n          context = Object.keys(vFor).find(function (vForKey) {\n            return vm.__get_value(propPath, vFor[vForKey]) === value;\n          });\n        } else {\n          console.error('v-for 暂不支持循环数据：', vFor);\n        }\n      }\n\n      if (valuePath) {\n        context = vm.__get_value(valuePath, context);\n      }\n    }\n  });\n  return context;\n}\n\nfunction processEventExtra(vm, extra, event) {\n  var extraObj = {};\n\n  if (Array.isArray(extra) && extra.length) {\n    /**\r\n                                              *[\r\n                                              *    ['data.items', 'data.id', item.data.id],\r\n                                              *    ['metas', 'id', meta.id]\r\n                                              *],\r\n                                              *[\r\n                                              *    ['data.items', 'data.id', item.data.id],\r\n                                              *    ['metas', 'id', meta.id]\r\n                                              *],\r\n                                              *'test'\r\n                                              */\n    extra.forEach(function (dataPath, index) {\n      if (typeof dataPath === 'string') {\n        if (!dataPath) {// model,prop.sync\n          extraObj['$' + index] = vm;\n        } else {\n          if (dataPath === '$event') {// $event\n            extraObj['$' + index] = event;\n          } else if (dataPath.indexOf('$event.') === 0) {// $event.target.value\n            extraObj['$' + index] = vm.__get_value(dataPath.replace('$event.', ''), event);\n          } else {\n            extraObj['$' + index] = vm.__get_value(dataPath);\n          }\n        }\n      } else {\n        extraObj['$' + index] = getExtraValue(vm, dataPath);\n      }\n    });\n  }\n\n  return extraObj;\n}\n\nfunction getObjByArray(arr) {\n  var obj = {};\n  for (var i = 1; i < arr.length; i++) {\n    var element = arr[i];\n    obj[element[0]] = element[1];\n  }\n  return obj;\n}\n\nfunction processEventArgs(vm, event) {var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];var extra = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];var isCustom = arguments.length > 4 ? arguments[4] : undefined;var methodName = arguments.length > 5 ? arguments[5] : undefined;\n  var isCustomMPEvent = false; // wxcomponent 组件，传递原始 event 对象\n  if (isCustom) {// 自定义事件\n    isCustomMPEvent = event.currentTarget &&\n    event.currentTarget.dataset &&\n    event.currentTarget.dataset.comType === 'wx';\n    if (!args.length) {// 无参数，直接传入 event 或 detail 数组\n      if (isCustomMPEvent) {\n        return [event];\n      }\n      return event.detail.__args__ || event.detail;\n    }\n  }\n\n  var extraObj = processEventExtra(vm, extra, event);\n\n  var ret = [];\n  args.forEach(function (arg) {\n    if (arg === '$event') {\n      if (methodName === '__set_model' && !isCustom) {// input v-model value\n        ret.push(event.target.value);\n      } else {\n        if (isCustom && !isCustomMPEvent) {\n          ret.push(event.detail.__args__[0]);\n        } else {// wxcomponent 组件或内置组件\n          ret.push(event);\n        }\n      }\n    } else {\n      if (Array.isArray(arg) && arg[0] === 'o') {\n        ret.push(getObjByArray(arg));\n      } else if (typeof arg === 'string' && hasOwn(extraObj, arg)) {\n        ret.push(extraObj[arg]);\n      } else {\n        ret.push(arg);\n      }\n    }\n  });\n\n  return ret;\n}\n\nvar ONCE = '~';\nvar CUSTOM = '^';\n\nfunction isMatchEventType(eventType, optType) {\n  return eventType === optType ||\n\n  optType === 'regionchange' && (\n\n  eventType === 'begin' ||\n  eventType === 'end');\n\n\n}\n\nfunction handleEvent(event) {var _this = this;\n  event = wrapper$2(event);\n\n  // [['tap',[['handle',[1,2,a]],['handle1',[1,2,a]]]]]\n  var dataset = (event.currentTarget || event.target).dataset;\n  if (!dataset) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n  var eventOpts = dataset.eventOpts || dataset['event-opts']; // 支付宝 web-view 组件 dataset 非驼峰\n  if (!eventOpts) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n\n  // [['handle',[1,2,a]],['handle1',[1,2,a]]]\n  var eventType = event.type;\n\n  var ret = [];\n\n  eventOpts.forEach(function (eventOpt) {\n    var type = eventOpt[0];\n    var eventsArray = eventOpt[1];\n\n    var isCustom = type.charAt(0) === CUSTOM;\n    type = isCustom ? type.slice(1) : type;\n    var isOnce = type.charAt(0) === ONCE;\n    type = isOnce ? type.slice(1) : type;\n\n    if (eventsArray && isMatchEventType(eventType, type)) {\n      eventsArray.forEach(function (eventArray) {\n        var methodName = eventArray[0];\n        if (methodName) {\n          var handlerCtx = _this.$vm;\n          if (\n          handlerCtx.$options.generic &&\n          handlerCtx.$parent &&\n          handlerCtx.$parent.$parent)\n          {// mp-weixin,mp-toutiao 抽象节点模拟 scoped slots\n            handlerCtx = handlerCtx.$parent.$parent;\n          }\n          var handler = handlerCtx[methodName];\n          if (!isFn(handler)) {\n            throw new Error(\" _vm.\".concat(methodName, \" is not a function\"));\n          }\n          if (isOnce) {\n            if (handler.once) {\n              return;\n            }\n            handler.once = true;\n          }\n          ret.push(handler.apply(handlerCtx, processEventArgs(\n          _this.$vm,\n          event,\n          eventArray[1],\n          eventArray[2],\n          isCustom,\n          methodName)));\n\n        }\n      });\n    }\n  });\n\n  if (\n  eventType === 'input' &&\n  ret.length === 1 &&\n  typeof ret[0] !== 'undefined')\n  {\n    return ret[0];\n  }\n}\n\nvar hooks = [\n'onShow',\n'onHide',\n'onError',\n'onPageNotFound'];\n\n\nfunction parseBaseApp(vm, _ref3)\n\n\n{var mocks = _ref3.mocks,initRefs = _ref3.initRefs;\n  if (vm.$options.store) {\n    _vue.default.prototype.$store = vm.$options.store;\n  }\n\n  _vue.default.prototype.mpHost = \"app-plus\";\n\n  _vue.default.mixin({\n    beforeCreate: function beforeCreate() {\n      if (!this.$options.mpType) {\n        return;\n      }\n\n      this.mpType = this.$options.mpType;\n\n      this.$mp = _defineProperty({\n        data: {} },\n      this.mpType, this.$options.mpInstance);\n\n\n      this.$scope = this.$options.mpInstance;\n\n      delete this.$options.mpType;\n      delete this.$options.mpInstance;\n\n      if (this.mpType !== 'app') {\n        initRefs(this);\n        initMocks(this, mocks);\n      }\n    } });\n\n\n  var appOptions = {\n    onLaunch: function onLaunch(args) {\n      if (this.$vm) {// 已经初始化过了，主要是为了百度，百度 onShow 在 onLaunch 之前\n        return;\n      }\n\n      this.$vm = vm;\n\n      this.$vm.$mp = {\n        app: this };\n\n\n      this.$vm.$scope = this;\n\n      this.$vm._isMounted = true;\n      this.$vm.__call_hook('mounted', args);\n\n      this.$vm.__call_hook('onLaunch', args);\n    } };\n\n\n  // 兼容旧版本 globalData\n  appOptions.globalData = vm.$options.globalData || {};\n\n  initHooks(appOptions, hooks);\n\n  return appOptions;\n}\n\nvar mocks = ['__route__', '__wxExparserNodeId__', '__wxWebviewId__'];\n\nfunction findVmByVueId(vm, vuePid) {\n  var $children = vm.$children;\n  // 优先查找直属\n  var parentVm = $children.find(function (childVm) {return childVm.$scope._$vueId === vuePid;});\n  if (parentVm) {\n    return parentVm;\n  }\n  // 反向递归查找\n  for (var i = $children.length - 1; i >= 0; i--) {\n    parentVm = findVmByVueId($children[i], vuePid);\n    if (parentVm) {\n      return parentVm;\n    }\n  }\n}\n\nfunction initBehavior(options) {\n  return Behavior(options);\n}\n\nfunction isPage() {\n  return !!this.route;\n}\n\nfunction initRelation(detail) {\n  this.triggerEvent('__l', detail);\n}\n\nfunction initRefs(vm) {\n  var mpInstance = vm.$scope;\n  Object.defineProperty(vm, '$refs', {\n    get: function get() {\n      var $refs = {};\n      var components = mpInstance.selectAllComponents('.vue-ref');\n      components.forEach(function (component) {\n        var ref = component.dataset.ref;\n        $refs[ref] = component.$vm || component;\n      });\n      var forComponents = mpInstance.selectAllComponents('.vue-ref-in-for');\n      forComponents.forEach(function (component) {\n        var ref = component.dataset.ref;\n        if (!$refs[ref]) {\n          $refs[ref] = [];\n        }\n        $refs[ref].push(component.$vm || component);\n      });\n      return $refs;\n    } });\n\n}\n\nfunction handleLink(event) {var _ref4 =\n\n\n\n  event.detail || event.value,vuePid = _ref4.vuePid,vueOptions = _ref4.vueOptions; // detail 是微信,value 是百度(dipatch)\n\n  var parentVm;\n\n  if (vuePid) {\n    parentVm = findVmByVueId(this.$vm, vuePid);\n  }\n\n  if (!parentVm) {\n    parentVm = this.$vm;\n  }\n\n  vueOptions.parent = parentVm;\n}\n\nfunction parseApp(vm) {\n  return parseBaseApp(vm, {\n    mocks: mocks,\n    initRefs: initRefs });\n\n}\n\nvar hooks$1 = [\n'onUniNViewMessage'];\n\n\nfunction parseApp$1(vm) {\n  var appOptions = parseApp(vm);\n\n  initHooks(appOptions, hooks$1);\n\n  return appOptions;\n}\n\nfunction createApp(vm) {\n  App(parseApp$1(vm));\n  return vm;\n}\n\nfunction parseBaseComponent(vueComponentOptions)\n\n\n{var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},isPage = _ref5.isPage,initRelation = _ref5.initRelation;var _initVueComponent =\n  initVueComponent(_vue.default, vueComponentOptions),_initVueComponent2 = _slicedToArray(_initVueComponent, 2),VueComponent = _initVueComponent2[0],vueOptions = _initVueComponent2[1];\n\n  var componentOptions = {\n    options: {\n      multipleSlots: true,\n      addGlobalClass: true },\n\n    data: initData(vueOptions, _vue.default.prototype),\n    behaviors: initBehaviors(vueOptions, initBehavior),\n    properties: initProperties(vueOptions.props, false, vueOptions.__file),\n    lifetimes: {\n      attached: function attached() {\n        var properties = this.properties;\n\n        var options = {\n          mpType: isPage.call(this) ? 'page' : 'component',\n          mpInstance: this,\n          propsData: properties };\n\n\n        initVueIds(properties.vueId, this);\n\n        // 处理父子关系\n        initRelation.call(this, {\n          vuePid: this._$vuePid,\n          vueOptions: options });\n\n\n        // 初始化 vue 实例\n        this.$vm = new VueComponent(options);\n\n        // 处理$slots,$scopedSlots（暂不支持动态变化$slots）\n        initSlots(this.$vm, properties.vueSlots);\n\n        // 触发首次 setData\n        this.$vm.$mount();\n      },\n      ready: function ready() {\n        // 当组件 props 默认值为 true，初始化时传入 false 会导致 created,ready 触发, 但 attached 不触发\n        // https://developers.weixin.qq.com/community/develop/doc/00066ae2844cc0f8eb883e2a557800\n        if (this.$vm) {\n          this.$vm._isMounted = true;\n          this.$vm.__call_hook('mounted');\n          this.$vm.__call_hook('onReady');\n        }\n      },\n      detached: function detached() {\n        this.$vm.$destroy();\n      } },\n\n    pageLifetimes: {\n      show: function show(args) {\n        this.$vm && this.$vm.__call_hook('onPageShow', args);\n      },\n      hide: function hide() {\n        this.$vm && this.$vm.__call_hook('onPageHide');\n      },\n      resize: function resize(size) {\n        this.$vm && this.$vm.__call_hook('onPageResize', size);\n      } },\n\n    methods: {\n      __l: handleLink,\n      __e: handleEvent } };\n\n\n\n  if (Array.isArray(vueOptions.wxsCallMethods)) {\n    vueOptions.wxsCallMethods.forEach(function (callMethod) {\n      componentOptions.methods[callMethod] = function (args) {\n        return this.$vm[callMethod](args);\n      };\n    });\n  }\n\n  if (isPage) {\n    return componentOptions;\n  }\n  return [componentOptions, VueComponent];\n}\n\nfunction parseComponent(vueComponentOptions) {\n  return parseBaseComponent(vueComponentOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nfunction parseComponent$1(vueComponentOptions) {\n  var componentOptions = parseComponent(vueComponentOptions);\n\n  componentOptions.methods.$getAppWebview = function () {\n    return plus.webview.getWebviewById(\"\".concat(this.__wxWebviewId__));\n  };\n  return componentOptions;\n}\n\nvar hooks$2 = [\n'onShow',\n'onHide',\n'onUnload'];\n\n\nhooks$2.push.apply(hooks$2, PAGE_EVENT_HOOKS);\n\nfunction parseBasePage(vuePageOptions, _ref6)\n\n\n{var isPage = _ref6.isPage,initRelation = _ref6.initRelation;\n  var pageOptions = parseComponent$1(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$2, vuePageOptions);\n\n  pageOptions.methods.onLoad = function (args) {\n    this.$vm.$mp.query = args; // 兼容 mpvue\n    this.$vm.__call_hook('onLoad', args);\n  };\n\n  return pageOptions;\n}\n\nfunction parsePage(vuePageOptions) {\n  return parseBasePage(vuePageOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nvar hooks$3 = [\n'onBackPress',\n'onNavigationBarButtonTap',\n'onNavigationBarSearchInputChanged',\n'onNavigationBarSearchInputConfirmed',\n'onNavigationBarSearchInputClicked'];\n\n\nfunction parsePage$1(vuePageOptions) {\n  var pageOptions = parsePage(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$3);\n\n  return pageOptions;\n}\n\nfunction createPage(vuePageOptions) {\n  {\n    return Component(parsePage$1(vuePageOptions));\n  }\n}\n\nfunction createComponent(vueOptions) {\n  {\n    return Component(parseComponent$1(vueOptions));\n  }\n}\n\ntodos.forEach(function (todoApi) {\n  protocols[todoApi] = false;\n});\n\ncanIUses.forEach(function (canIUseApi) {\n  var apiName = protocols[canIUseApi] && protocols[canIUseApi].name ? protocols[canIUseApi].name :\n  canIUseApi;\n  if (!wx.canIUse(apiName)) {\n    protocols[canIUseApi] = false;\n  }\n});\n\nvar uni = {};\n\nif (typeof Proxy !== 'undefined' && \"app-plus\" !== 'app-plus') {\n  uni = new Proxy({}, {\n    get: function get(target, name) {\n      if (target[name]) {\n        return target[name];\n      }\n      if (baseApi[name]) {\n        return baseApi[name];\n      }\n      if (api[name]) {\n        return promisify(name, api[name]);\n      }\n      if (eventApi[name]) {\n        return eventApi[name];\n      }\n      if (!hasOwn(wx, name) && !hasOwn(protocols, name)) {\n        return;\n      }\n      return promisify(name, wrapper(name, wx[name]));\n    },\n    set: function set(target, name, value) {\n      target[name] = value;\n      return true;\n    } });\n\n} else {\n  Object.keys(baseApi).forEach(function (name) {\n    uni[name] = baseApi[name];\n  });\n\n  Object.keys(eventApi).forEach(function (name) {\n    uni[name] = eventApi[name];\n  });\n\n  Object.keys(api).forEach(function (name) {\n    uni[name] = promisify(name, api[name]);\n  });\n\n  Object.keys(wx).forEach(function (name) {\n    if (hasOwn(wx, name) || hasOwn(protocols, name)) {\n      uni[name] = promisify(name, wrapper(name, wx[name]));\n    }\n  });\n}\n\n{\n  if (typeof global !== 'undefined') {\n    global.uni = uni;\n    global.UniEmitter = eventApi;\n  }\n}\n\nwx.createApp = createApp;\nwx.createPage = createPage;\nwx.createComponent = createComponent;\n\nvar uni$1 = uni;var _default =\n\nuni$1;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),

/***/ 10:
/*!*********************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = formatLog;function typof(v) {\n  var s = Object.prototype.toString.call(v);\n  return s.substring(8, s.length - 1);\n}\n\nfunction formatLog() {for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}\n  var msgs = args.map(function (v) {\n    var type = Object.prototype.toString.call(v);\n    if (type.toLowerCase() === '[object object]') {\n      try {\n        v = '---BEGIN:JSON---' + JSON.stringify(v) + '---END:JSON---';\n      } catch (e) {\n        v = '[object object]';\n      }\n    } else {\n      if (v === null) {\n        v = '---NULL---';\n      } else if (v === undefined) {\n        v = '---UNDEFINED---';\n      } else {\n        var vType = typof(v).toUpperCase();\n        if (vType === 'NUMBER' || vType === 'BOOLEAN') {\n          v = '---BEGIN:' + vType + '---' + v + '---END:' + vType + '---';\n        } else {\n          v = String(v);\n        }\n      }\n    }\n    return v;\n  });\n  var msg = '';\n  if (msgs.length > 1) {\n    var lastMsg = msgs.pop();\n    msg = msgs.join('---COMMA---');\n    if (lastMsg.indexOf(' at ') === 0) {\n      msg += lastMsg;\n    } else {\n      msg += '---COMMA---' + lastMsg;\n    }\n  } else {\n    msg = msgs[0];\n  }\n  return msg;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbInR5cG9mIiwidiIsInMiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJzdWJzdHJpbmciLCJsZW5ndGgiLCJmb3JtYXRMb2ciLCJhcmdzIiwibXNncyIsIm1hcCIsInR5cGUiLCJ0b0xvd2VyQ2FzZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJlIiwidW5kZWZpbmVkIiwidlR5cGUiLCJ0b1VwcGVyQ2FzZSIsIlN0cmluZyIsIm1zZyIsImxhc3RNc2ciLCJwb3AiLCJqb2luIiwiaW5kZXhPZiJdLCJtYXBwaW5ncyI6IjBGQUFBLFNBQVNBLEtBQVQsQ0FBZ0JDLENBQWhCLEVBQW1CO0FBQ2pCLE1BQU1DLENBQUMsR0FBR0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JMLENBQS9CLENBQVY7QUFDQSxTQUFPQyxDQUFDLENBQUNLLFNBQUYsQ0FBWSxDQUFaLEVBQWVMLENBQUMsQ0FBQ00sTUFBRixHQUFXLENBQTFCLENBQVA7QUFDRDs7QUFFYyxTQUFTQyxTQUFULEdBQTZCLG1DQUFOQyxJQUFNLG9EQUFOQSxJQUFNO0FBQzFDLE1BQU1DLElBQUksR0FBR0QsSUFBSSxDQUFDRSxHQUFMLENBQVMsVUFBQ1gsQ0FBRCxFQUFPO0FBQzNCLFFBQU1ZLElBQUksR0FBR1YsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JMLENBQS9CLENBQWI7QUFDQSxRQUFJWSxJQUFJLENBQUNDLFdBQUwsT0FBdUIsaUJBQTNCLEVBQThDO0FBQzVDLFVBQUk7QUFDRmIsU0FBQyxHQUFHLHFCQUFxQmMsSUFBSSxDQUFDQyxTQUFMLENBQWVmLENBQWYsQ0FBckIsR0FBeUMsZ0JBQTdDO0FBQ0QsT0FGRCxDQUVFLE9BQU9nQixDQUFQLEVBQVU7QUFDVmhCLFNBQUMsR0FBRyxpQkFBSjtBQUNEO0FBQ0YsS0FORCxNQU1PO0FBQ0wsVUFBSUEsQ0FBQyxLQUFLLElBQVYsRUFBZ0I7QUFDZEEsU0FBQyxHQUFHLFlBQUo7QUFDRCxPQUZELE1BRU8sSUFBSUEsQ0FBQyxLQUFLaUIsU0FBVixFQUFxQjtBQUMxQmpCLFNBQUMsR0FBRyxpQkFBSjtBQUNELE9BRk0sTUFFQTtBQUNMLFlBQU1rQixLQUFLLEdBQUduQixLQUFLLENBQUNDLENBQUQsQ0FBTCxDQUFTbUIsV0FBVCxFQUFkO0FBQ0EsWUFBSUQsS0FBSyxLQUFLLFFBQVYsSUFBc0JBLEtBQUssS0FBSyxTQUFwQyxFQUErQztBQUM3Q2xCLFdBQUMsR0FBRyxjQUFja0IsS0FBZCxHQUFzQixLQUF0QixHQUE4QmxCLENBQTlCLEdBQWtDLFNBQWxDLEdBQThDa0IsS0FBOUMsR0FBc0QsS0FBMUQ7QUFDRCxTQUZELE1BRU87QUFDTGxCLFdBQUMsR0FBR29CLE1BQU0sQ0FBQ3BCLENBQUQsQ0FBVjtBQUNEO0FBQ0Y7QUFDRjtBQUNELFdBQU9BLENBQVA7QUFDRCxHQXZCWSxDQUFiO0FBd0JBLE1BQUlxQixHQUFHLEdBQUcsRUFBVjtBQUNBLE1BQUlYLElBQUksQ0FBQ0gsTUFBTCxHQUFjLENBQWxCLEVBQXFCO0FBQ25CLFFBQU1lLE9BQU8sR0FBR1osSUFBSSxDQUFDYSxHQUFMLEVBQWhCO0FBQ0FGLE9BQUcsR0FBR1gsSUFBSSxDQUFDYyxJQUFMLENBQVUsYUFBVixDQUFOO0FBQ0EsUUFBSUYsT0FBTyxDQUFDRyxPQUFSLENBQWdCLE1BQWhCLE1BQTRCLENBQWhDLEVBQW1DO0FBQ2pDSixTQUFHLElBQUlDLE9BQVA7QUFDRCxLQUZELE1BRU87QUFDTEQsU0FBRyxJQUFJLGdCQUFnQkMsT0FBdkI7QUFDRDtBQUNGLEdBUkQsTUFRTztBQUNMRCxPQUFHLEdBQUdYLElBQUksQ0FBQyxDQUFELENBQVY7QUFDRDtBQUNELFNBQU9XLEdBQVA7QUFDRCIsImZpbGUiOiIxMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHR5cG9mICh2KSB7XHJcbiAgY29uc3QgcyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2KVxyXG4gIHJldHVybiBzLnN1YnN0cmluZyg4LCBzLmxlbmd0aCAtIDEpXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdExvZyAoLi4uYXJncykge1xyXG4gIGNvbnN0IG1zZ3MgPSBhcmdzLm1hcCgodikgPT4ge1xyXG4gICAgY29uc3QgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2KVxyXG4gICAgaWYgKHR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ1tvYmplY3Qgb2JqZWN0XScpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICB2ID0gJy0tLUJFR0lOOkpTT04tLS0nICsgSlNPTi5zdHJpbmdpZnkodikgKyAnLS0tRU5EOkpTT04tLS0nXHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICB2ID0gJ1tvYmplY3Qgb2JqZWN0XSdcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKHYgPT09IG51bGwpIHtcclxuICAgICAgICB2ID0gJy0tLU5VTEwtLS0nXHJcbiAgICAgIH0gZWxzZSBpZiAodiA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdiA9ICctLS1VTkRFRklORUQtLS0nXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgdlR5cGUgPSB0eXBvZih2KS50b1VwcGVyQ2FzZSgpXHJcbiAgICAgICAgaWYgKHZUeXBlID09PSAnTlVNQkVSJyB8fCB2VHlwZSA9PT0gJ0JPT0xFQU4nKSB7XHJcbiAgICAgICAgICB2ID0gJy0tLUJFR0lOOicgKyB2VHlwZSArICctLS0nICsgdiArICctLS1FTkQ6JyArIHZUeXBlICsgJy0tLSdcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdiA9IFN0cmluZyh2KVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZcclxuICB9KVxyXG4gIGxldCBtc2cgPSAnJ1xyXG4gIGlmIChtc2dzLmxlbmd0aCA+IDEpIHtcclxuICAgIGNvbnN0IGxhc3RNc2cgPSBtc2dzLnBvcCgpXHJcbiAgICBtc2cgPSBtc2dzLmpvaW4oJy0tLUNPTU1BLS0tJylcclxuICAgIGlmIChsYXN0TXNnLmluZGV4T2YoJyBhdCAnKSA9PT0gMCkge1xyXG4gICAgICBtc2cgKz0gbGFzdE1zZ1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbXNnICs9ICctLS1DT01NQS0tLScgKyBsYXN0TXNnXHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIG1zZyA9IG1zZ3NbMF1cclxuICB9XHJcbiAgcmV0dXJuIG1zZ1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///10\n");

/***/ }),

/***/ 115:
/*!***********************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/utils/staffs.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni, __f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _hydrogenJsSdk = _interopRequireDefault(__webpack_require__(/*! hydrogen-js-sdk */ 14));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var _default =\n{\n\n  //得到员工的权限\n  get_satffAuth: function get_satffAuth() {\n    return new Promise(function (resolve, reject) {\n      var userid = uni.getStorageSync(\"user\").objectId;\n      var query = _hydrogenJsSdk.default.Query('staffs');\n      query.include(\"masterId\");\n      query.get(userid).then(function (res) {\n        //console.log(res)\n        uni.setStorageSync(\"user\", res);\n        resolve(res);\n      }).catch(function (err) {\n        //console.log(err)\n        resolve();\n      });\n    });\n  },\n\n  //得到员工列表\n  get_stafflist: function get_stafflist(disabled, search_text) {\n    return new Promise(function (resolve, reject) {\n      var userid = JSON.parse(localStorage.getItem('bmob')).objectId;\n      var query = _hydrogenJsSdk.default.Query(\"staffs\");\n      query.order(\"num\");\n      query.equalTo(\"masterId\", \"==\", userid);\n      query.equalTo(\"disabled\", \"==\", disabled);\n      query.include(\"shop\");\n      if (search_text) {\n        query.equalTo(\"name\", \"==\", {\n          \"$regex\": \"\" + search_text + \".*\" });\n\n\n      }\n      query.find().then(function (res) {\n        localStorage.setItem(\"staffs\", JSON.stringify(res));\n        resolve(res);\n      });\n    });\n\n  },\n\n\n  //增加数据操作\n  add_staff: function add_staff(params) {\n    var userid = JSON.parse(localStorage.getItem('bmob')).objectId;\n\n    return new Promise(function (resolve, reject) {\n      var pointer = _hydrogenJsSdk.default.Pointer('_User');\n      var poiID = pointer.set(userid);\n\n      var pointer1 = _hydrogenJsSdk.default.Pointer('shops');\n      var shopId = pointer1.set(params.shop);\n\n      if (params.objectId) {//修改操作\t\t\t\t\n        var _pointer = _hydrogenJsSdk.default.Pointer('_User');\n        var _poiID = _pointer.set(userid);\n\n        var query = _hydrogenJsSdk.default.Query('staffs');\n        query.set(\"username\", params.name);\n        query.set(\"nickName\", params.name);\n        query.set(\"password\", params.password);\n        query.set(\"mobilePhoneNumber\", params.mobilePhoneNumber);\n        query.set(\"rights\", params.rights);\n        query.set(\"address\", params.address);\n        query.set(\"avatarUrl\", \"http://bmob-cdn-23134.b0.upaiyun.com/2019/04/29/4705b31340bfff8080c068f52fd17e2c.png\");\n        query.set(\"masterId\", _poiID);\n        query.set(\"disabled\", !params.disabled);\n        query.set(\"shop\", shopId);\n        query.set(\"id\", params.objectId);\n        query.save().then(function (res) {\n          console.log(__f__(res, \" at utils\\\\staffs.js:73\"));\n          resolve(res);\n        }).catch(function (err) {\n          console.log(__f__(err, \" at utils\\\\staffs.js:76\"));\n\n        });\n      } else {\n\n        var _query = _hydrogenJsSdk.default.Query(\"staffs\");\n        _query.equalTo(\"masterId\", \"==\", userid);\n        _query.equalTo(\"mobilePhoneNumber\", \"==\", params.mobilePhoneNumber);\n        _query.find().then(function (res) {\n          console.log(__f__(res, \" at utils\\\\staffs.js:85\"));\n          if (res.length == 0) {\n\n            var _query2 = _hydrogenJsSdk.default.Query('staffs');\n            _query2.set(\"username\", params.name);\n            _query2.set(\"shop\", shopId);\n            _query2.set(\"nickName\", params.name);\n            _query2.set(\"password\", params.password);\n            _query2.set(\"mobilePhoneNumber\", params.mobilePhoneNumber);\n            _query2.set(\"rights\", params.rights);\n            _query2.set(\"address\", params.address);\n            _query2.set(\"avatarUrl\", \"http://bmob-cdn-23134.b0.upaiyun.com/2019/04/29/4705b31340bfff8080c068f52fd17e2c.png\");\n            _query2.set(\"masterId\", poiID);\n            _query2.set(\"have_out\", 0);\n            _query2.set(\"disabled\", !params.disabled);\n            _query2.save().then(function (res) {\n              console.log(__f__(res, \" at utils\\\\staffs.js:101\"));\n              resolve(res);\n            }).catch(function (err) {\n              console.log(__f__(err, \" at utils\\\\staffs.js:104\"));\n\n            });\n          } else {\n            resolve(false, \"已存在此账号\");\n          }\n\n        });\n\n      }\n\n    });\n  },\n\n  //删除门店\n  delete_staff: function delete_staff(id) {\n    return new Promise(function (resolve, reject) {\n      var query = _hydrogenJsSdk.default.Query(\"staffs\");\n      query.destroy(id).then(function (res) {\n        resolve(res);\n      }).catch(function (err) {\n        console.log(__f__(err, \" at utils\\\\staffs.js:125\"));\n      });\n    });\n\n  } };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///115\n");

/***/ }),

/***/ 14:
/*!***************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/app.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {var Bmob = __webpack_require__(/*! ./bmob */ 15);\nvar Pointer = __webpack_require__(/*! ./pointer */ 22);\nvar Relation = __webpack_require__(/*! ./relation */ 25);\nvar Query = __webpack_require__(/*! ./query */ 26);\nvar User = __webpack_require__(/*! ./user */ 62);\nvar File = __webpack_require__(/*! ./file */ 63);\nvar Pay = __webpack_require__(/*! ./pay */ 64);\nvar Socket = __webpack_require__(/*! ./socket */ 65);var _require =\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n__webpack_require__(/*! ./common */ 66),generateCode = _require.generateCode,sendMessage = _require.sendMessage,getAccessToken = _require.getAccessToken,sendWeAppMessage = _require.sendWeAppMessage,refund = _require.refund,notifyMsg = _require.notifyMsg,functions = _require.functions,timestamp = _require.timestamp,requestPasswordReset = _require.requestPasswordReset,resetPasswordBySmsCode = _require.resetPasswordBySmsCode,updateUserPassword = _require.updateUserPassword,geoPoint = _require.geoPoint,checkMsg = _require.checkMsg,push = _require.push;var _require2 =\n__webpack_require__(/*! ./sms */ 67),requestSmsCode = _require2.requestSmsCode,verifySmsCode = _require2.verifySmsCode;\n\n// 生成二维码\nBmob.GeoPoint = geoPoint;\n// 生成二维码\nBmob.generateCode = generateCode;\n// 发送模板消息\nBmob.sendMessage = sendMessage;\n// 获取微信token\nBmob.getAccessToken = getAccessToken;\n// 小程序模版信息\nBmob.sendWeAppMessage = sendWeAppMessage;\n// 微信退款\nBmob.refund = refund;\n// 检测文本\nBmob.checkMsg = checkMsg;\n// 微信主人通知\nBmob.notifyMsg = notifyMsg;\n// 请求短信验证码\nBmob.requestSmsCode = requestSmsCode;\n// 验证短信验证码\nBmob.verifySmsCode = verifySmsCode;\n// 云函数\nBmob.run = Bmob.functions = functions;\n// 获取服务器时间\nBmob.timestamp = timestamp;\n// 密码重置(Email)\nBmob.requestPasswordReset = requestPasswordReset;\n// 密码重置(短信)\nBmob.resetPasswordBySmsCode = resetPasswordBySmsCode;\n// 密码重置(登录状态下更改密码)\nBmob.updateUserPassword = updateUserPassword;\n// APP推送\nBmob.push = push;\n// 小程序支付\nBmob.Pay = new Pay();\n// 用户对象\nBmob.User = new User();\n// 通讯\nBmob.Socket = function (id) {return new Socket(id);};\n// 数据操作\nBmob.Query = function (parmas) {return new Query(parmas);};\n// 文件操作\nBmob.File = function (name, object) {return new File(name, object);};\n// 网络请求\nBmob.request = __webpack_require__(/*! ./request */ 27);\n// 平台判断\nBmob.type = Bmob.utils.getAppType();\n// 数据关联(一对一)\nBmob.Pointer = function (parmas) {return new Pointer(parmas);};\n// 数据关联(一对多，多对多)\nBmob.Relation = function (parmas) {return new Relation(parmas);};\n\nif (Bmob.type === 'wx') {\n  if (typeof tt !== 'undefined') {\n    tt.Bmob = Bmob;\n  } else {\n    wx.Bmob = Bmob;\n  }\n} else if (Bmob.type === 'h5') {\n  window.Bmob = Bmob;\n} else if (Bmob.type === 'hap') {\n  // 快应用功能\n  global.Bmob = Bmob;\n} else if (Bmob.type === 'nodejs') {\n  // nodejs\n  global.Bmob = Bmob;\n}\n\nmodule.exports = Bmob;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../../Downloads/HBuilderX.1.9.9.20190522.full/HBuilderX/plugins/uniapp-cli/node_modules/webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2FwcC5qcyJdLCJuYW1lcyI6WyJCbW9iIiwicmVxdWlyZSIsIlBvaW50ZXIiLCJSZWxhdGlvbiIsIlF1ZXJ5IiwiVXNlciIsIkZpbGUiLCJQYXkiLCJTb2NrZXQiLCJnZW5lcmF0ZUNvZGUiLCJzZW5kTWVzc2FnZSIsImdldEFjY2Vzc1Rva2VuIiwic2VuZFdlQXBwTWVzc2FnZSIsInJlZnVuZCIsIm5vdGlmeU1zZyIsImZ1bmN0aW9ucyIsInRpbWVzdGFtcCIsInJlcXVlc3RQYXNzd29yZFJlc2V0IiwicmVzZXRQYXNzd29yZEJ5U21zQ29kZSIsInVwZGF0ZVVzZXJQYXNzd29yZCIsImdlb1BvaW50IiwiY2hlY2tNc2ciLCJwdXNoIiwicmVxdWVzdFNtc0NvZGUiLCJ2ZXJpZnlTbXNDb2RlIiwiR2VvUG9pbnQiLCJydW4iLCJpZCIsInBhcm1hcyIsIm5hbWUiLCJvYmplY3QiLCJyZXF1ZXN0IiwidHlwZSIsInV0aWxzIiwiZ2V0QXBwVHlwZSIsInR0Iiwid3giLCJ3aW5kb3ciLCJnbG9iYWwiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOENBQUEsSUFBTUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLGdCQUFELENBQXBCO0FBQ0EsSUFBTUMsT0FBTyxHQUFHRCxtQkFBTyxDQUFDLG1CQUFELENBQXZCO0FBQ0EsSUFBTUUsUUFBUSxHQUFHRixtQkFBTyxDQUFDLG9CQUFELENBQXhCO0FBQ0EsSUFBTUcsS0FBSyxHQUFHSCxtQkFBTyxDQUFDLGlCQUFELENBQXJCO0FBQ0EsSUFBTUksSUFBSSxHQUFHSixtQkFBTyxDQUFDLGdCQUFELENBQXBCO0FBQ0EsSUFBTUssSUFBSSxHQUFHTCxtQkFBTyxDQUFDLGdCQUFELENBQXBCO0FBQ0EsSUFBTU0sR0FBRyxHQUFHTixtQkFBTyxDQUFDLGVBQUQsQ0FBbkI7QUFDQSxJQUFNTyxNQUFNLEdBQUdQLG1CQUFPLENBQUMs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QSxNQUFFLENBQUNuQyxJQUFILEdBQVVBLElBQVY7QUFDRCxHQUZELE1BRU87QUFDTG9DLE1BQUUsQ0FBQ3BDLElBQUgsR0FBVUEsSUFBVjtBQUNEO0FBQ0YsQ0FORCxNQU1PLElBQUlBLElBQUksQ0FBQ2dDLElBQUwsS0FBYyxJQUFsQixFQUF3QjtBQUM3QkssUUFBTSxDQUFDckMsSUFBUCxHQUFjQSxJQUFkO0FBQ0QsQ0FGTSxNQUVBLElBQUlBLElBQUksQ0FBQ2dDLElBQUwsS0FBYyxLQUFsQixFQUF5QjtBQUM5QjtBQUNBTSxRQUFNLENBQUN0QyxJQUFQLEdBQWNBLElBQWQ7QUFDRCxDQUhNLE1BR0EsSUFBSUEsSUFBSSxDQUFDZ0MsSUFBTCxLQUFjLFFBQWxCLEVBQTRCO0FBQ2pDO0FBQ0FNLFFBQU0sQ0FBQ3RDLElBQVAsR0FBY0EsSUFBZDtBQUNEOztBQUVEdUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCeEMsSUFBakIsQyIsImZpbGUiOiIxNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEJtb2IgPSByZXF1aXJlKCcuL2Jtb2InKVxuY29uc3QgUG9pbnRlciA9IHJlcXVpcmUoJy4vcG9pbnRlcicpXG5jb25zdCBSZWxhdGlvbiA9IHJlcXVpcmUoJy4vcmVsYXRpb24nKVxuY29uc3QgUXVlcnkgPSByZXF1aXJlKCcuL3F1ZXJ5JylcbmNvbnN0IFVzZXIgPSByZXF1aXJlKCcuL3VzZXInKVxuY29uc3QgRmlsZSA9IHJlcXVpcmUoJy4vZmlsZScpXG5jb25zdCBQYXkgPSByZXF1aXJlKCcuL3BheScpXG5jb25zdCBTb2NrZXQgPSByZXF1aXJlKCcuL3NvY2tldCcpXG5cbmNvbnN0IHtcbiAgZ2VuZXJhdGVDb2RlLFxuICBzZW5kTWVzc2FnZSxcbiAgZ2V0QWNjZXNzVG9rZW4sXG4gIHNlbmRXZUFwcE1lc3NhZ2UsXG4gIHJlZnVuZCxcbiAgbm90aWZ5TXNnLFxuICBmdW5jdGlvbnMsXG4gIHRpbWVzdGFtcCxcbiAgcmVxdWVzdFBhc3N3b3JkUmVzZXQsXG4gIHJlc2V0UGFzc3dvcmRCeVNtc0NvZGUsXG4gIHVwZGF0ZVVzZXJQYXNzd29yZCxcbiAgZ2VvUG9pbnQsXG4gIGNoZWNrTXNnLFxuICBwdXNoXG59ID0gcmVxdWlyZSgnLi9jb21tb24nKVxuY29uc3Qge3JlcXVlc3RTbXNDb2RlLCB2ZXJpZnlTbXNDb2RlfSA9IHJlcXVpcmUoJy4vc21zJylcblxuLy8g55Sf5oiQ5LqM57u056CBXG5CbW9iLkdlb1BvaW50ID0gZ2VvUG9pbnRcbi8vIOeUn+aIkOS6jOe7tOeggVxuQm1vYi5nZW5lcmF0ZUNvZGUgPSBnZW5lcmF0ZUNvZGVcbi8vIOWPkemAgeaooeadv+a2iOaBr1xuQm1vYi5zZW5kTWVzc2FnZSA9IHNlbmRNZXNzYWdlXG4vLyDojrflj5blvq7kv6F0b2tlblxuQm1vYi5nZXRBY2Nlc3NUb2tlbiA9IGdldEFjY2Vzc1Rva2VuXG4vLyDlsI/nqIvluo/mqKHniYjkv6Hmga9cbkJtb2Iuc2VuZFdlQXBwTWVzc2FnZSA9IHNlbmRXZUFwcE1lc3NhZ2Vcbi8vIOW+ruS/oemAgOasvlxuQm1vYi5yZWZ1bmQgPSByZWZ1bmRcbi8vIOajgOa1i+aWh+acrFxuQm1vYi5jaGVja01zZyA9IGNoZWNrTXNnXG4vLyDlvq7kv6HkuLvkurrpgJrnn6VcbkJtb2Iubm90aWZ5TXNnID0gbm90aWZ5TXNnXG4vLyDor7fmsYLnn63kv6Hpqozor4HnoIFcbkJtb2IucmVxdWVzdFNtc0NvZGUgPSByZXF1ZXN0U21zQ29kZVxuLy8g6aqM6K+B55+t5L+h6aqM6K+B56CBXG5CbW9iLnZlcmlmeVNtc0NvZGUgPSB2ZXJpZnlTbXNDb2RlXG4vLyDkupHlh73mlbBcbkJtb2IucnVuID0gQm1vYi5mdW5jdGlvbnMgPSBmdW5jdGlvbnNcbi8vIOiOt+WPluacjeWKoeWZqOaXtumXtFxuQm1vYi50aW1lc3RhbXAgPSB0aW1lc3RhbXBcbi8vIOWvhueggemHjee9rihFbWFpbClcbkJtb2IucmVxdWVzdFBhc3N3b3JkUmVzZXQgPSByZXF1ZXN0UGFzc3dvcmRSZXNldFxuLy8g5a+G56CB6YeN572uKOefreS/oSlcbkJtb2IucmVzZXRQYXNzd29yZEJ5U21zQ29kZSA9IHJlc2V0UGFzc3dvcmRCeVNtc0NvZGVcbi8vIOWvhueggemHjee9rijnmbvlvZXnirbmgIHkuIvmm7TmlLnlr4bnoIEpXG5CbW9iLnVwZGF0ZVVzZXJQYXNzd29yZCA9IHVwZGF0ZVVzZXJQYXNzd29yZFxuLy8gQVBQ5o6o6YCBXG5CbW9iLnB1c2ggPSBwdXNoXG4vLyDlsI/nqIvluo/mlK/ku5hcbkJtb2IuUGF5ID0gbmV3IFBheSgpXG4vLyDnlKjmiLflr7nosaFcbkJtb2IuVXNlciA9IG5ldyBVc2VyKClcbi8vIOmAmuiur1xuQm1vYi5Tb2NrZXQgPSAoaWQpID0+IG5ldyBTb2NrZXQoaWQpXG4vLyDmlbDmja7mk43kvZxcbkJtb2IuUXVlcnkgPSBwYXJtYXMgPT4gbmV3IFF1ZXJ5KHBhcm1hcylcbi8vIOaWh+S7tuaTjeS9nFxuQm1vYi5GaWxlID0gKG5hbWUsIG9iamVjdCkgPT4gbmV3IEZpbGUobmFtZSwgb2JqZWN0KVxuLy8g572R57uc6K+35rGCXG5CbW9iLnJlcXVlc3QgPSByZXF1aXJlKCcuL3JlcXVlc3QnKVxuLy8g5bmz5Y+w5Yik5patXG5CbW9iLnR5cGUgPSBCbW9iLnV0aWxzLmdldEFwcFR5cGUoKVxuLy8g5pWw5o2u5YWz6IGUKOS4gOWvueS4gClcbkJtb2IuUG9pbnRlciA9IHBhcm1hcyA9PiBuZXcgUG9pbnRlcihwYXJtYXMpXG4vLyDmlbDmja7lhbPogZQo5LiA5a+55aSa77yM5aSa5a+55aSaKVxuQm1vYi5SZWxhdGlvbiA9IHBhcm1hcyA9PiBuZXcgUmVsYXRpb24ocGFybWFzKVxuXG5pZiAoQm1vYi50eXBlID09PSAnd3gnKSB7XG4gIGlmICh0eXBlb2YgKHR0KSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0dC5CbW9iID0gQm1vYlxuICB9IGVsc2Uge1xuICAgIHd4LkJtb2IgPSBCbW9iXG4gIH1cbn0gZWxzZSBpZiAoQm1vYi50eXBlID09PSAnaDUnKSB7XG4gIHdpbmRvdy5CbW9iID0gQm1vYlxufSBlbHNlIGlmIChCbW9iLnR5cGUgPT09ICdoYXAnKSB7XG4gIC8vIOW/q+W6lOeUqOWKn+iDvVxuICBnbG9iYWwuQm1vYiA9IEJtb2Jcbn0gZWxzZSBpZiAoQm1vYi50eXBlID09PSAnbm9kZWpzJykge1xuICAvLyBub2RlanNcbiAgZ2xvYmFsLkJtb2IgPSBCbW9iXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQm1vYlxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///14\n");

/***/ }),

/***/ 15:
/*!****************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/bmob.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global, __f__) {var utils = __webpack_require__(/*! ./utils */ 16);\n\nvar Bmob = global.Bmob || {};\nBmob.utils = utils;\nBmob._config = utils.getConfig();\n\nBmob.initialize = function (secretKey, securityCode, masterKey) {\n  if (securityCode.length > 6) {\n    console.log(__f__(\"Bmob\\u521D\\u59CB\\u5316\\u5931\\u8D25\\uFF0C2.0\\u7248\\u672CSDK\\u8BF7\\u4F7F\\u7528API\\u5B89\\u5168\\u7801\\u521D\\u59CB\\u5316\\uFF0C\\u6587\\u6863\\u5730\\u5740\\uFF1Ahttps://bmob.github.io/hydrogen-js-sdk/#/?id=\\u521D\\u59CB\\u5316\", \" at node_modules\\\\hydrogen-js-sdk\\\\src\\\\lib\\\\bmob.js:9\"));\n  }\n  Bmob._config.secretKey = secretKey;\n  Bmob._config.securityCode = securityCode;\n  Bmob._config.applicationMasterKey = masterKey;\n};\n\n// 开启调试\nBmob.debug = function (d) {\n  Bmob._config.deBug = d;\n  Bmob._config = utils.getConfig(d);\n};\n\nmodule.exports = Bmob;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../../Downloads/HBuilderX.1.9.9.20190522.full/HBuilderX/plugins/uniapp-cli/node_modules/webpack/buildin/global.js */ 2), __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2Jtb2IuanMiXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwiQm1vYiIsImdsb2JhbCIsIl9jb25maWciLCJnZXRDb25maWciLCJpbml0aWFsaXplIiwic2VjcmV0S2V5Iiwic2VjdXJpdHlDb2RlIiwibWFzdGVyS2V5IiwibGVuZ3RoIiwiY29uc29sZSIsImxvZyIsImFwcGxpY2F0aW9uTWFzdGVyS2V5IiwiZGVidWciLCJkIiwiZGVCdWciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoicURBQUEsSUFBTUEsS0FBSyxHQUFHQyxtQkFBTyxDQUFDLGlCQUFELENBQXJCOztBQUVBLElBQU1DLElBQUksR0FBR0MsTUFBTSxDQUFDRCxJQUFQLElBQWUsRUFBNUI7QUFDQUEsSUFBSSxDQUFDRixLQUFMLEdBQWFBLEtBQWI7QUFDQUUsSUFBSSxDQUFDRSxPQUFMLEdBQWVKLEtBQUssQ0FBQ0ssU0FBTixFQUFmOztBQUVBSCxJQUFJLENBQUNJLFVBQUwsR0FBa0IsVUFBQ0MsU0FBRCxFQUFZQyxZQUFaLEVBQTBCQyxTQUExQixFQUF3QztBQUN4RCxNQUFJRCxZQUFZLENBQUNFLE1BQWIsR0FBc0IsQ0FBMUIsRUFBNkI7QUFDM0JDLFdBQU8sQ0FBQ0MsR0FBUjtBQUNEO0FBQ0RWLE1BQUksQ0FBQ0UsT0FBTCxDQUFhRyxTQUFiLEdBQXlCQSxTQUF6QjtBQUNBTCxNQUFJLENBQUNFLE9BQUwsQ0FBYUksWUFBYixHQUE0QkEsWUFBNUI7QUFDQU4sTUFBSSxDQUFDRSxPQUFMLENBQWFTLG9CQUFiLEdBQW9DSixTQUFwQztBQUNELENBUEQ7O0FBU0E7QUFDQVAsSUFBSSxDQUFDWSxLQUFMLEdBQWEsVUFBQ0MsQ0FBRCxFQUFPO0FBQ2xCYixNQUFJLENBQUNFLE9BQUwsQ0FBYVksS0FBYixHQUFxQkQsQ0FBckI7QUFDQWIsTUFBSSxDQUFDRSxPQUFMLEdBQWVKLEtBQUssQ0FBQ0ssU0FBTixDQUFnQlUsQ0FBaEIsQ0FBZjtBQUNELENBSEQ7O0FBS0FFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmhCLElBQWpCLEMiLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKVxuXG5jb25zdCBCbW9iID0gZ2xvYmFsLkJtb2IgfHwge31cbkJtb2IudXRpbHMgPSB1dGlsc1xuQm1vYi5fY29uZmlnID0gdXRpbHMuZ2V0Q29uZmlnKClcblxuQm1vYi5pbml0aWFsaXplID0gKHNlY3JldEtleSwgc2VjdXJpdHlDb2RlLCBtYXN0ZXJLZXkpID0+IHtcbiAgaWYgKHNlY3VyaXR5Q29kZS5sZW5ndGggPiA2KSB7XG4gICAgY29uc29sZS5sb2coYEJtb2LliJ3lp4vljJblpLHotKXvvIwyLjDniYjmnKxTREvor7fkvb/nlKhBUEnlronlhajnoIHliJ3lp4vljJbvvIzmlofmoaPlnLDlnYDvvJpodHRwczovL2Jtb2IuZ2l0aHViLmlvL2h5ZHJvZ2VuLWpzLXNkay8jLz9pZD3liJ3lp4vljJZgKVxuICB9XG4gIEJtb2IuX2NvbmZpZy5zZWNyZXRLZXkgPSBzZWNyZXRLZXlcbiAgQm1vYi5fY29uZmlnLnNlY3VyaXR5Q29kZSA9IHNlY3VyaXR5Q29kZVxuICBCbW9iLl9jb25maWcuYXBwbGljYXRpb25NYXN0ZXJLZXkgPSBtYXN0ZXJLZXlcbn1cblxuLy8g5byA5ZCv6LCD6K+VXG5CbW9iLmRlYnVnID0gKGQpID0+IHtcbiAgQm1vYi5fY29uZmlnLmRlQnVnID0gZFxuICBCbW9iLl9jb25maWcgPSB1dGlscy5nZXRDb25maWcoZClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCbW9iXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///15\n");

/***/ }),

/***/ 16:
/*!*****************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/utils.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process, global) {var config;\n\nconfig = __webpack_require__(/*! ./config */ 19);\n\n/**\n                               * 获取 SDK 配置信息\n                               * @return {Object}\n                               */\nvar getConfig = function getConfig() {var d = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  if (d === true) {\n    config.host = __webpack_require__(/*! ./config.dev */ 21).host;\n  }\n  return config;\n};\n// 获取SDK类型\nvar getAppType = function getAppType() {\n  var config = getConfig();\n  var type;\n  // h5\n  if (typeof wx !== 'undefined') {\n    // 小程序\n    type = 'wx';\n  } else if (typeof window !== 'undefined') {\n    type = 'h5';\n  } else if (process === global.process) {\n    // 快应用功能\n    type = 'nodejs';\n  } else if (config.type === 3) {\n    // 快应用功能\n    type = 'hap';\n  } else {\n    // 默认H5\n    type = 'h5';\n  }\n  return type;\n};\n\n// 生成16位随机字符串\nvar randomString = function randomString() {\n  var chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  var nums = '';\n  for (var i = 0; i < 16; i++) {\n    var id = parseInt(Math.random() * 61);\n    nums += chars[id];\n  }\n  return nums;\n};\nmodule.exports = { randomString: randomString, getConfig: getConfig, getAppType: getAppType };\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../../Downloads/HBuilderX.1.9.9.20190522.full/HBuilderX/plugins/uniapp-cli/node_modules/node-libs-browser/mock/process.js */ 17), __webpack_require__(/*! ./../../../../../../../Downloads/HBuilderX.1.9.9.20190522.full/HBuilderX/plugins/uniapp-cli/node_modules/webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL3V0aWxzLmpzIl0sIm5hbWVzIjpbImNvbmZpZyIsInJlcXVpcmUiLCJnZXRDb25maWciLCJkIiwiaG9zdCIsImdldEFwcFR5cGUiLCJ0eXBlIiwid3giLCJ3aW5kb3ciLCJwcm9jZXNzIiwiZ2xvYmFsIiwicmFuZG9tU3RyaW5nIiwiY2hhcnMiLCJudW1zIiwiaSIsImlkIiwicGFyc2VJbnQiLCJNYXRoIiwicmFuZG9tIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6InVEQUFBLElBQUlBLE1BQUo7O0FBRUFBLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQyxrQkFBRCxDQUFoQjs7QUFFQTs7OztBQUlBLElBQU1DLFNBQVMsR0FBRyxTQUFaQSxTQUFZLEdBQWUsS0FBZEMsQ0FBYyx1RUFBVixLQUFVO0FBQy9CLE1BQUlBLENBQUMsS0FBSyxJQUFWLEVBQWdCO0FBQ2RILFVBQU0sQ0FBQ0ksSUFBUCxHQUFjSCxtQkFBTyxDQUFDLHNCQUFELENBQVAsQ0FBd0JHLElBQXRDO0FBQ0Q7QUFDRCxTQUFPSixNQUFQO0FBQ0QsQ0FMRDtBQU1BO0FBQ0EsSUFBTUssVUFBVSxHQUFHLFNBQWJBLFVBQWEsR0FBTTtBQUN2QixNQUFNTCxNQUFNLEdBQUdFLFNBQVMsRUFBeEI7QUFDQSxNQUFJSSxJQUFKO0FBQ0E7QUFDQSxNQUFJLE9BQU9DLEVBQVAsS0FBYyxXQUFsQixFQUErQjtBQUM3QjtBQUNBRCxRQUFJLEdBQUcsSUFBUDtBQUNELEdBSEQsTUFHTyxJQUFJLE9BQU9FLE1BQVAsS0FBa0IsV0FBdEIsRUFBbUM7QUFDeENGLFFBQUksR0FBRyxJQUFQO0FBQ0QsR0FGTSxNQUVBLElBQUlHLE9BQU8sS0FBS0MsTUFBTSxDQUFDRCxPQUF2QixFQUFnQztBQUNyQztBQUNBSCxRQUFJLEdBQUcsUUFBUDtBQUNELEdBSE0sTUFHQSxJQUFJTixNQUFNLENBQUNNLElBQVAsS0FBZ0IsQ0FBcEIsRUFBdUI7QUFDNUI7QUFDQUEsUUFBSSxHQUFHLEtBQVA7QUFDRCxHQUhNLE1BR0E7QUFDTDtBQUNBQSxRQUFJLEdBQUcsSUFBUDtBQUNEO0FBQ0QsU0FBT0EsSUFBUDtBQUNELENBcEJEOztBQXNCQTtBQUNBLElBQU1LLFlBQVksR0FBRyxTQUFmQSxZQUFlLEdBQU07QUFDekIsTUFBSUMsS0FBSyxHQUFHLENBQUMsR0FBRCxFQUFNLEdBQU4sRUFBVyxHQUFYLEVBQWdCLEdBQWhCLEVBQXFCLEdBQXJCLEVBQTBCLEdBQTFCLEVBQStCLEdBQS9CLEVBQW9DLEdBQXBDLEVBQXlDLEdBQXpDLEVBQThDLEdBQTlDLEVBQW1ELEdBQW5ELEVBQXdELEdBQXhELEVBQTZELEdBQTdELEVBQWtFLEdBQWxFLEVBQXVFLEdBQXZFLEVBQTRFLEdBQTVFLEVBQWlGLEdBQWpGLEVBQXNGLEdBQXRGLEVBQTJGLEdBQTNGLEVBQWdHLEdBQWhHLEVBQXFHLEdBQXJHLEVBQTBHLEdBQTFHLEVBQStHLEdBQS9HLEVBQW9ILEdBQXBILEVBQXlILEdBQXpILEVBQThILEdBQTlILEVBQW1JLEdBQW5JLEVBQXdJLEdBQXhJLEVBQTZJLEdBQTdJLEVBQWtKLEdBQWxKLEVBQXVKLEdBQXZKLEVBQTRKLEdBQTVKLEVBQWlLLEdBQWpLLEVBQXNLLEdBQXRLLEVBQTJLLEdBQTNLLEVBQWdMLEdBQWhMLEVBQXFMLEdBQXJMLEVBQTBMLEdBQTFMLEVBQStMLEdBQS9MLEVBQW9NLEdBQXBNLEVBQXlNLEdBQXpNLEVBQThNLEdBQTlNLEVBQW1OLEdBQW5OLEVBQXdOLEdBQXhOLEVBQTZOLEdBQTdOLEVBQWtPLEdBQWxPLEVBQXVPLEdBQXZPLEVBQTRPLEdBQTVPLEVBQWlQLEdBQWpQLEVBQXNQLEdBQXRQLEVBQTJQLEdBQTNQLEVBQWdRLEdBQWhRLEVBQXFRLEdBQXJRLEVBQTBRLEdBQTFRLEVBQStRLEdBQS9RLEVBQW9SLEdBQXBSLEVBQXlSLEdBQXpSLEVBQThSLEdBQTlSLEVBQW1TLEdBQW5TLEVBQXdTLEdBQXhTLEVBQTZTLEdBQTdTLEVBQWtULEdBQWxULENBQVo7QUFDQSxNQUFJQyxJQUFJLEdBQUcsRUFBWDtBQUNBLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxFQUFwQixFQUF3QkEsQ0FBQyxFQUF6QixFQUE2QjtBQUMzQixRQUFJQyxFQUFFLEdBQUdDLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDQyxNQUFMLEtBQWdCLEVBQWpCLENBQWpCO0FBQ0FMLFFBQUksSUFBSUQsS0FBSyxDQUFDRyxFQUFELENBQWI7QUFDRDtBQUNELFNBQU9GLElBQVA7QUFDRCxDQVJEO0FBU0FNLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixFQUFFVCxZQUFZLEVBQVpBLFlBQUYsRUFBZ0JULFNBQVMsRUFBVEEsU0FBaEIsRUFBMkJHLFVBQVUsRUFBVkEsVUFBM0IsRUFBakIsQyIsImZpbGUiOiIxNi5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBjb25maWdcblxuY29uZmlnID0gcmVxdWlyZSgnLi9jb25maWcnKVxuXG4vKipcbiAqIOiOt+WPliBTREsg6YWN572u5L+h5oGvXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmNvbnN0IGdldENvbmZpZyA9IChkID0gZmFsc2UpID0+IHtcbiAgaWYgKGQgPT09IHRydWUpIHtcbiAgICBjb25maWcuaG9zdCA9IHJlcXVpcmUoJy4vY29uZmlnLmRldicpLmhvc3RcbiAgfVxuICByZXR1cm4gY29uZmlnXG59XG4vLyDojrflj5ZTREvnsbvlnotcbmNvbnN0IGdldEFwcFR5cGUgPSAoKSA9PiB7XG4gIGNvbnN0IGNvbmZpZyA9IGdldENvbmZpZygpXG4gIGxldCB0eXBlXG4gIC8vIGg1XG4gIGlmICh0eXBlb2Ygd3ggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8g5bCP56iL5bqPXG4gICAgdHlwZSA9ICd3eCdcbiAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHR5cGUgPSAnaDUnXG4gIH0gZWxzZSBpZiAocHJvY2VzcyA9PT0gZ2xvYmFsLnByb2Nlc3MpIHtcbiAgICAvLyDlv6vlupTnlKjlip/og71cbiAgICB0eXBlID0gJ25vZGVqcydcbiAgfSBlbHNlIGlmIChjb25maWcudHlwZSA9PT0gMykge1xuICAgIC8vIOW/q+W6lOeUqOWKn+iDvVxuICAgIHR5cGUgPSAnaGFwJ1xuICB9IGVsc2Uge1xuICAgIC8vIOm7mOiupEg1XG4gICAgdHlwZSA9ICdoNSdcbiAgfVxuICByZXR1cm4gdHlwZVxufVxuXG4vLyDnlJ/miJAxNuS9jemaj+acuuWtl+espuS4slxuY29uc3QgcmFuZG9tU3RyaW5nID0gKCkgPT4ge1xuICBsZXQgY2hhcnMgPSBbJzAnLCAnMScsICcyJywgJzMnLCAnNCcsICc1JywgJzYnLCAnNycsICc4JywgJzknLCAnQScsICdCJywgJ0MnLCAnRCcsICdFJywgJ0YnLCAnRycsICdIJywgJ0knLCAnSicsICdLJywgJ0wnLCAnTScsICdOJywgJ08nLCAnUCcsICdRJywgJ1InLCAnUycsICdUJywgJ1UnLCAnVicsICdXJywgJ1gnLCAnWScsICdaJywgJ2EnLCAnYicsICdjJywgJ2QnLCAnZScsICdmJywgJ2cnLCAnaCcsICdpJywgJ2onLCAnaycsICdsJywgJ20nLCAnbicsICdvJywgJ3AnLCAncScsICdyJywgJ3MnLCAndCcsICd1JywgJ3YnLCAndycsICd4JywgJ3knLCAneiddXG4gIGxldCBudW1zID0gJydcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgbGV0IGlkID0gcGFyc2VJbnQoTWF0aC5yYW5kb20oKSAqIDYxKVxuICAgIG51bXMgKz0gY2hhcnNbaWRdXG4gIH1cbiAgcmV0dXJuIG51bXNcbn1cbm1vZHVsZS5leHBvcnRzID0geyByYW5kb21TdHJpbmcsIGdldENvbmZpZywgZ2V0QXBwVHlwZSB9XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///16\n");

/***/ }),

/***/ 17:
/*!********************************************************!*\
  !*** ./node_modules/node-libs-browser/mock/process.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports.nextTick = function nextTick(fn) {\n\tsetTimeout(fn, 0);\n};\n\nexports.platform = exports.arch = \nexports.execPath = exports.title = 'browser';\nexports.pid = 1;\nexports.browser = true;\nexports.env = {};\nexports.argv = [];\n\nexports.binding = function (name) {\n\tthrow new Error('No such module. (Possibly not yet loaded)')\n};\n\n(function () {\n    var cwd = '/';\n    var path;\n    exports.cwd = function () { return cwd };\n    exports.chdir = function (dir) {\n        if (!path) path = __webpack_require__(/*! path */ 18);\n        cwd = path.resolve(dir, cwd);\n    };\n})();\n\nexports.exit = exports.kill = \nexports.umask = exports.dlopen = \nexports.uptime = exports.memoryUsage = \nexports.uvCounters = function() {};\nexports.features = {};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBLDBCQUEwQixtQkFBTyxDQUFDLGNBQU07QUFDeEM7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMubmV4dFRpY2sgPSBmdW5jdGlvbiBuZXh0VGljayhmbikge1xuXHRzZXRUaW1lb3V0KGZuLCAwKTtcbn07XG5cbmV4cG9ydHMucGxhdGZvcm0gPSBleHBvcnRzLmFyY2ggPSBcbmV4cG9ydHMuZXhlY1BhdGggPSBleHBvcnRzLnRpdGxlID0gJ2Jyb3dzZXInO1xuZXhwb3J0cy5waWQgPSAxO1xuZXhwb3J0cy5icm93c2VyID0gdHJ1ZTtcbmV4cG9ydHMuZW52ID0ge307XG5leHBvcnRzLmFyZ3YgPSBbXTtcblxuZXhwb3J0cy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcblx0dGhyb3cgbmV3IEVycm9yKCdObyBzdWNoIG1vZHVsZS4gKFBvc3NpYmx5IG5vdCB5ZXQgbG9hZGVkKScpXG59O1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIHZhciBjd2QgPSAnLyc7XG4gICAgdmFyIHBhdGg7XG4gICAgZXhwb3J0cy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjd2QgfTtcbiAgICBleHBvcnRzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgICAgICBpZiAoIXBhdGgpIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG4gICAgICAgIGN3ZCA9IHBhdGgucmVzb2x2ZShkaXIsIGN3ZCk7XG4gICAgfTtcbn0pKCk7XG5cbmV4cG9ydHMuZXhpdCA9IGV4cG9ydHMua2lsbCA9IFxuZXhwb3J0cy51bWFzayA9IGV4cG9ydHMuZGxvcGVuID0gXG5leHBvcnRzLnVwdGltZSA9IGV4cG9ydHMubWVtb3J5VXNhZ2UgPSBcbmV4cG9ydHMudXZDb3VudGVycyA9IGZ1bmN0aW9uKCkge307XG5leHBvcnRzLmZlYXR1cmVzID0ge307XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///17\n");

/***/ }),

/***/ 18:
/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node-libs-browser/mock/process.js */ 17)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n");

/***/ }),

/***/ 19:
/*!******************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/config.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var ROOT;\nvar VERSION;\ntry {\n  ROOT = __webpack_require__(/*! ../../package.json */ 20);\n  // 这行在小程序引入app.js报错\n  VERSION = \"v\".concat(ROOT.version);\n} catch (e) {\n  // 这行在小程序引入app.js报错\n  VERSION = \"v1.0.0\";\n}\n\nvar HOST = 'https://api.bmobcloud.com';\n\nvar SECRET_KEY = '';\nvar SECURITY_CODE = '';\nvar APPLICATION_MASTER_KEY = '';\n\n// 1.h5 2.小程序 3.快应用 4.nodejs\nvar TYPE = 3;\n\nvar PARAMETERS = {\n  GENERATECODE: '/1/wechatApp/qr/generatecode', // 生成二维码\n  GETACCESSTOKEN: '/1/wechatApp/getAccessToken', // 获取access_token\n  SENDWEAPPMESSAGE: '/1/wechatApp/SendWeAppMessage', // 小程序模版消息\n  NOTIFYMSG: '/1/wechatApp/notifyMsg', // 微信主人通知\n  REFUND: '/1/pay/refund', // 微信退款\n  REQUESTSMSCODE: '/1/requestSmsCode', // 请求短信验证码\n  VERIFYSMSCODE: '/1/verifySmsCode', // 验证短信验证码\n  FUNCTIONS: '/1/functions', // 云函数\n  REQUESTPASSWORDRESET: '/1/requestPasswordReset', // 重置密码(email)\n  RESETPASSWORDBYSMSCODE: '/1/resetPasswordBySmsCode', // 重置密码(短信)\n  UPDATEUSERPASSWORD: '/1/updateUserPassword', // 重置密码(登录状态下旧密码换新密码)\n  PUSH: '/1/push', // APP推送\n  FILES: '/2/files', // 单个文件上传/删除\n  DELFILES: '/2/cdnBatchDelete', // 批量删除\n  TIMESTAMP: '/1/timestamp', // 获取服务器时间\n  LOGIN: '/1/login', // 登陆\n  REGISTER: '/1/users', // 注册\n  REQUEST_EMAIL_VERIFY: '/1/requestEmailVerify', // 注册\n  USERS: '/1/users', // 查询用户\n  PAY: '/1/pay', // 支付\n  WECHAT_APP: '/1/wechatApp/', // 获取openid\n  BATCH: '/1/batch',\n  CHECK_MSG: '/1/wechatApp/checkMsg', // 检测文本内容\n  DECRYPTION: '/1/wechatApp/decryption', // 检测文本内容\n  QUERY: '/1/classes' // 查询数据\n};\nmodule.exports = {\n  host: HOST,\n  secretKey: SECRET_KEY,\n  securityCode: SECURITY_CODE,\n  applicationMasterKey: APPLICATION_MASTER_KEY,\n  parameters: PARAMETERS,\n  version: VERSION,\n  deBug: false,\n  type: TYPE };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2NvbmZpZy5qcyJdLCJuYW1lcyI6WyJST09UIiwiVkVSU0lPTiIsInJlcXVpcmUiLCJ2ZXJzaW9uIiwiZSIsIkhPU1QiLCJTRUNSRVRfS0VZIiwiU0VDVVJJVFlfQ09ERSIsIkFQUExJQ0FUSU9OX01BU1RFUl9LRVkiLCJUWVBFIiwiUEFSQU1FVEVSUyIsIkdFTkVSQVRFQ09ERSIsIkdFVEFDQ0VTU1RPS0VOIiwiU0VORFdFQVBQTUVTU0FHRSIsIk5PVElGWU1TRyIsIlJFRlVORCIsIlJFUVVFU1RTTVNDT0RFIiwiVkVSSUZZU01TQ09ERSIsIkZVTkNUSU9OUyIsIlJFUVVFU1RQQVNTV09SRFJFU0VUIiwiUkVTRVRQQVNTV09SREJZU01TQ09ERSIsIlVQREFURVVTRVJQQVNTV09SRCIsIlBVU0giLCJGSUxFUyIsIkRFTEZJTEVTIiwiVElNRVNUQU1QIiwiTE9HSU4iLCJSRUdJU1RFUiIsIlJFUVVFU1RfRU1BSUxfVkVSSUZZIiwiVVNFUlMiLCJQQVkiLCJXRUNIQVRfQVBQIiwiQkFUQ0giLCJDSEVDS19NU0ciLCJERUNSWVBUSU9OIiwiUVVFUlkiLCJtb2R1bGUiLCJleHBvcnRzIiwiaG9zdCIsInNlY3JldEtleSIsInNlY3VyaXR5Q29kZSIsImFwcGxpY2F0aW9uTWFzdGVyS2V5IiwicGFyYW1ldGVycyIsImRlQnVnIiwidHlwZSJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsSUFBSjtBQUNBLElBQUlDLE9BQUo7QUFDQSxJQUFJO0FBQ0ZELE1BQUksR0FBR0UsbUJBQU8sQ0FBQyw0QkFBRCxDQUFkO0FBQ0E7QUFDQUQsU0FBTyxjQUFPRCxJQUFJLENBQUNHLE9BQVosQ0FBUDtBQUNELENBSkQsQ0FJRSxPQUFPQyxDQUFQLEVBQVU7QUFDWjtBQUNFSCxTQUFPLFdBQVA7QUFDRDs7QUFFRCxJQUFNSSxJQUFJLEdBQUcsMkJBQWI7O0FBRUEsSUFBTUMsVUFBVSxHQUFHLEVBQW5CO0FBQ0EsSUFBTUMsYUFBYSxHQUFHLEVBQXRCO0FBQ0EsSUFBTUMsc0JBQXNCLEdBQUcsRUFBL0I7O0FBRUE7QUFDQSxJQUFNQyxJQUFJLEdBQUcsQ0FBYjs7QUFFQSxJQUFNQyxVQUFVLEdBQUc7QUFDakJDLGNBQVksRUFBRSw4QkFERyxFQUM2QjtBQUM5Q0MsZ0JBQWMsRUFBRSw2QkFGQyxFQUU4QjtBQUMvQ0Msa0JBQWdCLEVBQUUsK0JBSEQsRUFHa0M7QUFDbkRDLFdBQVMsRUFBRSx3QkFKTSxFQUlvQjtBQUNyQ0MsUUFBTSxFQUFFLGVBTFMsRUFLUTtBQUN6QkMsZ0JBQWMsRUFBRSxtQkFOQyxFQU1vQjtBQUNyQ0MsZUFBYSxFQUFFLGtCQVBFLEVBT2tCO0FBQ25DQyxXQUFTLEVBQUUsY0FSTSxFQVFVO0FBQzNCQyxzQkFBb0IsRUFBRSx5QkFUTCxFQVNnQztBQUNqREMsd0JBQXNCLEVBQUUsMkJBVlAsRUFVb0M7QUFDckRDLG9CQUFrQixFQUFFLHVCQVhILEVBVzRCO0FBQzdDQyxNQUFJLEVBQUUsU0FaVyxFQVlBO0FBQ2pCQyxPQUFLLEVBQUUsVUFiVSxFQWFFO0FBQ25CQyxVQUFRLEVBQUUsbUJBZE8sRUFjYztBQUMvQkMsV0FBUyxFQUFFLGNBZk0sRUFlVTtBQUMzQkMsT0FBSyxFQUFFLFVBaEJVLEVBZ0JFO0FBQ25CQyxVQUFRLEVBQUUsVUFqQk8sRUFpQks7QUFDdEJDLHNCQUFvQixFQUFFLHVCQWxCTCxFQWtCOEI7QUFDL0NDLE9BQUssRUFBRSxVQW5CVSxFQW1CRTtBQUNuQkMsS0FBRyxFQUFFLFFBcEJZLEVBb0JGO0FBQ2ZDLFlBQVUsRUFBRSxlQXJCSyxFQXFCWTtBQUM3QkMsT0FBSyxFQUFFLFVBdEJVO0FBdUJqQkMsV0FBUyxFQUFFLHVCQXZCTSxFQXVCbUI7QUFDcENDLFlBQVUsRUFBRSx5QkF4QkssRUF3QnNCO0FBQ3ZDQyxPQUFLLEVBQUUsWUF6QlUsQ0F5Qkc7QUF6QkgsQ0FBbkI7QUEyQkFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNmQyxNQUFJLEVBQUVqQyxJQURTO0FBRWZrQyxXQUFTLEVBQUVqQyxVQUZJO0FBR2ZrQyxjQUFZLEVBQUVqQyxhQUhDO0FBSWZrQyxzQkFBb0IsRUFBRWpDLHNCQUpQO0FBS2ZrQyxZQUFVLEVBQUVoQyxVQUxHO0FBTWZQLFNBQU8sRUFBRUYsT0FOTTtBQU9mMEMsT0FBSyxFQUFFLEtBUFE7QUFRZkMsTUFBSSxFQUFFbkMsSUFSUyxFQUFqQiIsImZpbGUiOiIxOS5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBST09UXG5sZXQgVkVSU0lPTlxudHJ5IHtcbiAgUk9PVCA9IHJlcXVpcmUoJy4uLy4uL3BhY2thZ2UuanNvbicpXG4gIC8vIOi/meihjOWcqOWwj+eoi+W6j+W8leWFpWFwcC5qc+aKpemUmVxuICBWRVJTSU9OID0gYHYke1JPT1QudmVyc2lvbn1gXG59IGNhdGNoIChlKSB7XG4vLyDov5nooYzlnKjlsI/nqIvluo/lvJXlhaVhcHAuanPmiqXplJlcbiAgVkVSU0lPTiA9IGB2MS4wLjBgXG59XG5cbmNvbnN0IEhPU1QgPSAnaHR0cHM6Ly9hcGkuYm1vYmNsb3VkLmNvbSdcblxuY29uc3QgU0VDUkVUX0tFWSA9ICcnXG5jb25zdCBTRUNVUklUWV9DT0RFID0gJydcbmNvbnN0IEFQUExJQ0FUSU9OX01BU1RFUl9LRVkgPSAnJ1xuXG4vLyAxLmg1IDIu5bCP56iL5bqPIDMu5b+r5bqU55SoIDQubm9kZWpzXG5jb25zdCBUWVBFID0gM1xuXG5jb25zdCBQQVJBTUVURVJTID0ge1xuICBHRU5FUkFURUNPREU6ICcvMS93ZWNoYXRBcHAvcXIvZ2VuZXJhdGVjb2RlJywgLy8g55Sf5oiQ5LqM57u056CBXG4gIEdFVEFDQ0VTU1RPS0VOOiAnLzEvd2VjaGF0QXBwL2dldEFjY2Vzc1Rva2VuJywgLy8g6I635Y+WYWNjZXNzX3Rva2VuXG4gIFNFTkRXRUFQUE1FU1NBR0U6ICcvMS93ZWNoYXRBcHAvU2VuZFdlQXBwTWVzc2FnZScsIC8vIOWwj+eoi+W6j+aooeeJiOa2iOaBr1xuICBOT1RJRllNU0c6ICcvMS93ZWNoYXRBcHAvbm90aWZ5TXNnJywgLy8g5b6u5L+h5Li75Lq66YCa55+lXG4gIFJFRlVORDogJy8xL3BheS9yZWZ1bmQnLCAvLyDlvq7kv6HpgIDmrL5cbiAgUkVRVUVTVFNNU0NPREU6ICcvMS9yZXF1ZXN0U21zQ29kZScsIC8vIOivt+axguefreS/oemqjOivgeeggVxuICBWRVJJRllTTVNDT0RFOiAnLzEvdmVyaWZ5U21zQ29kZScsIC8vIOmqjOivgeefreS/oemqjOivgeeggVxuICBGVU5DVElPTlM6ICcvMS9mdW5jdGlvbnMnLCAvLyDkupHlh73mlbBcbiAgUkVRVUVTVFBBU1NXT1JEUkVTRVQ6ICcvMS9yZXF1ZXN0UGFzc3dvcmRSZXNldCcsIC8vIOmHjee9ruWvhueggShlbWFpbClcbiAgUkVTRVRQQVNTV09SREJZU01TQ09ERTogJy8xL3Jlc2V0UGFzc3dvcmRCeVNtc0NvZGUnLCAvLyDph43nva7lr4bnoIEo55+t5L+hKVxuICBVUERBVEVVU0VSUEFTU1dPUkQ6ICcvMS91cGRhdGVVc2VyUGFzc3dvcmQnLCAvLyDph43nva7lr4bnoIEo55m75b2V54q25oCB5LiL5pen5a+G56CB5o2i5paw5a+G56CBKVxuICBQVVNIOiAnLzEvcHVzaCcsIC8vIEFQUOaOqOmAgVxuICBGSUxFUzogJy8yL2ZpbGVzJywgLy8g5Y2V5Liq5paH5Lu25LiK5LygL+WIoOmZpFxuICBERUxGSUxFUzogJy8yL2NkbkJhdGNoRGVsZXRlJywgLy8g5om56YeP5Yig6ZmkXG4gIFRJTUVTVEFNUDogJy8xL3RpbWVzdGFtcCcsIC8vIOiOt+WPluacjeWKoeWZqOaXtumXtFxuICBMT0dJTjogJy8xL2xvZ2luJywgLy8g55m76ZmGXG4gIFJFR0lTVEVSOiAnLzEvdXNlcnMnLCAvLyDms6jlhoxcbiAgUkVRVUVTVF9FTUFJTF9WRVJJRlk6ICcvMS9yZXF1ZXN0RW1haWxWZXJpZnknLCAvLyDms6jlhoxcbiAgVVNFUlM6ICcvMS91c2VycycsIC8vIOafpeivoueUqOaIt1xuICBQQVk6ICcvMS9wYXknLCAvLyDmlK/ku5hcbiAgV0VDSEFUX0FQUDogJy8xL3dlY2hhdEFwcC8nLCAvLyDojrflj5ZvcGVuaWRcbiAgQkFUQ0g6ICcvMS9iYXRjaCcsXG4gIENIRUNLX01TRzogJy8xL3dlY2hhdEFwcC9jaGVja01zZycsIC8vIOajgOa1i+aWh+acrOWGheWuuVxuICBERUNSWVBUSU9OOiAnLzEvd2VjaGF0QXBwL2RlY3J5cHRpb24nLCAvLyDmo4DmtYvmlofmnKzlhoXlrrlcbiAgUVVFUlk6ICcvMS9jbGFzc2VzJyAvLyDmn6Xor6LmlbDmja5cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBob3N0OiBIT1NULFxuICBzZWNyZXRLZXk6IFNFQ1JFVF9LRVksXG4gIHNlY3VyaXR5Q29kZTogU0VDVVJJVFlfQ09ERSxcbiAgYXBwbGljYXRpb25NYXN0ZXJLZXk6IEFQUExJQ0FUSU9OX01BU1RFUl9LRVksXG4gIHBhcmFtZXRlcnM6IFBBUkFNRVRFUlMsXG4gIHZlcnNpb246IFZFUlNJT04sXG4gIGRlQnVnOiBmYWxzZSxcbiAgdHlwZTogVFlQRVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///19\n");

/***/ }),

/***/ 2:
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDOztBQUU1QyIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),

/***/ 20:
/*!*************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/package.json ***!
  \*************************************************************************************************/
/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, bugs, bundleDependencies, dependencies, deprecated, description, devDependencies, directories, homepage, keywords, license, main, name, repository, scripts, version, default */
/***/ (function(module) {

eval("module.exports = {\"_from\":\"hydrogen-js-sdk@^2.2.0\",\"_id\":\"hydrogen-js-sdk@2.2.0\",\"_inBundle\":false,\"_integrity\":\"sha512-PPKG3dXqKDI7dqG0QeAxVWM6qo0gJIJy3Wiy2Mon+grGuW5LAEKxV9CCUo9ugaln4HdPqxpD9EJn4N/5Eaqh4w==\",\"_location\":\"/hydrogen-js-sdk\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"range\",\"registry\":true,\"raw\":\"hydrogen-js-sdk@^2.2.0\",\"name\":\"hydrogen-js-sdk\",\"escapedName\":\"hydrogen-js-sdk\",\"rawSpec\":\"^2.2.0\",\"saveSpec\":null,\"fetchSpec\":\"^2.2.0\"},\"_requiredBy\":[\"#USER\",\"/\"],\"_resolved\":\"https://registry.npmjs.org/hydrogen-js-sdk/-/hydrogen-js-sdk-2.2.0.tgz\",\"_shasum\":\"49a8b9d2d263c1d47fb54052d7b7411eff69ad6d\",\"_spec\":\"hydrogen-js-sdk@^2.2.0\",\"_where\":\"C:\\\\Users\\\\Administrator\\\\Desktop\\\\wechat\\\\wechat\",\"author\":{\"name\":\"Bmob\"},\"bugs\":{\"url\":\"https://github.com/bmob/hydrogen-js-sdk/issues\"},\"bundleDependencies\":false,\"dependencies\":{\"babel-runtime\":\"^6.26.0\",\"node.extend\":\"^2.0.0\",\"webpack\":\"^3.12.0\"},\"deprecated\":false,\"description\":\"Bmob SDK\",\"devDependencies\":{\"babel-core\":\"^6.26.3\",\"babel-loader\":\"^7.1.5\",\"babel-plugin-transform-runtime\":\"^6.23.0\",\"babel-preset-es2015\":\"^6.24.1\",\"clean-webpack-plugin\":\"^0.1.19\",\"eslint\":\"^4.19.1\",\"eslint-config-standard\":\"^11.0.0\",\"eslint-friendly-formatter\":\"^4.0.1\",\"eslint-loader\":\"^2.0.0\",\"eslint-plugin-import\":\"^2.12.0\",\"eslint-plugin-node\":\"^6.0.1\",\"eslint-plugin-promise\":\"^3.7.0\",\"eslint-plugin-standard\":\"^3.1.0\",\"html-webpack-plugin\":\"^2.30.1\",\"uglifyjs-webpack-plugin\":\"^1.2.5\",\"webpack-dev-server\":\"^2.11.2\"},\"directories\":{\"doc\":\"docs\"},\"homepage\":\"https://github.com/bmob/hydrogen-js-sdk#readme\",\"keywords\":[\"Bmob\"],\"license\":\"ISC\",\"main\":\"./src/lib/app.js\",\"name\":\"hydrogen-js-sdk\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/bmob/hydrogen-js-sdk.git\"},\"scripts\":{\"build\":\"webpack --config config/prod.env.js\",\"dev\":\"webpack-dev-server --config config/dev.env.js\",\"test\":\"echo \\\"Error: no test specified\\\" && exit 1\",\"watch\":\"webpack --watch --config config/prod.env.js\"},\"version\":\"2.2.0\"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIyMC5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///20\n");

/***/ }),

/***/ 21:
/*!**********************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/config.dev.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // const ROOT = require('../../package.json')\n// const HOST = 'https://api.bmobcloud.com'\n// const HOST = 'http://127.0.0.1:8080'\nvar HOST = 'https://apitest.bmob.cn';\nvar APPLICATION_ID = '';\nvar APPLICATION_KEY = '';\n// const VERSION = `v${ROOT.version}`\n// 注意小程序开发时，这个地方一定记得写死\nvar VERSION = 1;\n// 1.h5 2.小程序 3.快应用\nvar TYPE = 1;\n\nvar PARAMETERS = {\n  GENERATECODE: '/1/wechatApp/qr/generatecode', // 生成二维码\n  GETACCESSTOKEN: '/1/wechatApp/getAccessToken', // 获取access_token\n  SENDWEAPPMESSAGE: '/1/wechatApp/SendWeAppMessage', // 小程序模版消息\n  NOTIFYMSG: '/1/wechatApp/notifyMsg', // 微信主人通知\n  REFUND: '/1/pay/refund', // 微信退款\n  REQUESTSMSCODE: '/1/requestSmsCode', // 请求短信验证码\n  VERIFYSMSCODE: '/1/verifySmsCode', // 验证短信验证码\n  FUNCTIONS: '/1/functions', // 云函数\n  REQUESTPASSWORDRESET: '/1/requestPasswordReset', // 重置密码(email)\n  RESETPASSWORDBYSMSCODE: '/1/resetPasswordBySmsCode', // 重置密码(短信)\n  UPDATEUSERPASSWORD: '/1/updateUserPassword', // 重置密码(登录状态下旧密码换新密码)\n  PUSH: '/1/push', // APP推送\n  FILES: '/2/files', // 单个文件上传/删除\n  DELFILES: '/2/cdnBatchDelete', // 批量删除\n  TIMESTAMP: '/1/timestamp', // 获取服务器时间\n  LOGIN: '/1/login', // 登陆\n  REGISTER: '/1/users', // 注册\n  REQUEST_EMAIL_VERIFY: '/1/requestEmailVerify', // 注册\n  USERS: '/1/users', // 查询用户\n  PAY: '/1/pay', // 支付\n  WECHAT_APP: '/1/wechatApp/', // 获取openid\n  BATCH: '/1/batch', // 获取openid\n  CHECK_MSG: '/1/wechatApp/checkMsg', // 检测文本内容\n  DECRYPTION: '/1/wechatApp/decryption', // 检测文本内容\n  QUERY: '/1/classes' // 查询数据\n};\n\nmodule.exports = {\n  host: HOST,\n  applicationId: APPLICATION_ID,\n  applicationKey: APPLICATION_KEY,\n  parameters: PARAMETERS,\n  version: VERSION,\n  deBug: false,\n  type: TYPE };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2NvbmZpZy5kZXYuanMiXSwibmFtZXMiOlsiSE9TVCIsIkFQUExJQ0FUSU9OX0lEIiwiQVBQTElDQVRJT05fS0VZIiwiVkVSU0lPTiIsIlRZUEUiLCJQQVJBTUVURVJTIiwiR0VORVJBVEVDT0RFIiwiR0VUQUNDRVNTVE9LRU4iLCJTRU5EV0VBUFBNRVNTQUdFIiwiTk9USUZZTVNHIiwiUkVGVU5EIiwiUkVRVUVTVFNNU0NPREUiLCJWRVJJRllTTVNDT0RFIiwiRlVOQ1RJT05TIiwiUkVRVUVTVFBBU1NXT1JEUkVTRVQiLCJSRVNFVFBBU1NXT1JEQllTTVNDT0RFIiwiVVBEQVRFVVNFUlBBU1NXT1JEIiwiUFVTSCIsIkZJTEVTIiwiREVMRklMRVMiLCJUSU1FU1RBTVAiLCJMT0dJTiIsIlJFR0lTVEVSIiwiUkVRVUVTVF9FTUFJTF9WRVJJRlkiLCJVU0VSUyIsIlBBWSIsIldFQ0hBVF9BUFAiLCJCQVRDSCIsIkNIRUNLX01TRyIsIkRFQ1JZUFRJT04iLCJRVUVSWSIsIm1vZHVsZSIsImV4cG9ydHMiLCJob3N0IiwiYXBwbGljYXRpb25JZCIsImFwcGxpY2F0aW9uS2V5IiwicGFyYW1ldGVycyIsInZlcnNpb24iLCJkZUJ1ZyIsInR5cGUiXSwibWFwcGluZ3MiOiJDQUFBO0FBQ0E7QUFDQTtBQUNBLElBQU1BLElBQUksR0FBRyx5QkFBYjtBQUNBLElBQU1DLGNBQWMsR0FBRyxFQUF2QjtBQUNBLElBQU1DLGVBQWUsR0FBRyxFQUF4QjtBQUNBO0FBQ0E7QUFDQSxJQUFNQyxPQUFPLEdBQUcsQ0FBaEI7QUFDQTtBQUNBLElBQU1DLElBQUksR0FBRyxDQUFiOztBQUVBLElBQU1DLFVBQVUsR0FBRztBQUNqQkMsY0FBWSxFQUFFLDhCQURHLEVBQzZCO0FBQzlDQyxnQkFBYyxFQUFFLDZCQUZDLEVBRThCO0FBQy9DQyxrQkFBZ0IsRUFBRSwrQkFIRCxFQUdrQztBQUNuREMsV0FBUyxFQUFFLHdCQUpNLEVBSW9CO0FBQ3JDQyxRQUFNLEVBQUUsZUFMUyxFQUtRO0FBQ3pCQyxnQkFBYyxFQUFFLG1CQU5DLEVBTW9CO0FBQ3JDQyxlQUFhLEVBQUUsa0JBUEUsRUFPa0I7QUFDbkNDLFdBQVMsRUFBRSxjQVJNLEVBUVU7QUFDM0JDLHNCQUFvQixFQUFFLHlCQVRMLEVBU2dDO0FBQ2pEQyx3QkFBc0IsRUFBRSwyQkFWUCxFQVVvQztBQUNyREMsb0JBQWtCLEVBQUUsdUJBWEgsRUFXNEI7QUFDN0NDLE1BQUksRUFBRSxTQVpXLEVBWUE7QUFDakJDLE9BQUssRUFBRSxVQWJVLEVBYUU7QUFDbkJDLFVBQVEsRUFBRSxtQkFkTyxFQWNjO0FBQy9CQyxXQUFTLEVBQUUsY0FmTSxFQWVVO0FBQzNCQyxPQUFLLEVBQUUsVUFoQlUsRUFnQkU7QUFDbkJDLFVBQVEsRUFBRSxVQWpCTyxFQWlCSztBQUN0QkMsc0JBQW9CLEVBQUUsdUJBbEJMLEVBa0I4QjtBQUMvQ0MsT0FBSyxFQUFFLFVBbkJVLEVBbUJFO0FBQ25CQyxLQUFHLEVBQUUsUUFwQlksRUFvQkY7QUFDZkMsWUFBVSxFQUFFLGVBckJLLEVBcUJZO0FBQzdCQyxPQUFLLEVBQUUsVUF0QlUsRUFzQkU7QUFDbkJDLFdBQVMsRUFBRSx1QkF2Qk0sRUF1Qm1CO0FBQ3BDQyxZQUFVLEVBQUUseUJBeEJLLEVBd0JzQjtBQUN2Q0MsT0FBSyxFQUFFLFlBekJVLENBeUJHO0FBekJILENBQW5COztBQTRCQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZDLE1BQUksRUFBRWpDLElBRFM7QUFFZmtDLGVBQWEsRUFBRWpDLGNBRkE7QUFHZmtDLGdCQUFjLEVBQUVqQyxlQUhEO0FBSWZrQyxZQUFVLEVBQUUvQixVQUpHO0FBS2ZnQyxTQUFPLEVBQUVsQyxPQUxNO0FBTWZtQyxPQUFLLEVBQUUsS0FOUTtBQU9mQyxNQUFJLEVBQUVuQyxJQVBTLEVBQWpCIiwiZmlsZSI6IjIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gY29uc3QgUk9PVCA9IHJlcXVpcmUoJy4uLy4uL3BhY2thZ2UuanNvbicpXG4vLyBjb25zdCBIT1NUID0gJ2h0dHBzOi8vYXBpLmJtb2JjbG91ZC5jb20nXG4vLyBjb25zdCBIT1NUID0gJ2h0dHA6Ly8xMjcuMC4wLjE6ODA4MCdcbmNvbnN0IEhPU1QgPSAnaHR0cHM6Ly9hcGl0ZXN0LmJtb2IuY24nXG5jb25zdCBBUFBMSUNBVElPTl9JRCA9ICcnXG5jb25zdCBBUFBMSUNBVElPTl9LRVkgPSAnJ1xuLy8gY29uc3QgVkVSU0lPTiA9IGB2JHtST09ULnZlcnNpb259YFxuLy8g5rOo5oSP5bCP56iL5bqP5byA5Y+R5pe277yM6L+Z5Liq5Zyw5pa55LiA5a6a6K6w5b6X5YaZ5q27XG5jb25zdCBWRVJTSU9OID0gMVxuLy8gMS5oNSAyLuWwj+eoi+W6jyAzLuW/q+W6lOeUqFxuY29uc3QgVFlQRSA9IDFcblxuY29uc3QgUEFSQU1FVEVSUyA9IHtcbiAgR0VORVJBVEVDT0RFOiAnLzEvd2VjaGF0QXBwL3FyL2dlbmVyYXRlY29kZScsIC8vIOeUn+aIkOS6jOe7tOeggVxuICBHRVRBQ0NFU1NUT0tFTjogJy8xL3dlY2hhdEFwcC9nZXRBY2Nlc3NUb2tlbicsIC8vIOiOt+WPlmFjY2Vzc190b2tlblxuICBTRU5EV0VBUFBNRVNTQUdFOiAnLzEvd2VjaGF0QXBwL1NlbmRXZUFwcE1lc3NhZ2UnLCAvLyDlsI/nqIvluo/mqKHniYjmtojmga9cbiAgTk9USUZZTVNHOiAnLzEvd2VjaGF0QXBwL25vdGlmeU1zZycsIC8vIOW+ruS/oeS4u+S6uumAmuefpVxuICBSRUZVTkQ6ICcvMS9wYXkvcmVmdW5kJywgLy8g5b6u5L+h6YCA5qy+XG4gIFJFUVVFU1RTTVNDT0RFOiAnLzEvcmVxdWVzdFNtc0NvZGUnLCAvLyDor7fmsYLnn63kv6Hpqozor4HnoIFcbiAgVkVSSUZZU01TQ09ERTogJy8xL3ZlcmlmeVNtc0NvZGUnLCAvLyDpqozor4Hnn63kv6Hpqozor4HnoIFcbiAgRlVOQ1RJT05TOiAnLzEvZnVuY3Rpb25zJywgLy8g5LqR5Ye95pWwXG4gIFJFUVVFU1RQQVNTV09SRFJFU0VUOiAnLzEvcmVxdWVzdFBhc3N3b3JkUmVzZXQnLCAvLyDph43nva7lr4bnoIEoZW1haWwpXG4gIFJFU0VUUEFTU1dPUkRCWVNNU0NPREU6ICcvMS9yZXNldFBhc3N3b3JkQnlTbXNDb2RlJywgLy8g6YeN572u5a+G56CBKOefreS/oSlcbiAgVVBEQVRFVVNFUlBBU1NXT1JEOiAnLzEvdXBkYXRlVXNlclBhc3N3b3JkJywgLy8g6YeN572u5a+G56CBKOeZu+W9leeKtuaAgeS4i+aXp+WvhueggeaNouaWsOWvhueggSlcbiAgUFVTSDogJy8xL3B1c2gnLCAvLyBBUFDmjqjpgIFcbiAgRklMRVM6ICcvMi9maWxlcycsIC8vIOWNleS4quaWh+S7tuS4iuS8oC/liKDpmaRcbiAgREVMRklMRVM6ICcvMi9jZG5CYXRjaERlbGV0ZScsIC8vIOaJuemHj+WIoOmZpFxuICBUSU1FU1RBTVA6ICcvMS90aW1lc3RhbXAnLCAvLyDojrflj5bmnI3liqHlmajml7bpl7RcbiAgTE9HSU46ICcvMS9sb2dpbicsIC8vIOeZu+mZhlxuICBSRUdJU1RFUjogJy8xL3VzZXJzJywgLy8g5rOo5YaMXG4gIFJFUVVFU1RfRU1BSUxfVkVSSUZZOiAnLzEvcmVxdWVzdEVtYWlsVmVyaWZ5JywgLy8g5rOo5YaMXG4gIFVTRVJTOiAnLzEvdXNlcnMnLCAvLyDmn6Xor6LnlKjmiLdcbiAgUEFZOiAnLzEvcGF5JywgLy8g5pSv5LuYXG4gIFdFQ0hBVF9BUFA6ICcvMS93ZWNoYXRBcHAvJywgLy8g6I635Y+Wb3BlbmlkXG4gIEJBVENIOiAnLzEvYmF0Y2gnLCAvLyDojrflj5ZvcGVuaWRcbiAgQ0hFQ0tfTVNHOiAnLzEvd2VjaGF0QXBwL2NoZWNrTXNnJywgLy8g5qOA5rWL5paH5pys5YaF5a65XG4gIERFQ1JZUFRJT046ICcvMS93ZWNoYXRBcHAvZGVjcnlwdGlvbicsIC8vIOajgOa1i+aWh+acrOWGheWuuVxuICBRVUVSWTogJy8xL2NsYXNzZXMnIC8vIOafpeivouaVsOaNrlxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaG9zdDogSE9TVCxcbiAgYXBwbGljYXRpb25JZDogQVBQTElDQVRJT05fSUQsXG4gIGFwcGxpY2F0aW9uS2V5OiBBUFBMSUNBVElPTl9LRVksXG4gIHBhcmFtZXRlcnM6IFBBUkFNRVRFUlMsXG4gIHZlcnNpb246IFZFUlNJT04sXG4gIGRlQnVnOiBmYWxzZSxcbiAgdHlwZTogVFlQRVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///21\n");

/***/ }),

/***/ 22:
/*!*******************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/pointer.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}var _require = __webpack_require__(/*! ./dataType */ 23),isString = _require.isString;\nvar Error = __webpack_require__(/*! ./error */ 24);\nvar pointer = /*#__PURE__*/function () {\n  function Pointer(tableName) {_classCallCheck(this, Pointer);\n    if (!isString(tableName)) {\n      throw new Error(415);\n    }\n    this.tableName = tableName;\n  }_createClass(Pointer, [{ key: \"set\", value: function set(\n    objectId) {\n      if (!isString(objectId)) {\n        throw new Error(415);\n      }\n      return { '__type': 'Pointer', 'className': this.tableName, 'objectId': objectId };\n    } }]);return Pointer;}();\n\n\nmodule.exports = pointer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL3BvaW50ZXIuanMiXSwibmFtZXMiOlsicmVxdWlyZSIsImlzU3RyaW5nIiwiRXJyb3IiLCJwb2ludGVyIiwidGFibGVOYW1lIiwib2JqZWN0SWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiNHFCQUFxQkEsbUJBQU8sQ0FBQyxvQkFBRCxDLENBQXBCQyxRLFlBQUFBLFE7QUFDUixJQUFNQyxLQUFLLEdBQUdGLG1CQUFPLENBQUMsaUJBQUQsQ0FBckI7QUFDQSxJQUFNRyxPQUFPO0FBQ1gsbUJBQWFDLFNBQWIsRUFBd0I7QUFDdEIsUUFBSSxDQUFDSCxRQUFRLENBQUNHLFNBQUQsQ0FBYixFQUEwQjtBQUN4QixZQUFNLElBQUlGLEtBQUosQ0FBVSxHQUFWLENBQU47QUFDRDtBQUNELFNBQUtFLFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0QsR0FOVTtBQU9OQyxZQVBNLEVBT0k7QUFDYixVQUFJLENBQUNKLFFBQVEsQ0FBQ0ksUUFBRCxDQUFiLEVBQXlCO0FBQ3ZCLGNBQU0sSUFBSUgsS0FBSixDQUFVLEdBQVYsQ0FBTjtBQUNEO0FBQ0QsYUFBTyxFQUFFLFVBQVUsU0FBWixFQUF1QixhQUFhLEtBQUtFLFNBQXpDLEVBQW9ELFlBQVlDLFFBQWhFLEVBQVA7QUFDRCxLQVpVLHVCQUFiOzs7QUFlQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCSixPQUFqQiIsImZpbGUiOiIyMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgaXNTdHJpbmcgfSA9IHJlcXVpcmUoJy4vZGF0YVR5cGUnKVxuY29uc3QgRXJyb3IgPSByZXF1aXJlKCcuL2Vycm9yJylcbmNvbnN0IHBvaW50ZXIgPSBjbGFzcyBQb2ludGVyIHtcbiAgY29uc3RydWN0b3IgKHRhYmxlTmFtZSkge1xuICAgIGlmICghaXNTdHJpbmcodGFibGVOYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKDQxNSlcbiAgICB9XG4gICAgdGhpcy50YWJsZU5hbWUgPSB0YWJsZU5hbWVcbiAgfVxuICBzZXQgKG9iamVjdElkKSB7XG4gICAgaWYgKCFpc1N0cmluZyhvYmplY3RJZCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcig0MTUpXG4gICAgfVxuICAgIHJldHVybiB7ICdfX3R5cGUnOiAnUG9pbnRlcicsICdjbGFzc05hbWUnOiB0aGlzLnRhYmxlTmFtZSwgJ29iamVjdElkJzogb2JqZWN0SWQgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcG9pbnRlclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///22\n");

/***/ }),

/***/ 23:
/*!********************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/dataType.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var isObject = function isObject(targe) {return Object.prototype.toString.call(targe) === '[object Object]';};\nvar isNumber = function isNumber(targe) {return Object.prototype.toString.call(targe) === '[object Number]';};\nvar isString = function isString(targe) {return Object.prototype.toString.call(targe) === '[object String]';};\nvar isUndefined = function isUndefined(targe) {return Object.prototype.toString.call(targe) === '[object Undefined]';};\nvar isBoolean = function isBoolean(targe) {return Object.prototype.toString.call(targe) === '[object Boolean]';};\nvar isArray = function isArray(targe) {return Object.prototype.toString.call(targe) === '[object Array]';};\nvar isFunction = function isFunction(targe) {return Object.prototype.toString.call(targe) === '[object Function]';};\n\nmodule.exports = {\n  isObject: isObject,\n  isNumber: isNumber,\n  isString: isString,\n  isUndefined: isUndefined,\n  isBoolean: isBoolean,\n  isArray: isArray,\n  isFunction: isFunction };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2RhdGFUeXBlLmpzIl0sIm5hbWVzIjpbImlzT2JqZWN0IiwidGFyZ2UiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJpc051bWJlciIsImlzU3RyaW5nIiwiaXNVbmRlZmluZWQiLCJpc0Jvb2xlYW4iLCJpc0FycmF5IiwiaXNGdW5jdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQU1BLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQUFDLEtBQUssVUFBSUMsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JKLEtBQS9CLE1BQTBDLGlCQUE5QyxFQUF0QjtBQUNBLElBQU1LLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQUFMLEtBQUssVUFBSUMsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JKLEtBQS9CLE1BQTBDLGlCQUE5QyxFQUF0QjtBQUNBLElBQU1NLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQUFOLEtBQUssVUFBSUMsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JKLEtBQS9CLE1BQTBDLGlCQUE5QyxFQUF0QjtBQUNBLElBQU1PLFdBQVcsR0FBRyxTQUFkQSxXQUFjLENBQUFQLEtBQUssVUFBSUMsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JKLEtBQS9CLE1BQTBDLG9CQUE5QyxFQUF6QjtBQUNBLElBQU1RLFNBQVMsR0FBRyxTQUFaQSxTQUFZLENBQUFSLEtBQUssVUFBSUMsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JKLEtBQS9CLE1BQTBDLGtCQUE5QyxFQUF2QjtBQUNBLElBQU1TLE9BQU8sR0FBRyxTQUFWQSxPQUFVLENBQUFULEtBQUssVUFBSUMsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JKLEtBQS9CLE1BQTBDLGdCQUE5QyxFQUFyQjtBQUNBLElBQU1VLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQUFWLEtBQUssVUFBSUMsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JKLEtBQS9CLE1BQTBDLG1CQUE5QyxFQUF4Qjs7QUFFQVcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZiLFVBQVEsRUFBUkEsUUFEZTtBQUVmTSxVQUFRLEVBQVJBLFFBRmU7QUFHZkMsVUFBUSxFQUFSQSxRQUhlO0FBSWZDLGFBQVcsRUFBWEEsV0FKZTtBQUtmQyxXQUFTLEVBQVRBLFNBTGU7QUFNZkMsU0FBTyxFQUFQQSxPQU5lO0FBT2ZDLFlBQVUsRUFBVkEsVUFQZSxFQUFqQiIsImZpbGUiOiIyMy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGlzT2JqZWN0ID0gdGFyZ2UgPT4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRhcmdlKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbmNvbnN0IGlzTnVtYmVyID0gdGFyZ2UgPT4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRhcmdlKSA9PT0gJ1tvYmplY3QgTnVtYmVyXSdcbmNvbnN0IGlzU3RyaW5nID0gdGFyZ2UgPT4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRhcmdlKSA9PT0gJ1tvYmplY3QgU3RyaW5nXSdcbmNvbnN0IGlzVW5kZWZpbmVkID0gdGFyZ2UgPT4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRhcmdlKSA9PT0gJ1tvYmplY3QgVW5kZWZpbmVkXSdcbmNvbnN0IGlzQm9vbGVhbiA9IHRhcmdlID0+IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0YXJnZSkgPT09ICdbb2JqZWN0IEJvb2xlYW5dJ1xuY29uc3QgaXNBcnJheSA9IHRhcmdlID0+IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0YXJnZSkgPT09ICdbb2JqZWN0IEFycmF5XSdcbmNvbnN0IGlzRnVuY3Rpb24gPSB0YXJnZSA9PiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodGFyZ2UpID09PSAnW29iamVjdCBGdW5jdGlvbl0nXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc09iamVjdCxcbiAgaXNOdW1iZXIsXG4gIGlzU3RyaW5nLFxuICBpc1VuZGVmaW5lZCxcbiAgaXNCb29sZWFuLFxuICBpc0FycmF5LFxuICBpc0Z1bmN0aW9uXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///23\n");

/***/ }),

/***/ 24:
/*!*****************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/error.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}var error = /*#__PURE__*/function () {\n  function error(code, msg) {_classCallCheck(this, error);\n    var _error = new Error();\n    _error.code = code;\n    _error.message = msg ? \"Bmob.Error:{code:\".concat(code, \", message:\").concat(msg, \"}\") : \"Bmob.Error:{code:\".concat(code, \", message:\").concat(this.errorMsg(code), \"}\");\n\n    return _error;\n  }_createClass(error, [{ key: \"errorMsg\", value: function errorMsg(\n    code) {\n      switch (code) {\n        case 415:\n          // 参数类型不正确\n          return 'incorrect parameter type.';\n        case 416:\n          // 参数为空\n          return 'Parameter is null.';\n        case 417:\n          // 内容为空\n          return 'There is no upload content.';\n        case 418:\n          // 内容为空\n          return 'Log in failure.';\n        case 419:\n          // 内容为空\n          return 'Bmob.GeoPoint location error.';\n        default:\n          return 'unknown error';}\n\n    } }]);return error;}();\n\n\nmodule.exports = error;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2Vycm9yLmpzIl0sIm5hbWVzIjpbImVycm9yIiwiY29kZSIsIm1zZyIsIkVycm9yIiwibWVzc2FnZSIsImVycm9yTXNnIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6ImlxQkFBTUEsSztBQUNKLGlCQUFhQyxJQUFiLEVBQW1CQyxHQUFuQixFQUF3QjtBQUN0QixRQUFJRixNQUFLLEdBQUcsSUFBSUcsS0FBSixFQUFaO0FBQ0FILFVBQUssQ0FBQ0MsSUFBTixHQUFhQSxJQUFiO0FBQ0FELFVBQUssQ0FBQ0ksT0FBTixHQUFnQkYsR0FBRyw4QkFBdUJELElBQXZCLHVCQUF3Q0MsR0FBeEMsb0NBQXFFRCxJQUFyRSx1QkFBc0YsS0FBS0ksUUFBTCxDQUFjSixJQUFkLENBQXRGLE1BQW5COztBQUVBLFdBQU9ELE1BQVA7QUFDRCxHO0FBQ1NDLFEsRUFBTTtBQUNkLGNBQVFBLElBQVI7QUFDRSxhQUFLLEdBQUw7QUFDRTtBQUNBLGlCQUFPLDJCQUFQO0FBQ0YsYUFBSyxHQUFMO0FBQ0U7QUFDQSxpQkFBTyxvQkFBUDtBQUNGLGFBQUssR0FBTDtBQUNFO0FBQ0EsaUJBQU8sNkJBQVA7QUFDRixhQUFLLEdBQUw7QUFDRTtBQUNBLGlCQUFPLGlCQUFQO0FBQ0YsYUFBSyxHQUFMO0FBQ0U7QUFDQSxpQkFBTywrQkFBUDtBQUNGO0FBQ0UsaUJBQU8sZUFBUCxDQWpCSjs7QUFtQkQsSzs7O0FBR0hLLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlAsS0FBakIiLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBlcnJvciB7XG4gIGNvbnN0cnVjdG9yIChjb2RlLCBtc2cpIHtcbiAgICBsZXQgZXJyb3IgPSBuZXcgRXJyb3IoKVxuICAgIGVycm9yLmNvZGUgPSBjb2RlXG4gICAgZXJyb3IubWVzc2FnZSA9IG1zZyA/IGBCbW9iLkVycm9yOntjb2RlOiR7Y29kZX0sIG1lc3NhZ2U6JHttc2d9fWAgOiBgQm1vYi5FcnJvcjp7Y29kZToke2NvZGV9LCBtZXNzYWdlOiR7dGhpcy5lcnJvck1zZyhjb2RlKX19YFxuXG4gICAgcmV0dXJuIGVycm9yXG4gIH1cbiAgZXJyb3JNc2cgKGNvZGUpIHtcbiAgICBzd2l0Y2ggKGNvZGUpIHtcbiAgICAgIGNhc2UgNDE1OlxuICAgICAgICAvLyDlj4LmlbDnsbvlnovkuI3mraPnoa5cbiAgICAgICAgcmV0dXJuICdpbmNvcnJlY3QgcGFyYW1ldGVyIHR5cGUuJ1xuICAgICAgY2FzZSA0MTY6XG4gICAgICAgIC8vIOWPguaVsOS4uuepulxuICAgICAgICByZXR1cm4gJ1BhcmFtZXRlciBpcyBudWxsLidcbiAgICAgIGNhc2UgNDE3OlxuICAgICAgICAvLyDlhoXlrrnkuLrnqbpcbiAgICAgICAgcmV0dXJuICdUaGVyZSBpcyBubyB1cGxvYWQgY29udGVudC4nXG4gICAgICBjYXNlIDQxODpcbiAgICAgICAgLy8g5YaF5a655Li656m6XG4gICAgICAgIHJldHVybiAnTG9nIGluIGZhaWx1cmUuJ1xuICAgICAgY2FzZSA0MTk6XG4gICAgICAgIC8vIOWGheWuueS4uuepulxuICAgICAgICByZXR1cm4gJ0Jtb2IuR2VvUG9pbnQgbG9jYXRpb24gZXJyb3IuJ1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICd1bmtub3duIGVycm9yJ1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVycm9yXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///24\n");

/***/ }),

/***/ 25:
/*!********************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/relation.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}var _require = __webpack_require__(/*! ./dataType */ 23),isString = _require.isString,isArray = _require.isArray;\nvar Error = __webpack_require__(/*! ./error */ 24);\n\nvar relation = /*#__PURE__*/function () {\n  function Relation(tableName) {_classCallCheck(this, Relation);\n    if (!isString(tableName)) {\n      throw new Error(415);\n    }\n    this.tableName = tableName;\n  }_createClass(Relation, [{ key: \"add\", value: function add(\n    parmas) {\n      return operation.call(this, parmas, 'AddRelation');\n    } }, { key: \"remove\", value: function remove(\n    parmas) {\n      return operation.call(this, parmas, 'RemoveRelation');\n    } }]);return Relation;}();\n\n\nfunction operation(parmas, op) {var _this = this;\n  if (isString(parmas)) {\n    return {\n      '__op': op,\n      'objects': [\n      {\n        '__type': 'Pointer',\n        'className': this.tableName,\n        'objectId': parmas }] };\n\n\n\n  } else if (isArray(parmas)) {\n    var data = [];\n    parmas.map(function (item) {\n      if (!isString(item)) {\n        throw new Error(415);\n      }\n      data.push({ '__type': 'Pointer', 'className': _this.tableName, 'objectId': item });\n    });\n    return { '__op': op, 'objects': data };\n  } else {\n    throw new Error(415);\n  }\n}\n\nmodule.exports = relation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL3JlbGF0aW9uLmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJpc1N0cmluZyIsImlzQXJyYXkiLCJFcnJvciIsInJlbGF0aW9uIiwidGFibGVOYW1lIiwicGFybWFzIiwib3BlcmF0aW9uIiwiY2FsbCIsIm9wIiwiZGF0YSIsIm1hcCIsIml0ZW0iLCJwdXNoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjRxQkFBOEJBLG1CQUFPLENBQUMsb0JBQUQsQyxDQUE3QkMsUSxZQUFBQSxRLENBQVVDLE8sWUFBQUEsTztBQUNsQixJQUFNQyxLQUFLLEdBQUdILG1CQUFPLENBQUMsaUJBQUQsQ0FBckI7O0FBRUEsSUFBTUksUUFBUTtBQUNaLG9CQUFhQyxTQUFiLEVBQXdCO0FBQ3RCLFFBQUksQ0FBQ0osUUFBUSxDQUFDSSxTQUFELENBQWIsRUFBMEI7QUFDeEIsWUFBTSxJQUFJRixLQUFKLENBQVUsR0FBVixDQUFOO0FBQ0Q7QUFDRCxTQUFLRSxTQUFMLEdBQWlCQSxTQUFqQjtBQUNELEdBTlc7QUFPUEMsVUFQTyxFQU9DO0FBQ1gsYUFBT0MsU0FBUyxDQUFDQyxJQUFWLENBQWUsSUFBZixFQUFxQkYsTUFBckIsRUFBNkIsYUFBN0IsQ0FBUDtBQUNELEtBVFc7QUFVSkEsVUFWSSxFQVVJO0FBQ2QsYUFBT0MsU0FBUyxDQUFDQyxJQUFWLENBQWUsSUFBZixFQUFxQkYsTUFBckIsRUFBNkIsZ0JBQTdCLENBQVA7QUFDRCxLQVpXLHdCQUFkOzs7QUFlQSxTQUFTQyxTQUFULENBQW9CRCxNQUFwQixFQUE0QkcsRUFBNUIsRUFBZ0M7QUFDOUIsTUFBSVIsUUFBUSxDQUFDSyxNQUFELENBQVosRUFBc0I7QUFDcEIsV0FBTztBQUNMLGNBQVFHLEVBREg7QUFFTCxpQkFBVztBQUNUO0FBQ0Usa0JBQVUsU0FEWjtBQUVFLHFCQUFhLEtBQUtKLFNBRnBCO0FBR0Usb0JBQVlDLE1BSGQsRUFEUyxDQUZOLEVBQVA7Ozs7QUFVRCxHQVhELE1BV08sSUFBSUosT0FBTyxDQUFDSSxNQUFELENBQVgsRUFBcUI7QUFDMUIsUUFBTUksSUFBSSxHQUFHLEVBQWI7QUFDQUosVUFBTSxDQUFDSyxHQUFQLENBQVcsVUFBQUMsSUFBSSxFQUFJO0FBQ2pCLFVBQUksQ0FBQ1gsUUFBUSxDQUFDVyxJQUFELENBQWIsRUFBcUI7QUFDbkIsY0FBTSxJQUFJVCxLQUFKLENBQVUsR0FBVixDQUFOO0FBQ0Q7QUFDRE8sVUFBSSxDQUFDRyxJQUFMLENBQVUsRUFBRSxVQUFVLFNBQVosRUFBdUIsYUFBYSxLQUFJLENBQUNSLFNBQXpDLEVBQW9ELFlBQVlPLElBQWhFLEVBQVY7QUFDRCxLQUxEO0FBTUEsV0FBTyxFQUFFLFFBQVFILEVBQVYsRUFBYyxXQUFXQyxJQUF6QixFQUFQO0FBQ0QsR0FUTSxNQVNBO0FBQ0wsVUFBTSxJQUFJUCxLQUFKLENBQVUsR0FBVixDQUFOO0FBQ0Q7QUFDRjs7QUFFRFcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCWCxRQUFqQiIsImZpbGUiOiIyNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgaXNTdHJpbmcsIGlzQXJyYXkgfSA9IHJlcXVpcmUoJy4vZGF0YVR5cGUnKVxuY29uc3QgRXJyb3IgPSByZXF1aXJlKCcuL2Vycm9yJylcblxuY29uc3QgcmVsYXRpb24gPSBjbGFzcyBSZWxhdGlvbiB7XG4gIGNvbnN0cnVjdG9yICh0YWJsZU5hbWUpIHtcbiAgICBpZiAoIWlzU3RyaW5nKHRhYmxlTmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcig0MTUpXG4gICAgfVxuICAgIHRoaXMudGFibGVOYW1lID0gdGFibGVOYW1lXG4gIH1cbiAgYWRkIChwYXJtYXMpIHtcbiAgICByZXR1cm4gb3BlcmF0aW9uLmNhbGwodGhpcywgcGFybWFzLCAnQWRkUmVsYXRpb24nKVxuICB9XG4gIHJlbW92ZSAocGFybWFzKSB7XG4gICAgcmV0dXJuIG9wZXJhdGlvbi5jYWxsKHRoaXMsIHBhcm1hcywgJ1JlbW92ZVJlbGF0aW9uJylcbiAgfVxufVxuXG5mdW5jdGlvbiBvcGVyYXRpb24gKHBhcm1hcywgb3ApIHtcbiAgaWYgKGlzU3RyaW5nKHBhcm1hcykpIHtcbiAgICByZXR1cm4ge1xuICAgICAgJ19fb3AnOiBvcCxcbiAgICAgICdvYmplY3RzJzogW1xuICAgICAgICB7XG4gICAgICAgICAgJ19fdHlwZSc6ICdQb2ludGVyJyxcbiAgICAgICAgICAnY2xhc3NOYW1lJzogdGhpcy50YWJsZU5hbWUsXG4gICAgICAgICAgJ29iamVjdElkJzogcGFybWFzXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNBcnJheShwYXJtYXMpKSB7XG4gICAgY29uc3QgZGF0YSA9IFtdXG4gICAgcGFybWFzLm1hcChpdGVtID0+IHtcbiAgICAgIGlmICghaXNTdHJpbmcoaXRlbSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKDQxNSlcbiAgICAgIH1cbiAgICAgIGRhdGEucHVzaCh7ICdfX3R5cGUnOiAnUG9pbnRlcicsICdjbGFzc05hbWUnOiB0aGlzLnRhYmxlTmFtZSwgJ29iamVjdElkJzogaXRlbSB9KVxuICAgIH0pXG4gICAgcmV0dXJuIHsgJ19fb3AnOiBvcCwgJ29iamVjdHMnOiBkYXRhIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoNDE1KVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVsYXRpb25cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///25\n");

/***/ }),

/***/ 26:
/*!*****************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/query.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}var Bmob = __webpack_require__(/*! ./bmob */ 15);\nvar request = __webpack_require__(/*! ./request */ 27);var _require =\n\n\n\n\n\n\n__webpack_require__(/*! ./dataType */ 23),isObject = _require.isObject,isString = _require.isString,isNumber = _require.isNumber,isUndefined = _require.isUndefined,isArray = _require.isArray;\nvar Error = __webpack_require__(/*! ./error */ 24);\nvar storage = __webpack_require__(/*! ./storage */ 57);\nvar query = /*#__PURE__*/function () {\n  function query(parmas) {_classCallCheck(this, query);\n    this.tableName = \"\".concat(Bmob._config.parameters.QUERY, \"/\").concat(parmas);\n    this.className = parmas;\n    this.init();\n    this.addArray = {};\n    this.setData = {};\n  }_createClass(query, [{ key: \"init\", value: function init()\n    {\n      this.queryData = {};\n      this.location = {};\n      this.andData = {};\n      this.orData = {};\n      this.stat = {};\n      this.limitNum = 100;\n      this.skipNum = 0;\n      this.includes = '';\n      this.queryReilation = {};\n      this.orders = null;\n      this.keys = null;\n    } }, { key: \"get\", value: function get(\n    ObjectId) {var _this = this;\n      if (!isString(ObjectId)) {\n        throw new Error(415);\n      }\n\n      var oneData = {};\n      var incrementData = {};\n      var unsetData = {};\n      var addArray = {};\n\n      var add = function add(key, val) {\n        if (!isString(key) || !isArray(val)) {\n          throw new Error(415);\n        }\n        addArray[key] = {\n          __op: 'Add',\n          objects: val };\n\n      };\n      var addUnique = function addUnique(key, val) {\n        if (!isString(key) || !isArray(val)) {\n          throw new Error(415);\n        }\n        addArray[key] = {\n          __op: 'AddUnique',\n          objects: val };\n\n      };\n      var remove = function remove(key, val) {\n        if (!isString(key) || !isArray(val)) {\n          throw new Error(415);\n        }\n        addArray[key] = {\n          __op: 'Remove',\n          objects: val };\n\n      };\n      var increment = function increment(key) {var val = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n        if (!isString(key) || !isNumber(val)) {\n          throw new Error(415);\n        }\n        incrementData[key] = {\n          __op: 'Increment',\n          amount: val };\n\n      };\n      var unset = function unset(key) {\n        if (!isString(ObjectId)) {\n          throw new Error(415);\n        }\n        unsetData[key] = {\n          __op: 'Delete' };\n\n      };\n      var set = function set(key, val) {\n        if (!isString(key) || isUndefined(val)) {\n          throw new Error(415);\n        }var\n        filename = val.filename,cdn = val.cdn,url = val.url;\n        if (!isUndefined(filename) && !isUndefined(cdn) && !isUndefined(url)) {\n          oneData[key] = {\n            __type: 'File',\n            group: cdn,\n            filename: filename,\n            url: url };\n\n        } else {\n          oneData[key] = val;\n        }\n      };\n      var save = function save() {\n        var saveData = Object.assign(\n        unsetData,\n        oneData,\n        incrementData,\n        addArray);\n\n        if (_this.className === '_User') {\n          return new Promise(function (resolve, reject) {\n            request(\"\".concat(_this.tableName, \"/\").concat(ObjectId), 'put', saveData).\n            then(function (results) {\n              var current = _this.current();\n              var newStorage = Object.assign(current, saveData);\n              storage.save('bmob', newStorage);\n              resolve(results);\n            }).\n            catch(function (err) {\n              reject(err);\n            });\n          });\n        }\n        return request(\"\".concat(_this.tableName, \"/\").concat(ObjectId), 'put', saveData);\n      };\n\n      var associated = {};\n      if (this.includes !== '') {\n        associated.include = this.includes;\n      }\n      return new Promise(function (resolve, reject) {\n        request(\"\".concat(_this.tableName, \"/\").concat(ObjectId), 'get', associated).\n        then(function (results) {\n          Object.defineProperty(results, 'set', { value: set });\n          Object.defineProperty(results, 'unset', { value: unset });\n          Object.defineProperty(results, 'save', { value: save });\n          Object.defineProperty(results, 'increment', { value: increment });\n          Object.defineProperty(results, 'add', { value: add });\n          Object.defineProperty(results, 'remove', { value: remove });\n          Object.defineProperty(results, 'addUnique', { value: addUnique });\n          Object.defineProperty(results, 'destroy', {\n            value: function value() {return _this.destroy(ObjectId);} });\n\n          resolve(results);\n        }).\n        catch(function (err) {\n          reject(err);\n        });\n      });\n    } }, { key: \"destroy\", value: function destroy(\n    ObjectId) {\n      if (!isString(ObjectId)) {\n        throw new Error(415);\n      }\n      return request(\"\".concat(this.tableName, \"/\").concat(ObjectId), 'delete');\n    } }, { key: \"set\", value: function set(\n    key, val) {\n      if (!isString(key) || isUndefined(val)) {\n        throw new Error(415, \"\".concat(key, \"\\u5B57\\u6BB5\\u53C2\\u6570,\\u7C7B\\u578B\\u4E0D\\u6B63\\u786E\"));\n      }var\n      filename = val.filename,cdn = val.cdn,url = val.url;\n      if (!isUndefined(filename) && !isUndefined(cdn) && !isUndefined(url)) {\n        this.setData[key] = {\n          __type: 'File',\n          group: cdn,\n          filename: filename,\n          url: url };\n\n      } else {\n        this.setData[key] = val;\n      }\n    } }, { key: \"add\", value: function add(\n    key, val) {\n      if (!isString(key) || !isArray(val)) {\n        throw new Error(415);\n      }\n      this.addArray[key] = {\n        __op: 'Add',\n        objects: val };\n\n    } }, { key: \"addUnique\", value: function addUnique(\n    key, val) {\n      if (!isString(key) || !isArray(val)) {\n        throw new Error(415);\n      }\n      this.addArray[key] = {\n        __op: 'AddUnique',\n        objects: val };\n\n    } }, { key: \"current\", value: function current()\n    {\n      if (Bmob.type !== 'hap') {\n        var data = storage.fetch('bmob');\n        return typeof data === 'object' ? data : JSON.parse(data);\n      } else {\n        // 快应用功能\n        return new Promise(function (resolve, reject) {\n          return storage.\n          fetch('bmob').\n          then(function (res) {\n            resolve(res);\n          }).\n          catch(function (err) {\n            reject(err);\n          });\n        });\n      }\n    } }, { key: \"updateStorage\", value: function updateStorage(\n    id) {var _this2 = this;\n      if (!isString(id)) {\n        throw new Error(415);\n      }\n      return new Promise(function (resolve, reject) {\n        var current = _this2.current();\n        if (!current) {\n          throw new Error(415);\n        }\n        _this2.get(id).\n        then(function (res) {\n          var newStorage = Object.assign(current, res);\n          storage.save('bmob', newStorage);\n          resolve(res);\n        }).\n        catch(function (err) {\n          console.log(__f__(err, \" at node_modules\\\\hydrogen-js-sdk\\\\src\\\\lib\\\\query.js:225\"));\n          reject(err);\n        });\n      });\n    } }, { key: \"save\", value: function save()\n\n    {var _this3 = this;var parmas = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (!isObject(parmas)) {\n        throw new Error(415);\n      }\n      var method = this.setData.id ? 'PUT' : 'POST';\n      var objectId = this.setData.id ? this.setData.id : '';\n      delete this.setData.id;\n      var saveData = Object.assign(parmas, this.setData, this.addArray);\n      return new Promise(function (resolve, reject) {\n        request(\"\".concat(_this3.tableName, \"/\").concat(objectId), method, saveData).\n        then(function (results) {\n          _this3.addArray = {};\n          _this3.setData = {};\n\n          if (_this3.className === '_User') {\n            var current = _this3.current();\n            var newStorage = Object.assign(current, saveData);\n            storage.save('bmob', newStorage);\n          }\n\n          resolve(results);\n        }).\n        catch(function (err) {\n          reject(err);\n        });\n      });\n    } }, { key: \"saveAll\", value: function saveAll(\n    items) {var _this4 = this;\n      if (!isArray(items)) {\n        throw new Error(415);\n      }\n      if (items.length < 1) {\n        throw new Error(416);\n      }\n\n      var id;\n      var p;\n      var m = 'put';\n      var key = [];\n      items.map(function (item) {\n        id = \"/\".concat(item.objectId);\n        if (id === '/undefined') {\n          id = '';\n          m = 'post';\n        }\n\n        p = {\n          method: m,\n          path: \"\".concat(_this4.tableName).concat(id),\n          body: item.setData };\n\n        key.push(p);\n        return item;\n      });\n\n      var params = {\n        requests: key };\n\n      var route = Bmob._config.parameters.BATCH;\n      // 批量操作\n      return request(route, 'POST', params);\n    } }, { key: \"withinKilometers\", value: function withinKilometers(\n\n    field, _ref) {var latitude = _ref.latitude,longitude = _ref.longitude;var km = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;\n      var newData = {};\n      newData[field] = {\n        $nearSphere: {\n          __type: 'GeoPoint',\n          latitude: latitude,\n          longitude: longitude },\n\n        $maxDistanceInKilometers: km };\n\n      this.location = newData;\n      return newData;\n    } }, { key: \"withinGeoBox\", value: function withinGeoBox(\n    field, _ref2, s) {var latitude = _ref2.latitude,longitude = _ref2.longitude;\n      var newData = {};\n      newData[field] = {\n        $within: {\n          $box: [\n          {\n            __type: 'GeoPoint',\n            latitude: latitude,\n            longitude: longitude },\n\n          {\n            __type: 'GeoPoint',\n            latitude: s.latitude,\n            longitude: s.longitude }] } };\n\n\n\n\n      this.location = newData;\n      return newData;\n    } }, { key: \"statTo\", value: function statTo(\n    key, val) {\n      if (!isString(key)) {\n        throw new Error(415);\n      }\n      this.stat[key] = val;\n      return this.stat;\n    } }, { key: \"equalTo\", value: function equalTo(\n    key, operator, val) {\n      if (!isString(key)) {\n        throw new Error(415);\n      }\n      var judge = function judge(key, operator, val) {\n        var data = {};\n        var value = null;\n        if (key === 'createdAt' || key === 'updateAt') {\n          value = {\n            __type: 'Date',\n            iso: val };\n\n        } else {\n          value = val;\n        }\n        switch (operator) {\n          case '==':\n            data[key] = value;\n            break;\n          case '===':\n            data[key] = value;\n            break;\n          case '!=':\n            data[key] = {\n              $ne: value };\n\n            break;\n          case '<':\n            data[key] = {\n              $lt: value };\n\n            break;\n          case '<=':\n            data[key] = {\n              $lte: value };\n\n            break;\n          case '>':\n            data[key] = {\n              $gt: value };\n\n            break;\n          case '>=':\n            data[key] = {\n              $gte: value };\n\n            break;\n          default:\n            throw new Error(415);}\n\n        return data;\n      };\n      var newData = judge(key, operator, val);\n      if (Object.keys(this.queryData).length) {\n        if (!isUndefined(this.queryData.$and)) {\n          this.queryData.$and.push(newData);\n        } else {\n          this.queryData = {\n            $and: [this.queryData, newData] };\n\n        }\n      } else {\n        this.queryData = newData;\n      }\n\n      return newData;\n    } }, { key: \"containedIn\", value: function containedIn(\n    key, val) {\n      if (!isString(key) || !isArray(val)) {\n        throw new Error(415);\n      }\n      return queryData.call(this, key, '$in', val);\n    } }, { key: \"notContainedIn\", value: function notContainedIn(\n    key, val) {\n      if (!isString(key) || !isArray(val)) {\n        throw new Error(415);\n      }\n      return queryData.call(this, key, '$nin', val);\n    } }, { key: \"exists\", value: function exists(\n    key) {\n      if (!isString(key)) {\n        throw new Error(415);\n      }\n      return queryData.call(this, key, '$exists', true);\n    } }, { key: \"doesNotExist\", value: function doesNotExist(\n    key) {\n      if (!isString(key)) {\n        throw new Error(415);\n      }\n      return queryData.call(this, key, '$exists', false);\n    } }, { key: \"or\", value: function or()\n    {for (var _len = arguments.length, querys = new Array(_len), _key = 0; _key < _len; _key++) {querys[_key] = arguments[_key];}\n      querys.map(function (item, i) {\n        if (!isObject(item)) {\n          throw new Error(415);\n        }\n      });\n      var queryData = this.queryData.$and;\n      if (!isUndefined(queryData)) {\n        for (var i = 0; i < queryData.length; i++) {\n          for (var k = 0; k < querys.length; k++) {\n            if (JSON.stringify(queryData[i]) === JSON.stringify(querys[k])) {\n              this.queryData.$and.splice(i, 1);\n            }\n          }\n        }\n        if (!queryData.length) {\n          delete this.queryData.$and;\n        }\n      }\n      this.orData = {\n        $or: querys };\n\n    } }, { key: \"and\", value: function and()\n    {for (var _len2 = arguments.length, querys = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {querys[_key2] = arguments[_key2];}\n      querys.map(function (item, i) {\n        if (!isObject(item)) {\n          throw new Error(415);\n        }\n      });\n      this.andData = {\n        $and: querys };\n\n    } }, { key: \"limit\", value: function limit(\n    parmas) {\n      if (!isNumber(parmas)) {\n        throw new Error(415);\n      }\n      if (parmas > 1000) {\n        parmas = 1000;\n      }\n      this.limitNum = parmas;\n    } }, { key: \"skip\", value: function skip(\n    parmas) {\n      if (!isNumber(parmas)) {\n        throw new Error(415);\n      }\n      this.skipNum = parmas;\n    } }, { key: \"order\", value: function order()\n    {for (var _len3 = arguments.length, key = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {key[_key3] = arguments[_key3];}\n      key.map(function (item) {\n        if (!isString(item)) {\n          throw new Error(415);\n        }\n      });\n      this.orders = key.join(',');\n    } }, { key: \"include\", value: function include()\n    {for (var _len4 = arguments.length, key = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {key[_key4] = arguments[_key4];}\n      key.map(function (item) {\n        if (!isString(item)) {\n          throw new Error(415);\n        }\n      });\n      this.includes = key.join(',');\n    } }, { key: \"select\", value: function select()\n    {for (var _len5 = arguments.length, key = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {key[_key5] = arguments[_key5];}\n      key.map(function (item) {\n        if (!isString(item)) {\n          throw new Error(415);\n        }\n      });\n      this.keys = key.join(',');\n    } }, { key: \"field\", value: function field(\n    key, objectId) {\n      if (!isString(key) || !isString(objectId)) {\n        throw new Error(415);\n      }\n      this.queryReilation.where = {\n        $relatedTo: {\n          object: {\n            __type: 'Pointer',\n            className: this.className,\n            objectId: objectId },\n\n          key: key } };\n\n\n    } }, { key: \"relation\", value: function relation(\n    tableName) {\n      if (!isString(tableName)) {\n        throw new Error(415);\n      }\n      if (tableName === '_User') {\n        tableName = 'users';\n      } else {\n        tableName = \"classes/\".concat(tableName);\n      }\n      this.queryReilation.count = 1;\n      var parmas = Object.assign(this.getParams(), this.queryReilation);\n\n      return new Promise(function (resolve, reject) {\n        request(\"/1/\".concat(tableName), 'get', parmas).\n        then(function (res) {\n          resolve(res);\n        }).\n        catch(function (err) {\n          reject(err);\n        });\n      });\n    } }, { key: \"getParams\", value: function getParams()\n    {\n      var parmas = {};\n      if (Object.keys(this.queryData).length) {\n        parmas.where = this.queryData;\n      }\n      if (Object.keys(this.location).length) {\n        parmas.where = Object.assign(this.location, this.queryData);\n      }\n      if (Object.keys(this.andData).length) {\n        parmas.where = Object.assign(this.andData, this.queryData);\n      }\n      if (Object.keys(this.orData).length) {\n        parmas.where = Object.assign(this.orData, this.queryData);\n      }\n      parmas.limit = this.limitNum;\n      parmas.skip = this.skipNum;\n      parmas.include = this.includes;\n      parmas.order = this.orders;\n      parmas.keys = this.keys;\n      if (Object.keys(this.stat).length) {\n        parmas = Object.assign(parmas, this.stat);\n      }\n      for (var key in parmas) {\n        if (\n        parmas.hasOwnProperty(key) && parmas[key] === null ||\n        parmas[key] === 0 || parmas[key] === '')\n        {\n          delete parmas[key];\n        }\n      }\n      return parmas;\n    } }, { key: \"find\", value: function find()\n    {var _this5 = this;\n      var oneData = {};\n      var items = {};\n      var parmas = this.getParams();\n      var set = function set(key, val) {\n        if (!key || isUndefined(val)) {\n          throw new Error(415);\n        }\n        oneData[key] = val;\n      };\n\n      var batch = function batch() {var method = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'updata';\n        console.log(__f__(method, \" at node_modules\\\\hydrogen-js-sdk\\\\src\\\\lib\\\\query.js:579\"));\n        if (items.length < 1) {\n          throw new Error(416);\n        }\n\n        var id;\n        var p;\n        var m = 'put';\n        var key = [];\n        items.map(function (item) {\n          id = \"/\".concat(item.objectId);\n          if (id === '/undefined') {\n            id = '';\n            m = 'post';\n          }\n\n          p = {\n            method: m,\n            path: \"\".concat(_this5.tableName).concat(id),\n            body: oneData };\n\n          if (method === 'delete') {\n            p = {\n              method: 'DELETE',\n              path: \"\".concat(_this5.tableName).concat(id) };\n\n          }\n          key.push(p);\n          return item;\n        });\n\n        var params = {\n          requests: key\n\n          // 批量操作\n        };var route = Bmob._config.parameters.BATCH;\n        return request(route, 'POST', params);\n      };\n      return new Promise(function (resolve, reject) {\n        request(\"\".concat(_this5.tableName), 'get', parmas).\n        then(function (res) {\n          var results = res.results;\n          if (parmas.hasOwnProperty('count')) {\n            results = res;\n          }\n          _this5.init();\n          Object.defineProperty(results, 'set', { value: set });\n          Object.defineProperty(results, 'saveAll', {\n            value: function value() {\n              return batch();\n            } });\n\n          Object.defineProperty(results, 'destroyAll', {\n            value: function value() {\n              return batch('delete');\n            } });\n\n          items = results;\n          resolve(results);\n        }).\n        catch(function (err) {\n          reject(err);\n        });\n      });\n    } }, { key: \"count\", value: function count()\n    {var _this6 = this;var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var parmas = {};\n      if (Object.keys(this.queryData).length) {\n        parmas.where = this.queryData;\n      }\n      if (Object.keys(this.andData).length) {\n        parmas.where = Object.assign(this.andData, this.queryData);\n      }\n      if (Object.keys(this.orData).length) {\n        parmas.where = Object.assign(this.orData, this.queryData);\n      }\n      parmas.count = 1;\n      parmas.limit = limit;\n      return new Promise(function (resolve, reject) {\n        request(\"\".concat(_this6.tableName), 'get', parmas).\n        then(function (_ref3) {var count = _ref3.count;\n          resolve(count);\n        }).\n        catch(function (err) {\n          reject(err);\n        });\n      });\n    } }]);return query;}();\n\n\nfunction queryData(key, operator, val) {\n  var parent = {};\n  var child = {};\n  child[operator] = val;\n  parent[key] = child;\n  var newData = parent;\n  if (Object.keys(this.queryData).length) {\n    if (!isUndefined(this.queryData.$and)) {\n      this.queryData.$and.push(newData);\n    } else {\n      this.queryData = {\n        $and: [this.queryData, newData] };\n\n    }\n  } else {\n    this.queryData = newData;\n  }\n  return newData;\n}\n\nmodule.exports = query;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///26\n");

/***/ }),

/***/ 27:
/*!*******************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/request.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // const Bmob = require('./bmob')\nvar utils = __webpack_require__(/*! ./utils */ 16);\n\nvar request;\n// 获取当前应用类型\nvar type = utils.getAppType();\n// h5\nif (type === 'h5') {\n  request = __webpack_require__(/*! ./axiosRequest */ 28);\n} else if (type === 'wx') {\n  // 小程序\n  request = __webpack_require__(/*! ./wxRequest */ 55);\n} else if (type === 'hap') {\n  // 快应用功能\n  request = __webpack_require__(/*! ./hapRequest */ 56);\n} else if (type === 'nodejs') {\n  // 快应用功能\n  request = __webpack_require__(/*! ./axiosRequest */ 28);\n}\n\nmodule.exports = request;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL3JlcXVlc3QuanMiXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwicmVxdWVzdCIsInR5cGUiLCJnZXRBcHBUeXBlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkNBQUE7QUFDQSxJQUFNQSxLQUFLLEdBQUdDLG1CQUFPLENBQUMsaUJBQUQsQ0FBckI7O0FBRUEsSUFBSUMsT0FBSjtBQUNBO0FBQ0EsSUFBTUMsSUFBSSxHQUFHSCxLQUFLLENBQUNJLFVBQU4sRUFBYjtBQUNBO0FBQ0EsSUFBSUQsSUFBSSxLQUFLLElBQWIsRUFBbUI7QUFDakJELFNBQU8sR0FBR0QsbUJBQU8sQ0FBQyx3QkFBRCxDQUFqQjtBQUNELENBRkQsTUFFTyxJQUFJRSxJQUFJLEtBQUssSUFBYixFQUFtQjtBQUN4QjtBQUNBRCxTQUFPLEdBQUdELG1CQUFPLENBQUMscUJBQUQsQ0FBakI7QUFDRCxDQUhNLE1BR0EsSUFBSUUsSUFBSSxLQUFLLEtBQWIsRUFBb0I7QUFDekI7QUFDQUQsU0FBTyxHQUFHRCxtQkFBTyxDQUFDLHNCQUFELENBQWpCO0FBQ0QsQ0FITSxNQUdBLElBQUlFLElBQUksS0FBSyxRQUFiLEVBQXVCO0FBQzVCO0FBQ0FELFNBQU8sR0FBR0QsbUJBQU8sQ0FBQyx3QkFBRCxDQUFqQjtBQUNEOztBQUVESSxNQUFNLENBQUNDLE9BQVAsR0FBaUJKLE9BQWpCIiwiZmlsZSI6IjI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gY29uc3QgQm1vYiA9IHJlcXVpcmUoJy4vYm1vYicpXG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKVxuXG5sZXQgcmVxdWVzdFxuLy8g6I635Y+W5b2T5YmN5bqU55So57G75Z6LXG5jb25zdCB0eXBlID0gdXRpbHMuZ2V0QXBwVHlwZSgpXG4vLyBoNVxuaWYgKHR5cGUgPT09ICdoNScpIHtcbiAgcmVxdWVzdCA9IHJlcXVpcmUoJy4vYXhpb3NSZXF1ZXN0Jylcbn0gZWxzZSBpZiAodHlwZSA9PT0gJ3d4Jykge1xuICAvLyDlsI/nqIvluo9cbiAgcmVxdWVzdCA9IHJlcXVpcmUoJy4vd3hSZXF1ZXN0Jylcbn0gZWxzZSBpZiAodHlwZSA9PT0gJ2hhcCcpIHtcbiAgLy8g5b+r5bqU55So5Yqf6IO9XG4gIHJlcXVlc3QgPSByZXF1aXJlKCcuL2hhcFJlcXVlc3QnKVxufSBlbHNlIGlmICh0eXBlID09PSAnbm9kZWpzJykge1xuICAvLyDlv6vlupTnlKjlip/og71cbiAgcmVxdWVzdCA9IHJlcXVpcmUoJy4vYXhpb3NSZXF1ZXN0Jylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1ZXN0XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///27\n");

/***/ }),

/***/ 28:
/*!************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/axiosRequest.js ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) { /* eslint-disable */\nvar axios = __webpack_require__(/*! ./axios/lib/axios */ 29);\nvar Bmob = __webpack_require__(/*! ./bmob */ 15);\nvar md5 = __webpack_require__(/*! ./md5 */ 54);\n\nvar setHeader = function setHeader(config, route) {\n  var type = 'wechatApp';\n  if (Bmob.type === 'nodejs') {\n    type = 'cloudcode';\n  }\n  var t = Math.round(new Date().getTime() / 1000);\n\n  var rand = Bmob.utils.randomString();\n  var sign = md5.hexMD5(route + t + config.securityCode + rand);\n  var header = {\n    'content-type': 'application/json',\n    'X-Bmob-SDK-Type': type,\n    'X-Bmob-Safe-Sign': sign,\n    'X-Bmob-Safe-Timestamp': t,\n    'X-Bmob-Noncestr-Key': rand,\n    'X-Bmob-Secret-Key': config.secretKey };\n\n  if (config.applicationMasterKey) {\n    header['X-Bmob-Master-Key'] = config.applicationMasterKey;\n  }\n\n  return header;\n};\n\nvar request = function request(route) {var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'get';var parma = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return new Promise(function (resolve, reject) {\n    if (undefined === Bmob.User) {\n      Bmob = __webpack_require__(/*! ./bmob */ 15);\n    }\n\n    var header = setHeader(Bmob._config, route);\n\n    var current = Bmob.User.current();\n    if (current) {\n      header['X-Bmob-Session-Token'] = current.sessionToken;\n    }\n    var server = axios.create({\n      baseURL: Bmob._config.host,\n      headers: header,\n      validateStatus: function validateStatus(status) {\n        return status < 500; // 状态码在大于或等于500时才会 reject\n      } });\n\n    var serverData = {\n      url: route,\n      method: method };\n\n    if (serverData.method === 'get') {\n      serverData.params = parma;\n    } else {\n      serverData.data = parma;\n    }\n    if (Bmob._config.deBug === true) {\n      console.log(__f__('host:', Bmob._config.host, \" at node_modules\\\\hydrogen-js-sdk\\\\src\\\\lib\\\\axiosRequest.js:59\"));\n      console.log(__f__('parma:', parma, \" at node_modules\\\\hydrogen-js-sdk\\\\src\\\\lib\\\\axiosRequest.js:60\"));\n    }\n    server(serverData).then(function (_ref) {var data = _ref.data;\n      if (data.code && data.error || data.error) {\n        reject(data);\n      }\n      resolve(data);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n};\n\nmodule.exports = request;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2F4aW9zUmVxdWVzdC5qcyJdLCJuYW1lcyI6WyJheGlvcyIsInJlcXVpcmUiLCJCbW9iIiwibWQ1Iiwic2V0SGVhZGVyIiwiY29uZmlnIiwicm91dGUiLCJ0eXBlIiwidCIsIk1hdGgiLCJyb3VuZCIsIkRhdGUiLCJnZXRUaW1lIiwicmFuZCIsInV0aWxzIiwicmFuZG9tU3RyaW5nIiwic2lnbiIsImhleE1ENSIsInNlY3VyaXR5Q29kZSIsImhlYWRlciIsInNlY3JldEtleSIsImFwcGxpY2F0aW9uTWFzdGVyS2V5IiwicmVxdWVzdCIsIm1ldGhvZCIsInBhcm1hIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJ1bmRlZmluZWQiLCJVc2VyIiwiX2NvbmZpZyIsImN1cnJlbnQiLCJzZXNzaW9uVG9rZW4iLCJzZXJ2ZXIiLCJjcmVhdGUiLCJiYXNlVVJMIiwiaG9zdCIsImhlYWRlcnMiLCJ2YWxpZGF0ZVN0YXR1cyIsInN0YXR1cyIsInNlcnZlckRhdGEiLCJ1cmwiLCJwYXJhbXMiLCJkYXRhIiwiZGVCdWciLCJjb25zb2xlIiwibG9nIiwidGhlbiIsImNvZGUiLCJlcnJvciIsImNhdGNoIiwiZXJyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjhDQUFBO0FBQ0EsSUFBTUEsS0FBSyxHQUFHQyxtQkFBTyxDQUFDLDJCQUFELENBQXJCO0FBQ0EsSUFBSUMsSUFBSSxHQUFHRCxtQkFBTyxDQUFDLGdCQUFELENBQWxCO0FBQ0EsSUFBSUUsR0FBRyxHQUFHRixtQkFBTyxDQUFDLGVBQUQsQ0FBakI7O0FBRUEsSUFBTUcsU0FBUyxHQUFHLFNBQVpBLFNBQVksQ0FBQ0MsTUFBRCxFQUFRQyxLQUFSLEVBQWtCO0FBQ2xDLE1BQUlDLElBQUksR0FBRyxXQUFYO0FBQ0EsTUFBSUwsSUFBSSxDQUFDSyxJQUFMLEtBQWMsUUFBbEIsRUFBNEI7QUFDMUJBLFFBQUks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QUFELENBQVA7QUFDRCxLQUxELEVBS0dPLEtBTEgsQ0FLUyxVQUFBQyxHQUFHLEVBQUk7QUFDZHhCLFlBQU0sQ0FBQ3dCLEdBQUQsQ0FBTjtBQUNELEtBUEQ7QUFRRCxHQXZDTSxDQUFQO0FBd0NELENBekNEOztBQTJDQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCL0IsT0FBakIsQyIsImZpbGUiOiIyOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlICovXG5jb25zdCBheGlvcyA9IHJlcXVpcmUoJy4vYXhpb3MvbGliL2F4aW9zJylcbmxldCBCbW9iID0gcmVxdWlyZSgnLi9ibW9iJylcbmxldCBtZDUgPSByZXF1aXJlKCcuL21kNScpXG5cbmNvbnN0IHNldEhlYWRlciA9IChjb25maWcscm91dGUpID0+IHtcbiAgbGV0IHR5cGUgPSAnd2VjaGF0QXBwJ1xuICBpZiAoQm1vYi50eXBlID09PSAnbm9kZWpzJykge1xuICAgIHR5cGUgPSAnY2xvdWRjb2RlJ1xuICB9XG4gIGNvbnN0IHQ9TWF0aC5yb3VuZChuZXcgRGF0ZSgpLmdldFRpbWUoKS8xMDAwKTtcbiAgXG4gIGNvbnN0IHJhbmQgPSAgQm1vYi51dGlscy5yYW5kb21TdHJpbmcoKVxuICBjb25zdCBzaWduID1tZDUuaGV4TUQ1KHJvdXRlK3QrY29uZmlnLnNlY3VyaXR5Q29kZStyYW5kKVxuICBsZXQgaGVhZGVyID0ge1xuICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgJ1gtQm1vYi1TREstVHlwZSc6IHR5cGUsXG4gICAgJ1gtQm1vYi1TYWZlLVNpZ24nOnNpZ24sXG4gICAgJ1gtQm1vYi1TYWZlLVRpbWVzdGFtcCc6IHQsXG4gICAgJ1gtQm1vYi1Ob25jZXN0ci1LZXknOiByYW5kLFxuICAgICdYLUJtb2ItU2VjcmV0LUtleSc6IGNvbmZpZy5zZWNyZXRLZXlcbiAgfVxuICBpZiAoY29uZmlnLmFwcGxpY2F0aW9uTWFzdGVyS2V5KSB7XG4gICAgaGVhZGVyWydYLUJtb2ItTWFzdGVyLUtleSddID0gY29uZmlnLmFwcGxpY2F0aW9uTWFzdGVyS2V5XG4gIH1cblxuICByZXR1cm4gaGVhZGVyXG59XG5cbmNvbnN0IHJlcXVlc3QgPSAocm91dGUsIG1ldGhvZCA9ICdnZXQnLCBwYXJtYSA9IHt9KSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgaWYgKHVuZGVmaW5lZCA9PT0gQm1vYi5Vc2VyKSB7XG4gICAgICBCbW9iID0gcmVxdWlyZSgnLi9ibW9iJylcbiAgICB9XG5cbiAgICBjb25zdCBoZWFkZXIgPSBzZXRIZWFkZXIoQm1vYi5fY29uZmlnLHJvdXRlKVxuXG4gICAgdmFyIGN1cnJlbnQgPSBCbW9iLlVzZXIuY3VycmVudCgpXG4gICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgIGhlYWRlclsnWC1CbW9iLVNlc3Npb24tVG9rZW4nXSA9IGN1cnJlbnQuc2Vzc2lvblRva2VuXG4gICAgfVxuICAgIGNvbnN0IHNlcnZlciA9IGF4aW9zLmNyZWF0ZSh7XG4gICAgICBiYXNlVVJMOiBCbW9iLl9jb25maWcuaG9zdCxcbiAgICAgIGhlYWRlcnM6IGhlYWRlcixcbiAgICAgIHZhbGlkYXRlU3RhdHVzOiAoc3RhdHVzKSA9PiB7XG4gICAgICAgIHJldHVybiBzdGF0dXMgPCA1MDAgLy8g54q25oCB56CB5Zyo5aSn5LqO5oiW562J5LqONTAw5pe25omN5LyaIHJlamVjdFxuICAgICAgfVxuICAgIH0pXG4gICAgY29uc3Qgc2VydmVyRGF0YSA9IHtcbiAgICAgIHVybDogcm91dGUsXG4gICAgICBtZXRob2Q6IG1ldGhvZFxuICAgIH1cbiAgICBpZiAoc2VydmVyRGF0YS5tZXRob2QgPT09ICdnZXQnKSB7XG4gICAgICBzZXJ2ZXJEYXRhLnBhcmFtcyA9IHBhcm1hXG4gICAgfSBlbHNlIHtcbiAgICAgIHNlcnZlckRhdGEuZGF0YSA9IHBhcm1hXG4gICAgfVxuICAgIGlmKEJtb2IuX2NvbmZpZy5kZUJ1Zz09PXRydWUpe1xuICAgICAgY29uc29sZS5sb2coJ2hvc3Q6JyxCbW9iLl9jb25maWcuaG9zdClcbiAgICAgIGNvbnNvbGUubG9nKCdwYXJtYTonLHBhcm1hKVxuICAgIH1cbiAgICBzZXJ2ZXIoc2VydmVyRGF0YSkudGhlbigoeyBkYXRhIH0pID0+IHtcbiAgICAgIGlmICgoZGF0YS5jb2RlICYmIGRhdGEuZXJyb3IpIHx8IGRhdGEuZXJyb3IpIHtcbiAgICAgICAgcmVqZWN0KGRhdGEpXG4gICAgICB9XG4gICAgICByZXNvbHZlKGRhdGEpXG4gICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgIHJlamVjdChlcnIpXG4gICAgfSlcbiAgfSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1ZXN0XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///28\n");

/***/ }),

/***/ 29:
/*!***************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/axios/lib/axios.js ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./utils */ 30);\nvar bind = __webpack_require__(/*! ./helpers/bind */ 31);\nvar Axios = __webpack_require__(/*! ./core/Axios */ 33);\nvar defaults = __webpack_require__(/*! ./defaults */ 34);\n\n/**\n                                       * Create an instance of Axios\n                                       *\n                                       * @param {Object} defaultConfig The default config for the instance\n                                       * @return {Axios} A new instance of Axios\n                                       */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Factory for creating new instances\naxios.create = function create(instanceConfig) {\n  return createInstance(utils.merge(defaults, instanceConfig));\n};\n\n// Expose Cancel & CancelToken\naxios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ 51);\naxios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ 52);\naxios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ 48);\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = __webpack_require__(/*! ./helpers/spread */ 53);\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2F4aW9zL2xpYi9heGlvcy5qcyJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJiaW5kIiwiQXhpb3MiLCJkZWZhdWx0cyIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImNvbnRleHQiLCJpbnN0YW5jZSIsInByb3RvdHlwZSIsInJlcXVlc3QiLCJleHRlbmQiLCJheGlvcyIsImNyZWF0ZSIsImluc3RhbmNlQ29uZmlnIiwibWVyZ2UiLCJDYW5jZWwiLCJDYW5jZWxUb2tlbiIsImlzQ2FuY2VsIiwiYWxsIiwicHJvbWlzZXMiLCJQcm9taXNlIiwic3ByZWFkIiwibW9kdWxlIiwiZXhwb3J0cyIsImRlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLEtBQUssR0FBR0MsbUJBQU8sQ0FBQyxpQkFBRCxDQUFuQjtBQUNBLElBQUlDLElBQUksR0FBR0QsbUJBQU8sQ0FBQyx3QkFBRCxDQUFsQjtBQUNBLElBQUlFLEtBQUssR0FBR0YsbUJBQU8sQ0FBQyxzQkFBRCxDQUFuQjtBQUNBLElBQUlHLFFBQVEsR0FBR0gsbUJBQU8sQ0FBQyxvQkFBRCxDQUF0Qjs7QUFFQTs7Ozs7O0FBTUEsU0FBU0ksY0FBVCxDQUF3QkMsYUFBeEIsRUFBdUM7QUFDckMsTUFBSUMsT0FBTyxHQUFHLElBQUlKLEtBQUosQ0FBVUcsYUFBVixDQUFkO0FBQ0EsTUFBSUUsUUFBUSxHQUFHTixJQUFJLENBQUNDLEtBQUssQ0FBQ00sU0FBTixDQUFnQkMsT0FBakIsRUFBMEJILE9BQTFCLENBQW5COztBQUVBO0FBQ0FQLE9BQUssQ0FBQ1csTUFBTixDQUFhSCxRQUFiLEVBQXVCTCxLQUFLLENBQUNNLFNBQTdCLEVBQXdDRixPQUF4Qzs7QUFFQTtBQUNBUCxPQUFLLENBQUNXLE1BQU4sQ0FBYUgsUUFBYixFQUF1QkQsT0FBdkI7O0FBRUEsU0FBT0MsUUFBUDtBQUNEOztBQUVEO0FBQ0EsSUFBSUksS0FBSyxHQUFHUCxjQUFjLENBQUNELFFBQUQsQ0FBMUI7O0FBRUE7QUFDQVEsS0FBSyxDQUFDVCxLQUFOLEdBQWNBLEtBQWQ7O0FBRUE7QUFDQVMsS0FBSyxDQUFDQyxNQUFOLEdBQWUsU0FBU0EsTUFBVCxDQUFnQkMsY0FBaEIsRUFBZ0M7QUFDN0MsU0FBT1QsY0FBYyxDQUFDTCxLQUFLLENBQUNlLEtBQU4sQ0FBWVgsUUFBWixFQUFzQlUsY0FBdEIsQ0FBRCxDQUFyQjtBQUNELENBRkQ7O0FBSUE7QUFDQUYsS0FBSyxDQUFDSSxNQUFOLEdBQWVmLG1CQUFPLENBQUMseUJBQUQsQ0FBdEI7QUFDQVcsS0FBSyxDQUFDSyxXQUFOLEdBQW9CaEIsbUJBQU8sQ0FBQyw4QkFBRCxDQUEzQjtBQUNBVyxLQUFLLENBQUNNLFFBQU4sR0FBaUJqQixtQkFBTyxDQUFDLDJCQUFELENBQXhCOztBQUVBO0FBQ0FXLEtBQUssQ0FBQ08sR0FBTixHQUFZLFNBQVNBLEdBQVQsQ0FBYUMsUUFBYixFQUF1QjtBQUNqQyxTQUFPQyxPQUFPLENBQUNGLEdBQVIsQ0FBWUMsUUFBWixDQUFQO0FBQ0QsQ0FGRDtBQUdBUixLQUFLLENBQUNVLE1BQU4sR0FBZXJCLG1CQUFPLENBQUMsMEJBQUQsQ0FBdEI7O0FBRUFzQixNQUFNLENBQUNDLE9BQVAsR0FBaUJaLEtBQWpCOztBQUVBO0FBQ0FXLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlQyxPQUFmLEdBQXlCYixLQUF6QiIsImZpbGUiOiIyOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKHV0aWxzLm1lcmdlKGRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///29\n");

/***/ }),

/***/ 3:
/*!******************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * Vue.js v2.6.10\n * (c) 2014-2019 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// These helpers produce better VM code in JS engines due to their\n// explicitness and function inlining.\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive.\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value, e.g., [object Object].\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\nfunction isPromise (val) {\n  return (\n    isDef(val) &&\n    typeof val.then === 'function' &&\n    typeof val.catch === 'function'\n  )\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert an input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if an attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array.\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether an object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it,\n * e.g., PhantomJS 1.x. Technically, we don't need this anymore\n * since native bind is now performant enough in most browsers.\n * But removing it would mean breaking code that was able to run in\n * PhantomJS 1.x, so this must be kept for backward compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/* eslint-disable no-unused-vars */\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Return the same value.\n */\nvar identity = function (_) { return _; };\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime()\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\n/**\n * Return the first index at which a loosely equal value can be\n * found in the array (if value is a plain object, the array must\n * contain an object of the same shape), or -1 if it is not present.\n */\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured',\n  'serverPrefetch'\n];\n\n/*  */\n\n\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"development\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"development\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Perform updates asynchronously. Intended to be used by Vue Test Utils\n   * This will significantly reduce performance if set to false.\n   */\n  async: true,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * unicode letters used for parsing html tags, component names and property paths.\n * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\n * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\n */\nvar unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = new RegExp((\"[^\" + (unicodeRegExp.source) + \".$_\\\\d]\"));\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\nvar isPhantomJS = UA && /phantomjs/.test(UA);\nvar isFF = UA && UA.match(/firefox\\/(\\d+)/);\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = /*@__PURE__*/(function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (true) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    {\n      if(vm.$scope && vm.$scope.is){\n        return vm.$scope.is\n      }\n    }\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm;\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.SharedObject.target) {\n    Dep.SharedObject.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  if ( true && !config.async) {\n    // subs aren't sorted in scheduler if not running async\n    // we need to sort them now to make sure they fire in correct\n    // order\n    subs.sort(function (a, b) { return a.id - b.id; });\n  }\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// The current target watcher being evaluated.\n// This is globally unique because only one watcher\n// can be evaluated at a time.\n// fixed by xxxxxx (nvue shared vuex)\n/* eslint-disable no-undef */\nDep.SharedObject = typeof SharedObject !== 'undefined' ? SharedObject : {};\nDep.SharedObject.target = null;\nDep.SharedObject.targetStack = [];\n\nfunction pushTarget (target) {\n  Dep.SharedObject.targetStack.push(target);\n  Dep.SharedObject.target = target;\n}\n\nfunction popTarget () {\n  Dep.SharedObject.targetStack.pop();\n  Dep.SharedObject.target = Dep.SharedObject.targetStack[Dep.SharedObject.targetStack.length - 1];\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.asyncMeta = vnode.asyncMeta;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    if (hasProto) {\n      {// fixed by xxxxxx 微信小程序使用 plugins 之后，数组方法被直接挂载到了数组对象上，需要执行 copyAugment 逻辑\n        if(value.push !== value.__proto__.push){\n          copyAugment(value, arrayMethods, arrayKeys);\n        } else {\n          protoAugment(value, arrayMethods);\n        }\n      }\n    } else {\n      copyAugment(value, arrayMethods, arrayKeys);\n    }\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through all properties and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment a target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment a target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key];\n  }\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.SharedObject.target) { // fixed by xxxxxx\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if ( true && customSetter) {\n        customSetter();\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) { return }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (true) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n\n  var keys = hasSymbol\n    ? Reflect.ownKeys(from)\n    : Object.keys(from);\n\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    // in case the object is already observed...\n    if (key === '__ob__') { continue }\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (\n      toVal !== fromVal &&\n      isPlainObject(toVal) &&\n      isPlainObject(fromVal)\n    ) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n       true && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  var res = childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal;\n  return res\n    ? dedupeHooks(res)\n    : res\n}\n\nfunction dedupeHooks (hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n     true && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (true) {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"development\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!new RegExp((\"^[a-zA-Z][\\\\-\\\\.0-9_\" + (unicodeRegExp.source) + \"]*$\")).test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'should conform to valid custom element name in html5 specification.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (true) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def$$1 = dirs[key];\n      if (typeof def$$1 === 'function') {\n        dirs[key] = { bind: def$$1, update: def$$1 };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (true) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n\n  // Apply extends and mixins on the child options,\n  // but only if it is a raw options object that isn't\n  // the result of another mergeOptions call.\n  // Only merged options has the _base property.\n  if (!child._base) {\n    if (child.extends) {\n      parent = mergeOptions(parent, child.extends, vm);\n    }\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm);\n      }\n    }\n  }\n\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if ( true && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\n\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    true\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if ( true && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n\n  if (!valid) {\n    warn(\n      getInvalidTypeMessage(name, value, expectedTypes),\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\nfunction getInvalidTypeMessage (name, value, expectedTypes) {\n  var message = \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n    \" Expected \" + (expectedTypes.map(capitalize).join(', '));\n  var expectedType = expectedTypes[0];\n  var receivedType = toRawType(value);\n  var expectedValue = styleValue(value, expectedType);\n  var receivedValue = styleValue(value, receivedType);\n  // check if we need to specify expected value\n  if (expectedTypes.length === 1 &&\n      isExplicable(expectedType) &&\n      !isBoolean(expectedType, receivedType)) {\n    message += \" with value \" + expectedValue;\n  }\n  message += \", got \" + receivedType + \" \";\n  // check if we need to specify received value\n  if (isExplicable(receivedType)) {\n    message += \"with value \" + receivedValue + \".\";\n  }\n  return message\n}\n\nfunction styleValue (value, type) {\n  if (type === 'String') {\n    return (\"\\\"\" + value + \"\\\"\")\n  } else if (type === 'Number') {\n    return (\"\" + (Number(value)))\n  } else {\n    return (\"\" + value)\n  }\n}\n\nfunction isExplicable (value) {\n  var explicitTypes = ['string', 'number', 'boolean'];\n  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })\n}\n\nfunction isBoolean () {\n  var args = [], len = arguments.length;\n  while ( len-- ) args[ len ] = arguments[ len ];\n\n  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\n  // See: https://github.com/vuejs/vuex/issues/1505\n  pushTarget();\n  try {\n    if (vm) {\n      var cur = vm;\n      while ((cur = cur.$parent)) {\n        var hooks = cur.$options.errorCaptured;\n        if (hooks) {\n          for (var i = 0; i < hooks.length; i++) {\n            try {\n              var capture = hooks[i].call(cur, err, vm, info) === false;\n              if (capture) { return }\n            } catch (e) {\n              globalHandleError(e, cur, 'errorCaptured hook');\n            }\n          }\n        }\n      }\n    }\n    globalHandleError(err, vm, info);\n  } finally {\n    popTarget();\n  }\n}\n\nfunction invokeWithErrorHandling (\n  handler,\n  context,\n  args,\n  vm,\n  info\n) {\n  var res;\n  try {\n    res = args ? handler.apply(context, args) : handler.call(context);\n    if (res && !res._isVue && isPromise(res) && !res._handled) {\n      res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\n      // issue #9511\n      // avoid catch triggering multiple times when nested calls\n      res._handled = true;\n    }\n  } catch (e) {\n    handleError(e, vm, info);\n  }\n  return res\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      // if the user intentionally throws the original error in the handler,\n      // do not log it twice\n      if (e !== err) {\n        logError(e, null, 'config.errorHandler');\n      }\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (true) {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using microtasks.\n// In 2.5 we used (macro) tasks (in combination with microtasks).\n// However, it has subtle problems when state is changed right before repaint\n// (e.g. #6813, out-in transitions).\n// Also, using (macro) tasks in event handler would cause some weird behaviors\n// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n// So we now use microtasks everywhere, again.\n// A major drawback of this tradeoff is that there are some scenarios\n// where microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690, which have workarounds)\n// or even between bubbling of the same event (#6566).\nvar timerFunc;\n\n// The nextTick behavior leverages the microtask queue, which can be accessed\n// via either native Promise.then or MutationObserver.\n// MutationObserver has wider support, however it is seriously bugged in\n// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n// completely stops working after triggering a few times... so, if native\n// Promise is available, we will use it:\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  timerFunc = function () {\n    p.then(flushCallbacks);\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  var counter = 1;\n  var observer = new MutationObserver(flushCallbacks);\n  var textNode = document.createTextNode(String(counter));\n  observer.observe(textNode, {\n    characterData: true\n  });\n  timerFunc = function () {\n    counter = (counter + 1) % 2;\n    textNode.data = String(counter);\n  };\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Techinically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  timerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else {\n  // Fallback to setTimeout.\n  timerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (true) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var warnReservedPrefix = function (target, key) {\n    warn(\n      \"Property \\\"\" + key + \"\\\" must be accessed with \\\"$data.\" + key + \"\\\" because \" +\n      'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' +\n      'prevent conflicts with Vue internals' +\n      'See: https://vuejs.org/v2/api/#data',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) ||\n        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));\n      if (!has && !isAllowed) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\nvar mark;\nvar measure;\n\nif (true) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      // perf.clearMeasures(name)\n    };\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns, vm) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, \"v-on handler\");\n      }\n    } else {\n      // return handler return value for single handlers\n      return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\")\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  createOnceHandler,\n  vm\n) {\n  var name, def$$1, cur, old, event;\n  for (name in on) {\n    def$$1 = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n       true && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur, vm);\n      }\n      if (isTrue(event.once)) {\n        cur = on[name] = createOnceHandler(event.name, cur, event.capture);\n      }\n      add(event.name, cur, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (true) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (true) {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {}\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject)\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      // #6574 in case the inject object is observed...\n      if (key === '__ob__') { continue }\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (true) {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  if (!children || !children.length) {\n    return {}\n  }\n  var slots = {};\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      // fixed by xxxxxx 临时 hack 掉 uni-app 中的异步 name slot page\n      if(child.asyncMeta && child.asyncMeta.data && child.asyncMeta.data.slot === 'page'){\n        (slots['page'] || (slots['page'] = [])).push(child);\n      }else{\n        (slots.default || (slots.default = [])).push(child);\n      }\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\n/*  */\n\nfunction normalizeScopedSlots (\n  slots,\n  normalSlots,\n  prevSlots\n) {\n  var res;\n  var hasNormalSlots = Object.keys(normalSlots).length > 0;\n  var isStable = slots ? !!slots.$stable : !hasNormalSlots;\n  var key = slots && slots.$key;\n  if (!slots) {\n    res = {};\n  } else if (slots._normalized) {\n    // fast path 1: child component re-render only, parent did not change\n    return slots._normalized\n  } else if (\n    isStable &&\n    prevSlots &&\n    prevSlots !== emptyObject &&\n    key === prevSlots.$key &&\n    !hasNormalSlots &&\n    !prevSlots.$hasNormal\n  ) {\n    // fast path 2: stable scoped slots w/ no normal slots to proxy,\n    // only need to normalize once\n    return prevSlots\n  } else {\n    res = {};\n    for (var key$1 in slots) {\n      if (slots[key$1] && key$1[0] !== '$') {\n        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);\n      }\n    }\n  }\n  // expose normal slots on scopedSlots\n  for (var key$2 in normalSlots) {\n    if (!(key$2 in res)) {\n      res[key$2] = proxyNormalSlot(normalSlots, key$2);\n    }\n  }\n  // avoriaz seems to mock a non-extensible $scopedSlots object\n  // and when that is passed down this would cause an error\n  if (slots && Object.isExtensible(slots)) {\n    (slots)._normalized = res;\n  }\n  def(res, '$stable', isStable);\n  def(res, '$key', key);\n  def(res, '$hasNormal', hasNormalSlots);\n  return res\n}\n\nfunction normalizeScopedSlot(normalSlots, key, fn) {\n  var normalized = function () {\n    var res = arguments.length ? fn.apply(null, arguments) : fn({});\n    res = res && typeof res === 'object' && !Array.isArray(res)\n      ? [res] // single vnode\n      : normalizeChildren(res);\n    return res && (\n      res.length === 0 ||\n      (res.length === 1 && res[0].isComment) // #9658\n    ) ? undefined\n      : res\n  };\n  // this is a slot using the new v-slot syntax without scope. although it is\n  // compiled as a scoped slot, render fn users would expect it to be present\n  // on this.$slots because the usage is semantically a normal slot.\n  if (fn.proxy) {\n    Object.defineProperty(normalSlots, key, {\n      get: normalized,\n      enumerable: true,\n      configurable: true\n    });\n  }\n  return normalized\n}\n\nfunction proxyNormalSlot(slots, key) {\n  return function () { return slots[key]; }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    if (hasSymbol && val[Symbol.iterator]) {\n      ret = [];\n      var iterator = val[Symbol.iterator]();\n      var result = iterator.next();\n      while (!result.done) {\n        ret.push(render(result.value, ret.length));\n        result = iterator.next();\n      }\n    } else {\n      keys = Object.keys(val);\n      ret = new Array(keys.length);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[i] = render(val[key], key, i);\n      }\n    }\n  }\n  if (!isDef(ret)) {\n    ret = [];\n  }\n  (ret)._isVList = true;\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if ( true && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    nodes = this.$slots[name] || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n       true && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        var camelizedKey = camelize(key);\n        var hyphenatedKey = hyphenate(key);\n        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n       true && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res,\n  // the following are added in 2.6\n  hasDynamicKeys,\n  contentHashKey\n) {\n  res = res || { $stable: !hasDynamicKeys };\n  for (var i = 0; i < fns.length; i++) {\n    var slot = fns[i];\n    if (Array.isArray(slot)) {\n      resolveScopedSlots(slot, res, hasDynamicKeys);\n    } else if (slot) {\n      // marker for reverse proxying v-slot without scope on this.$slots\n      if (slot.proxy) {\n        slot.fn.proxy = true;\n      }\n      res[slot.key] = slot.fn;\n    }\n  }\n  if (contentHashKey) {\n    (res).$key = contentHashKey;\n  }\n  return res\n}\n\n/*  */\n\nfunction bindDynamicKeys (baseObj, values) {\n  for (var i = 0; i < values.length; i += 2) {\n    var key = values[i];\n    if (typeof key === 'string' && key) {\n      baseObj[values[i]] = values[i + 1];\n    } else if ( true && key !== '' && key !== null) {\n      // null is a speical value for explicitly removing a binding\n      warn(\n        (\"Invalid value for dynamic directive argument (expected string or null): \" + key),\n        this\n      );\n    }\n  }\n  return baseObj\n}\n\n// helper to dynamically append modifier runtime markers to event names.\n// ensure only append when value is already string, otherwise it will be cast\n// to string and cause the type check to miss.\nfunction prependModifier (value, symbol) {\n  return typeof value === 'string' ? symbol + value : value\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n  target._d = bindDynamicKeys;\n  target._p = prependModifier;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var this$1 = this;\n\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () {\n    if (!this$1.$slots) {\n      normalizeScopedSlots(\n        data.scopedSlots,\n        this$1.$slots = resolveSlots(children, parent)\n      );\n    }\n    return this$1.$slots\n  };\n\n  Object.defineProperty(this, 'scopedSlots', ({\n    enumerable: true,\n    get: function get () {\n      return normalizeScopedSlots(data.scopedSlots, this.slots())\n    }\n  }));\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (true) {\n    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;\n  }\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n/*  */\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (vnode, hydrating) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (true) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent // activeInstance in lifecycle state\n) {\n  var options = {\n    _isComponent: true,\n    _parentVnode: vnode,\n    parent: parent\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var existing = hooks[key];\n    var toMerge = componentVNodeHooks[key];\n    if (existing !== toMerge && !(existing && existing._merged)) {\n      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;\n    }\n  }\n}\n\nfunction mergeHook$1 (f1, f2) {\n  var merged = function (a, b) {\n    // flow complains about extra args which is why we use any\n    f1(a, b);\n    f2(a, b);\n  };\n  merged._merged = true;\n  return merged\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  var existing = on[event];\n  var callback = data.model.callback;\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing);\n    }\n  } else {\n    on[event] = callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n     true && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if ( true &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (true) {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {}\n}\n\nvar currentRenderingInstance = null;\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (_parentVnode) {\n      vm.$scopedSlots = normalizeScopedSlots(\n        _parentVnode.data.scopedSlots,\n        vm.$slots,\n        vm.$scopedSlots\n      );\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      // There's no need to maintain a stack becaues all render fns are called\n      // separately from one another. Nested component's render fns are called\n      // when parent component is patched.\n      currentRenderingInstance = vm;\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if ( true && vm.$options.renderError) {\n        try {\n          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n        } catch (e) {\n          handleError(e, vm, \"renderError\");\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    } finally {\n      currentRenderingInstance = null;\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n      vnode = vnode[0];\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if ( true && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  var owner = currentRenderingInstance;\n  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\n    // already pending\n    factory.owners.push(owner);\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (owner && !isDef(factory.owners)) {\n    var owners = factory.owners = [owner];\n    var sync = true;\n    var timerLoading = null;\n    var timerTimeout = null\n\n    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });\n\n    var forceRender = function (renderCompleted) {\n      for (var i = 0, l = owners.length; i < l; i++) {\n        (owners[i]).$forceUpdate();\n      }\n\n      if (renderCompleted) {\n        owners.length = 0;\n        if (timerLoading !== null) {\n          clearTimeout(timerLoading);\n          timerLoading = null;\n        }\n        if (timerTimeout !== null) {\n          clearTimeout(timerTimeout);\n          timerTimeout = null;\n        }\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender(true);\n      } else {\n        owners.length = 0;\n      }\n    });\n\n    var reject = once(function (reason) {\n       true && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender(true);\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (isPromise(res)) {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isPromise(res.component)) {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            timerLoading = setTimeout(function () {\n              timerLoading = null;\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender(false);\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          timerTimeout = setTimeout(function () {\n            timerTimeout = null;\n            if (isUndef(factory.resolved)) {\n              reject(\n                 true\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : undefined\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn) {\n  target.$on(event, fn);\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction createOnceHandler (event, fn) {\n  var _target = target;\n  return function onceHandler () {\n    var res = fn.apply(null, arguments);\n    if (res !== null) {\n      _target.$off(event, onceHandler);\n    }\n  }\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        vm.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        vm.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (true) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      var info = \"event handler for \\\"\" + event + \"\\\"\";\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction setActiveInstance(vm) {\n  var prevActiveInstance = activeInstance;\n  activeInstance = vm;\n  return function () {\n    activeInstance = prevActiveInstance;\n  }\n}\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var restoreActiveInstance = setActiveInstance(vm);\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    restoreActiveInstance();\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (true) {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren.\n\n  // check if there are dynamic scopedSlots (hand-written or compiled but with\n  // dynamic slot names). Static scoped slots compiled from template has the\n  // \"$stable\" marker.\n  var newScopedSlots = parentVnode.data.scopedSlots;\n  var oldScopedSlots = vm.$scopedSlots;\n  var hasDynamicScopedSlot = !!(\n    (newScopedSlots && !newScopedSlots.$stable) ||\n    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\n    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)\n  );\n\n  // Any static slot children from the parent may have changed during parent's\n  // update. Dynamic scoped slots may also have changed. In such cases, a forced\n  // update is necessary to ensure correctness.\n  var needsForceUpdate = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    hasDynamicScopedSlot\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (needsForceUpdate) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (true) {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  var info = hook + \" hook\";\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      invokeWithErrorHandling(handlers[i], vm, null, vm, info);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (true) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n// Async edge case #6566 requires saving the timestamp when event listeners are\n// attached. However, calling performance.now() has a perf overhead especially\n// if the page has thousands of event listeners. Instead, we take a timestamp\n// every time the scheduler flushes and use that for all event listeners\n// attached during that flush.\nvar currentFlushTimestamp = 0;\n\n// Async edge case fix requires storing an event listener's attach timestamp.\nvar getNow = Date.now;\n\n// Determine what event timestamp the browser is using. Annoyingly, the\n// timestamp can either be hi-res (relative to page load) or low-res\n// (relative to UNIX epoch), so in order to compare time we have to use the\n// same timestamp type when saving the flush timestamp.\n// All IE versions use low-res event timestamps, and have problematic clock\n// implementations (#9632)\nif (inBrowser && !isIE) {\n  var performance = window.performance;\n  if (\n    performance &&\n    typeof performance.now === 'function' &&\n    getNow() > document.createEvent('Event').timeStamp\n  ) {\n    // if the event timestamp, although evaluated AFTER the Date.now(), is\n    // smaller than it, it means the event is using a hi-res timestamp,\n    // and we need to use the hi-res version for event listener timestamps as\n    // well.\n    getNow = function () { return performance.now(); };\n  }\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  currentFlushTimestamp = getNow();\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    if (watcher.before) {\n      watcher.before();\n    }\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if ( true && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n\n      if ( true && !config.async) {\n        flushSchedulerQueue();\n        return\n      }\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\n\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n    this.before = options.before;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  true\n    ? expOrFn.toString()\n    : undefined;\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n       true && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (true) {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (!isRoot && !isUpdatingChildComponent) {\n          {\n            if(vm.mpHost === 'mp-baidu'){//百度 observer 在 setData callback 之后触发，直接忽略该 warn\n                return\n            }\n            //fixed by xxxxxx __next_tick_pending,uni://form-field 时不告警\n            if(\n                key === 'value' && \n                Array.isArray(vm.$options.behaviors) &&\n                vm.$options.behaviors.indexOf('uni://form-field') !== -1\n              ){\n              return\n            }\n            if(vm._getFormData){\n              return\n            }\n            var $parent = vm.$parent;\n            while($parent){\n              if($parent.__next_tick_pending){\n                return  \n              }\n              $parent = $parent.$parent;\n            }\n          }\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {}\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n     true && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (true) {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n       true && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if ( true && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (true) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop;\n    sharedPropertyDefinition.set = userDef.set || noop;\n  }\n  if ( true &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.SharedObject.target) {// fixed by xxxxxx\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction createGetterInvoker(fn) {\n  return function computedGetter () {\n    return fn.call(this, this)\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (true) {\n      if (typeof methods[key] !== 'function') {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has type \\\"\" + (typeof methods[key]) + \"\\\" in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (true) {\n    dataDef.set = function () {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      try {\n        cb.call(vm, watcher.value);\n      } catch (error) {\n        handleError(error, vm, (\"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\"));\n      }\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (true) {\n      initProxy(vm);\n    } else {}\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    vm.mpHost !== 'mp-toutiao' && initInjections(vm); // resolve injections before data/props  \n    initState(vm);\n    vm.mpHost !== 'mp-toutiao' && initProvide(vm); // resolve provide after data/props\n    vm.mpHost !== 'mp-toutiao' && callHook(vm, 'created');      \n\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = latest[key];\n    }\n  }\n  return modified\n}\n\nfunction Vue (options) {\n  if ( true &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if ( true && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if ( true && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\n\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    for (var key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (true) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  // 2.6 explicit observable API\n  Vue.observable = function (obj) {\n    observe(obj);\n    return obj\n  };\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.6.10';\n\n/**\n * https://raw.githubusercontent.com/Tencent/westore/master/packages/westore/utils/diff.js\n */\nvar ARRAYTYPE = '[object Array]';\nvar OBJECTTYPE = '[object Object]';\n// const FUNCTIONTYPE = '[object Function]'\n\nfunction diff(current, pre) {\n    var result = {};\n    syncKeys(current, pre);\n    _diff(current, pre, '', result);\n    return result\n}\n\nfunction syncKeys(current, pre) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE && rootPreType == OBJECTTYPE) {\n        if(Object.keys(current).length >= Object.keys(pre).length){\n            for (var key in pre) {\n                var currentValue = current[key];\n                if (currentValue === undefined) {\n                    current[key] = null;\n                } else {\n                    syncKeys(currentValue, pre[key]);\n                }\n            }\n        }\n    } else if (rootCurrentType == ARRAYTYPE && rootPreType == ARRAYTYPE) {\n        if (current.length >= pre.length) {\n            pre.forEach(function (item, index) {\n                syncKeys(current[index], item);\n            });\n        }\n    }\n}\n\nfunction _diff(current, pre, path, result) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE) {\n        if (rootPreType != OBJECTTYPE || Object.keys(current).length < Object.keys(pre).length) {\n            setResult(result, path, current);\n        } else {\n            var loop = function ( key ) {\n                var currentValue = current[key];\n                var preValue = pre[key];\n                var currentType = type(currentValue);\n                var preType = type(preValue);\n                if (currentType != ARRAYTYPE && currentType != OBJECTTYPE) {\n                    if (currentValue != pre[key]) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    }\n                } else if (currentType == ARRAYTYPE) {\n                    if (preType != ARRAYTYPE) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        if (currentValue.length < preValue.length) {\n                            setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                        } else {\n                            currentValue.forEach(function (item, index) {\n                                _diff(item, preValue[index], (path == '' ? '' : path + \".\") + key + '[' + index + ']', result);\n                            });\n                        }\n                    }\n                } else if (currentType == OBJECTTYPE) {\n                    if (preType != OBJECTTYPE || Object.keys(currentValue).length < Object.keys(preValue).length) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        for (var subKey in currentValue) {\n                            _diff(currentValue[subKey], preValue[subKey], (path == '' ? '' : path + \".\") + key + '.' + subKey, result);\n                        }\n                    }\n                }\n            };\n\n            for (var key in current) loop( key );\n        }\n    } else if (rootCurrentType == ARRAYTYPE) {\n        if (rootPreType != ARRAYTYPE) {\n            setResult(result, path, current);\n        } else {\n            if (current.length < pre.length) {\n                setResult(result, path, current);\n            } else {\n                current.forEach(function (item, index) {\n                    _diff(item, pre[index], path + '[' + index + ']', result);\n                });\n            }\n        }\n    } else {\n        setResult(result, path, current);\n    }\n}\n\nfunction setResult(result, k, v) {\n    // if (type(v) != FUNCTIONTYPE) {\n        result[k] = v;\n    // }\n}\n\nfunction type(obj) {\n    return Object.prototype.toString.call(obj)\n}\n\n/*  */\r\n\r\nfunction flushCallbacks$1(vm) {\r\n    if (vm.__next_tick_callbacks && vm.__next_tick_callbacks.length) {\r\n        if (Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n            var mpInstance = vm.$scope;\r\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\r\n                ']:flushCallbacks[' + vm.__next_tick_callbacks.length + ']');\r\n        }\r\n        var copies = vm.__next_tick_callbacks.slice(0);\r\n        vm.__next_tick_callbacks.length = 0;\r\n        for (var i = 0; i < copies.length; i++) {\r\n            copies[i]();\r\n        }\r\n    }\r\n}\r\n\r\nfunction hasRenderWatcher(vm) {\r\n    return queue.find(function (watcher) { return vm._watcher === watcher; })\r\n}\r\n\r\nfunction nextTick$1(vm, cb) {\r\n    //1.nextTick 之前 已 setData 且 setData 还未回调完成\r\n    //2.nextTick 之前存在 render watcher\r\n    if (!vm.__next_tick_pending && !hasRenderWatcher(vm)) {\n        if(Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\n                ']:nextVueTick');\n        }\r\n        return nextTick(cb, vm)\r\n    }else{\n        if(Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance$1 = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance$1.is || mpInstance$1.route) + '][' + vm._uid +\n                ']:nextMPTick');\n        }\n    }\r\n    var _resolve;\r\n    if (!vm.__next_tick_callbacks) {\r\n        vm.__next_tick_callbacks = [];\r\n    }\r\n    vm.__next_tick_callbacks.push(function () {\r\n        if (cb) {\r\n            try {\r\n                cb.call(vm);\r\n            } catch (e) {\r\n                handleError(e, vm, 'nextTick');\r\n            }\r\n        } else if (_resolve) {\r\n            _resolve(vm);\r\n        }\r\n    });\r\n    // $flow-disable-line\r\n    if (!cb && typeof Promise !== 'undefined') {\r\n        return new Promise(function (resolve) {\r\n            _resolve = resolve;\r\n        })\r\n    }\r\n}\n\n/*  */\r\n\r\nfunction cloneWithData(vm) {\r\n  // 确保当前 vm 所有数据被同步\r\n  var ret = Object.create(null);\r\n  var dataKeys = [].concat(\r\n    Object.keys(vm._data || {}),\r\n    Object.keys(vm._computedWatchers || {}));\r\n\r\n  dataKeys.reduce(function(ret, key) {\r\n    ret[key] = vm[key];\r\n    return ret\r\n  }, ret);\r\n  //TODO 需要把无用数据处理掉，比如 list=>l0 则 list 需要移除，否则多传输一份数据\r\n  Object.assign(ret, vm.$mp.data || {});\r\n  if (\r\n    Array.isArray(vm.$options.behaviors) &&\r\n    vm.$options.behaviors.indexOf('uni://form-field') !== -1\r\n  ) { //form-field\r\n    ret['name'] = vm.name;\r\n    ret['value'] = vm.value;\r\n  }\r\n\r\n  return JSON.parse(JSON.stringify(ret))\r\n}\r\n\r\nvar patch = function(oldVnode, vnode) {\n  var this$1 = this;\n\r\n  if (vnode === null) { //destroy\r\n    return\r\n  }\r\n  if (this.mpType === 'page' || this.mpType === 'component') {\r\n    var mpInstance = this.$scope;\r\n    var data = Object.create(null);\r\n    try {\r\n      data = cloneWithData(this);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n    data.__webviewId__ = mpInstance.data.__webviewId__;\r\n    var mpData = Object.create(null);\r\n    Object.keys(data).forEach(function (key) { //仅同步 data 中有的数据\r\n      mpData[key] = mpInstance.data[key];\r\n    });\r\n    var diffData = diff(data, mpData);\r\n    if (Object.keys(diffData).length) {\r\n      if (Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n        console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + this._uid +\r\n          ']差量更新',\r\n          JSON.stringify(diffData));\r\n      }\r\n      this.__next_tick_pending = true;\r\n      mpInstance.setData(diffData, function () {\r\n        this$1.__next_tick_pending = false;\r\n        flushCallbacks$1(this$1);\r\n      });\r\n    } else {\r\n      flushCallbacks$1(this);\r\n    }\r\n  }\r\n};\n\n/*  */\n\nfunction createEmptyRender() {\n\n}\n\nfunction mountComponent$1(\n  vm,\n  el,\n  hydrating\n) {\n  if (!vm.mpType) {//main.js 中的 new Vue\n    return vm\n  }\n  if (vm.mpType === 'app') {\n    vm.$options.render = createEmptyRender;\n  }\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyRender;\n    if (true) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  \n  vm.mpHost !== 'mp-toutiao' && callHook(vm, 'beforeMount');\n\n  var updateComponent = function () {\n    vm._update(vm._render(), hydrating);\n  };\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before: function before() {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate');\n      }\n    }\n  }, true /* isRenderWatcher */);\n  hydrating = false;\n  return vm\n}\n\n/*  */\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/*  */\r\n\r\nvar MP_METHODS = ['createSelectorQuery', 'createIntersectionObserver', 'selectAllComponents', 'selectComponent'];\r\n\r\nfunction getTarget(obj, path) {\r\n  var parts = path.split('.');\r\n  var key = parts[0];\r\n  if (key.indexOf('__$n') === 0) { //number index\r\n    key = parseInt(key.replace('__$n', ''));\r\n  }\r\n  if (parts.length === 1) {\r\n    return obj[key]\r\n  }\r\n  return getTarget(obj[key], parts.slice(1).join('.'))\r\n}\r\n\r\nfunction internalMixin(Vue) {\r\n\r\n  Vue.config.errorHandler = function(err) {\r\n    console.error(err);\r\n  };\r\n\r\n  var oldEmit = Vue.prototype.$emit;\r\n\r\n  Vue.prototype.$emit = function(event) {\r\n    if (this.$scope && event) {\r\n      this.$scope['triggerEvent'](event, {\r\n        __args__: toArray(arguments, 1)\r\n      });\r\n    }\r\n    return oldEmit.apply(this, arguments)\r\n  };\r\n\r\n  Vue.prototype.$nextTick = function(fn) {\r\n    return nextTick$1(this, fn)\r\n  };\r\n\r\n  MP_METHODS.forEach(function (method) {\r\n    Vue.prototype[method] = function(args) {\r\n      if (this.$scope) {\r\n        return this.$scope[method](args)\r\n      }\r\n    };\r\n  });\r\n\r\n  Vue.prototype.__init_provide = initProvide;\r\n\r\n  Vue.prototype.__init_injections = initInjections;\r\n\r\n  Vue.prototype.__call_hook = function(hook, args) {\r\n    var vm = this;\r\n    // #7573 disable dep collection when invoking lifecycle hooks\r\n    pushTarget();\r\n    var handlers = vm.$options[hook];\r\n    var info = hook + \" hook\";\r\n    var ret;\r\n    if (handlers) {\r\n      for (var i = 0, j = handlers.length; i < j; i++) {\r\n        ret = invokeWithErrorHandling(handlers[i], vm, args ? [args] : null, vm, info);\r\n      }\r\n    }\r\n    if (vm._hasHookEvent) {\r\n      vm.$emit('hook:' + hook);\r\n    }\r\n    popTarget();\r\n    return ret\r\n  };\r\n\r\n  Vue.prototype.__set_model = function(target, key, value, modifiers) {\r\n    if (Array.isArray(modifiers)) {\r\n      if (modifiers.indexOf('trim') !== -1) {\r\n        value = value.trim();\r\n      }\r\n      if (modifiers.indexOf('number') !== -1) {\r\n        value = this._n(value);\r\n      }\r\n    }\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__set_sync = function(target, key, value) {\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__get_orig = function(item) {\r\n    if (isPlainObject(item)) {\r\n      return item['$orig'] || item\r\n    }\r\n    return item\r\n  };\r\n\r\n  Vue.prototype.__get_value = function(dataPath, target) {\r\n    return getTarget(target || this, dataPath)\r\n  };\r\n\r\n\r\n  Vue.prototype.__get_class = function(dynamicClass, staticClass) {\r\n    return renderClass(staticClass, dynamicClass)\r\n  };\r\n\r\n  Vue.prototype.__get_style = function(dynamicStyle, staticStyle) {\r\n    if (!dynamicStyle && !staticStyle) {\r\n      return ''\r\n    }\r\n    var dynamicStyleObj = normalizeStyleBinding(dynamicStyle);\r\n    var styleObj = staticStyle ? extend(staticStyle, dynamicStyleObj) : dynamicStyleObj;\r\n    return Object.keys(styleObj).map(function (name) { return ((hyphenate(name)) + \":\" + (styleObj[name])); }).join(';')\r\n  };\r\n\r\n  Vue.prototype.__map = function(val, iteratee) {\r\n    //TODO 暂不考虑 string,number\r\n    var ret, i, l, keys, key;\r\n    if (Array.isArray(val)) {\r\n      ret = new Array(val.length);\r\n      for (i = 0, l = val.length; i < l; i++) {\r\n        ret[i] = iteratee(val[i], i);\r\n      }\r\n      return ret\r\n    } else if (isObject(val)) {\r\n      keys = Object.keys(val);\r\n      ret = Object.create(null);\r\n      for (i = 0, l = keys.length; i < l; i++) {\r\n        key = keys[i];\r\n        ret[key] = iteratee(val[key], key, i);\r\n      }\r\n      return ret\r\n    }\r\n    return []\r\n  };\r\n\r\n}\n\n/*  */\r\n\r\nvar LIFECYCLE_HOOKS$1 = [\r\n    //App\r\n    'onLaunch',\r\n    'onShow',\r\n    'onHide',\r\n    'onUniNViewMessage',\n    'onError',\r\n    //Page\r\n    'onLoad',\r\n    // 'onShow',\r\n    'onReady',\r\n    // 'onHide',\r\n    'onUnload',\r\n    'onPullDownRefresh',\r\n    'onReachBottom',\r\n    'onTabItemTap',\r\n    'onShareAppMessage',\n    'onResize',\r\n    'onPageScroll',\r\n    'onNavigationBarButtonTap',\r\n    'onBackPress',\r\n    'onNavigationBarSearchInputChanged',\r\n    'onNavigationBarSearchInputConfirmed',\r\n    'onNavigationBarSearchInputClicked',\r\n    //Component\r\n    // 'onReady', // 兼容旧版本，应该移除该事件\r\n    'onPageShow',\r\n    'onPageHide',\r\n    'onPageResize'\r\n];\r\nfunction lifecycleMixin$1(Vue) {\r\n\r\n    //fixed vue-class-component\r\n    var oldExtend = Vue.extend;\r\n    Vue.extend = function(extendOptions) {\r\n        extendOptions = extendOptions || {};\r\n\r\n        var methods = extendOptions.methods;\r\n        if (methods) {\r\n            Object.keys(methods).forEach(function (methodName) {\r\n                if (LIFECYCLE_HOOKS$1.indexOf(methodName)!==-1) {\r\n                    extendOptions[methodName] = methods[methodName];\r\n                    delete methods[methodName];\r\n                }\r\n            });\r\n        }\r\n\r\n        return oldExtend.call(this, extendOptions)\r\n    };\r\n\r\n    var strategies = Vue.config.optionMergeStrategies;\r\n    var mergeHook = strategies.created;\r\n    LIFECYCLE_HOOKS$1.forEach(function (hook) {\r\n        strategies[hook] = mergeHook;\r\n    });\r\n\r\n    Vue.prototype.__lifecycle_hooks__ = LIFECYCLE_HOOKS$1;\r\n}\n\n/*  */\r\n\n// install platform patch function\r\nVue.prototype.__patch__ = patch;\r\n\r\n// public mount method\r\nVue.prototype.$mount = function(\r\n    el ,\r\n    hydrating \r\n) {\r\n    return mountComponent$1(this, el, hydrating)\r\n};\r\n\r\nlifecycleMixin$1(Vue);\r\ninternalMixin(Vue);\n\n/*  */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Vue);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),

/***/ 30:
/*!***************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/axios/lib/utils.js ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar bind = __webpack_require__(/*! ./helpers/bind */ 31);\nvar isBuffer = __webpack_require__(/*! is-buffer */ 32);\n\n/*global toString:true*/\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n                                           * Determine if a value is an Array\n                                           *\n                                           * @param {Object} val The value to test\n                                           * @returns {boolean} True if value is an Array, otherwise false\n                                           */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n   * Determine if a value is an ArrayBuffer\n   *\n   * @param {Object} val The value to test\n   * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n   */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n   * Determine if a value is a FormData\n   *\n   * @param {Object} val The value to test\n   * @returns {boolean} True if value is an FormData, otherwise false\n   */\nfunction isFormData(val) {\n  return typeof FormData !== 'undefined' && val instanceof FormData;\n}\n\n/**\n   * Determine if a value is a view on an ArrayBuffer\n   *\n   * @param {Object} val The value to test\n   * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n   */\nfunction isArrayBufferView(val) {\n  var result;\n  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = val && val.buffer && val.buffer instanceof ArrayBuffer;\n  }\n  return result;\n}\n\n/**\n   * Determine if a value is a String\n   *\n   * @param {Object} val The value to test\n   * @returns {boolean} True if value is a String, otherwise false\n   */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n   * Determine if a value is a Number\n   *\n   * @param {Object} val The value to test\n   * @returns {boolean} True if value is a Number, otherwise false\n   */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n   * Determine if a value is undefined\n   *\n   * @param {Object} val The value to test\n   * @returns {boolean} True if the value is undefined, otherwise false\n   */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n   * Determine if a value is an Object\n   *\n   * @param {Object} val The value to test\n   * @returns {boolean} True if value is an Object, otherwise false\n   */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n   * Determine if a value is a Date\n   *\n   * @param {Object} val The value to test\n   * @returns {boolean} True if value is a Date, otherwise false\n   */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n   * Determine if a value is a File\n   *\n   * @param {Object} val The value to test\n   * @returns {boolean} True if value is a File, otherwise false\n   */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n   * Determine if a value is a Blob\n   *\n   * @param {Object} val The value to test\n   * @returns {boolean} True if value is a Blob, otherwise false\n   */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n   * Determine if a value is a Function\n   *\n   * @param {Object} val The value to test\n   * @returns {boolean} True if value is a Function, otherwise false\n   */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n   * Determine if a value is a Stream\n   *\n   * @param {Object} val The value to test\n   * @returns {boolean} True if value is a Stream, otherwise false\n   */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n   * Determine if a value is a URLSearchParams object\n   *\n   * @param {Object} val The value to test\n   * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n   */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n   * Trim excess whitespace off the beginning and end of a string\n   *\n   * @param {String} str The String to trim\n   * @returns {String} The String freed of excess whitespace\n   */\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n\n/**\n   * Determine if we're running in a standard browser environment\n   *\n   * This allows axios to run in a web worker, and react-native.\n   * Both environments support XMLHttpRequest, but not fully standard globals.\n   *\n   * web workers:\n   *  typeof window -> undefined\n   *  typeof document -> undefined\n   *\n   * react-native:\n   *  navigator.product -> 'ReactNative'\n   */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined');\n\n}\n\n/**\n   * Iterate over an Array or an Object invoking a function for each item.\n   *\n   * If `obj` is an Array callback will be called passing\n   * the value, index, and complete array for each item.\n   *\n   * If 'obj' is an Object callback will be called passing\n   * the value, key, and complete object for each property.\n   *\n   * @param {Object|Array} obj The object to iterate\n   * @param {Function} fn The callback to invoke for each item\n   */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n   * Accepts varargs expecting each argument to be an object, then\n   * immutably merges the properties of each object and returns result.\n   *\n   * When multiple objects contain the same key the later object in\n   * the arguments list will take precedence.\n   *\n   * Example:\n   *\n   * ```js\n   * var result = merge({foo: 123}, {foo: 456});\n   * console.log(result.foo); // outputs 456\n   * ```\n   *\n   * @param {Object} obj1 Object to merge\n   * @returns {Object} Result of all merge properties\n   */\nfunction merge() /* obj1, obj2, obj3, ... */{\n  var result = {};\n  function assignValue(val, key) {\n    if (typeof result[key] === 'object' && typeof val === 'object') {\n      result[key] = merge(result[key], val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n   * Extends object a by mutably adding to it the properties of object b.\n   *\n   * @param {Object} a The object to be extended\n   * @param {Object} b The object to copy properties from\n   * @param {Object} thisArg The object to bind function to\n   * @return {Object} The resulting value of object a\n   */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///30\n");

/***/ }),

/***/ 31:
/*!**********************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/axios/lib/helpers/bind.js ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImJpbmQiLCJmbiIsInRoaXNBcmciLCJ3cmFwIiwiYXJncyIsIkFycmF5IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiaSIsImFwcGx5Il0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFNBQVNDLElBQVQsQ0FBY0MsRUFBZCxFQUFrQkMsT0FBbEIsRUFBMkI7QUFDMUMsU0FBTyxTQUFTQyxJQUFULEdBQWdCO0FBQ3JCLFFBQUlDLElBQUksR0FBRyxJQUFJQyxLQUFKLENBQVVDLFNBQVMsQ0FBQ0MsTUFBcEIsQ0FBWDtBQUNBLFNBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0osSUFBSSxDQUFDRyxNQUF6QixFQUFpQ0MsQ0FBQyxFQUFsQyxFQUFzQztBQUNwQ0osVUFBSSxDQUFDSSxDQUFELENBQUosR0FBVUYsU0FBUyxDQUFDRSxDQUFELENBQW5CO0FBQ0Q7QUFDRCxXQUFPUCxFQUFFLENBQUNRLEtBQUgsQ0FBU1AsT0FBVCxFQUFrQkUsSUFBbEIsQ0FBUDtBQUNELEdBTkQ7QUFPRCxDQVJEIiwiZmlsZSI6IjMxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///31\n");

/***/ }),

/***/ 32:
/*!*****************************************!*\
  !*** ./node_modules/is-buffer/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIzMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlclxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxuLy8gVGhlIF9pc0J1ZmZlciBjaGVjayBpcyBmb3IgU2FmYXJpIDUtNyBzdXBwb3J0LCBiZWNhdXNlIGl0J3MgbWlzc2luZ1xuLy8gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiAoaXNCdWZmZXIob2JqKSB8fCBpc1Nsb3dCdWZmZXIob2JqKSB8fCAhIW9iai5faXNCdWZmZXIpXG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuICEhb2JqLmNvbnN0cnVjdG9yICYmIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cblxuLy8gRm9yIE5vZGUgdjAuMTAgc3VwcG9ydC4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseS5cbmZ1bmN0aW9uIGlzU2xvd0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqLnJlYWRGbG9hdExFID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouc2xpY2UgPT09ICdmdW5jdGlvbicgJiYgaXNCdWZmZXIob2JqLnNsaWNlKDAsIDApKVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///32\n");

/***/ }),

/***/ 33:
/*!********************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/axios/lib/core/Axios.js ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar defaults = __webpack_require__(/*! ./../defaults */ 34);\nvar utils = __webpack_require__(/*! ./../utils */ 30);\nvar InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ 45);\nvar dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ 46);\n\n/**\n                                                     * Create a new instance of Axios\n                                                     *\n                                                     * @param {Object} instanceConfig The default config for the instance\n                                                     */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager() };\n\n}\n\n/**\n   * Dispatch a request\n   *\n   * @param {Object} config The config specific for this request (merged with this.defaults)\n   */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = utils.merge({\n      url: arguments[0] },\n    arguments[1]);\n  }\n\n  config = utils.merge(defaults, { method: 'get' }, this.defaults, config);\n  config.method = config.method.toLowerCase();\n\n  // Hook up interceptors middleware\n  var chain = [dispatchRequest, undefined];\n  var promise = Promise.resolve(config);\n\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    chain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    chain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  while (chain.length) {\n    promise = promise.then(chain.shift(), chain.shift());\n  }\n\n  return promise;\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function (url, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url }));\n\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function (url, data, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url,\n      data: data }));\n\n  };\n});\n\nmodule.exports = Axios;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIl0sIm5hbWVzIjpbImRlZmF1bHRzIiwicmVxdWlyZSIsInV0aWxzIiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiQXhpb3MiLCJpbnN0YW5jZUNvbmZpZyIsImludGVyY2VwdG9ycyIsInJlcXVlc3QiLCJyZXNwb25zZSIsInByb3RvdHlwZSIsImNvbmZpZyIsIm1lcmdlIiwidXJsIiwiYXJndW1lbnRzIiwibWV0aG9kIiwidG9Mb3dlckNhc2UiLCJjaGFpbiIsInVuZGVmaW5lZCIsInByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsImZvckVhY2giLCJ1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyIsImludGVyY2VwdG9yIiwidW5zaGlmdCIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwicHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzIiwicHVzaCIsImxlbmd0aCIsInRoZW4iLCJzaGlmdCIsImZvckVhY2hNZXRob2ROb0RhdGEiLCJmb3JFYWNoTWV0aG9kV2l0aERhdGEiLCJkYXRhIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsUUFBUSxHQUFHQyxtQkFBTyxDQUFDLHVCQUFELENBQXRCO0FBQ0EsSUFBSUMsS0FBSyxHQUFHRCxtQkFBTyxDQUFDLG9CQUFELENBQW5CO0FBQ0EsSUFBSUUsa0JBQWtCLEdBQUdGLG1CQUFPLENBQUMsOEJBQUQsQ0FBaEM7QUFDQSxJQUFJRyxlQUFlLEdBQUdILG1CQUFPLENBQUMsMkJBQUQsQ0FBN0I7O0FBRUE7Ozs7O0FBS0EsU0FBU0ksS0FBVCxDQUFlQyxjQUFmLEVBQStCO0FBQzdCLE9BQUtOLFFBQUwsR0FBZ0JNLGNBQWhCO0FBQ0EsT0FBS0MsWUFBTCxHQUFvQjtBQUNsQkMsV0FBTyxFQUFFLElBQUlMLGtCQUFKLEVBRFM7QUFFbEJNLFlBQVEsRUFBRSxJQUFJTixrQkFBSixFQUZRLEVBQXBCOztBQUlEOztBQUVEOzs7OztBQUtBRSxLQUFLLENBQUNLLFNBQU4sQ0FBZ0JGLE9BQWhCLEdBQTBCLFNBQVNBLE9BQVQsQ0FBaUJHLE1BQWpCLEVBQXlCO0FBQ2pEO0FBQ0E7QUFDQSxNQUFJLE9BQU9BLE1BQVAsS0FBa0IsUUFBdEIsRUFBZ0M7QUFDOUJBLFVBQU0sR0FBR1QsS0FBSyxDQUFDVSxLQUFOLENBQVk7QUFDbkJDLFNBQUcsRUFBRUMsU0FBUyxDQUFDLENBQUQsQ0FESyxFQUFaO0FBRU5BLGFBQVMsQ0FBQyxDQUFELENBRkgsQ0FBVDtBQUdEOztBQUVESCxRQUFNLEdBQUdULEtBQUssQ0FBQ1UsS0FBTixDQUFZWixRQUFaLEVBQXNCLEVBQUNlLE1BQU0sRUFBRSxLQUFULEVBQXRCLEVBQXVDLEtBQUtmLFFBQTVDLEVBQXNEVyxNQUF0RCxDQUFUO0FBQ0FBLFFBQU0sQ0FBQ0ksTUFBUCxHQUFnQkosTUFBTSxDQUFDSSxNQUFQLENBQWNDLFdBQWQsRUFBaEI7O0FBRUE7QUFDQSxNQUFJQyxLQUFLLEdBQUcsQ0FBQ2IsZUFBRCxFQUFrQmMsU0FBbEIsQ0FBWjtBQUNBLE1BQUlDLE9BQU8sR0FBR0MsT0FBTyxDQUFDQyxPQUFSLENBQWdCVixNQUFoQixDQUFkOztBQUVBLE9BQUtKLFlBQUwsQ0FBa0JDLE9BQWxCLENBQTBCYyxPQUExQixDQUFrQyxTQUFTQywwQkFBVCxDQUFvQ0MsV0FBcEMsRUFBaUQ7QUFDakZQLFNBQUssQ0FBQ1EsT0FBTixDQUFjRCxXQUFXLENBQUNFLFNBQTFCLEVBQXFDRixXQUFXLENBQUNHLFFBQWpEO0FBQ0QsR0FGRDs7QUFJQSxPQUFLcEIsWUFBTCxDQUFrQkUsUUFBbEIsQ0FBMkJhLE9BQTNCLENBQW1DLFNBQVNNLHdCQUFULENBQWtDSixXQUFsQyxFQUErQztBQUNoRlAsU0FBSyxDQUFDWSxJQUFOLENBQVdMLFdBQVcsQ0FBQ0UsU0FBdkIsRUFBa0NGLFdBQVcsQ0FBQ0csUUFBOUM7QUFDRCxHQUZEOztBQUlBLFNBQU9WLEtBQUssQ0FBQ2EsTUFBYixFQUFxQjtBQUNuQlgsV0FBTyxHQUFHQSxPQUFPLENBQUNZLElBQVIsQ0FBYWQsS0FBSyxDQUFDZSxLQUFOLEVBQWIsRUFBNEJmLEtBQUssQ0FBQ2UsS0FBTixFQUE1QixDQUFWO0FBQ0Q7O0FBRUQsU0FBT2IsT0FBUDtBQUNELENBN0JEOztBQStCQTtBQUNBakIsS0FBSyxDQUFDb0IsT0FBTixDQUFjLENBQUMsUUFBRCxFQUFXLEtBQVgsRUFBa0IsTUFBbEIsRUFBMEIsU0FBMUIsQ0FBZCxFQUFvRCxTQUFTVyxtQkFBVCxDQUE2QmxCLE1BQTdCLEVBQXFDO0FBQ3ZGO0FBQ0FWLE9BQUssQ0FBQ0ssU0FBTixDQUFnQkssTUFBaEIsSUFBMEIsVUFBU0YsR0FBVCxFQUFjRixNQUFkLEVBQXNCO0FBQzlDLFdBQU8sS0FBS0gsT0FBTCxDQUFhTixLQUFLLENBQUNVLEtBQU4sQ0FBWUQsTUFBTSxJQUFJLEVBQXRCLEVBQTBCO0FBQzVDSSxZQUFNLEVBQUVBLE1BRG9DO0FBRTVDRixTQUFHLEVBQUVBLEdBRnVDLEVBQTFCLENBQWIsQ0FBUDs7QUFJRCxHQUxEO0FBTUQsQ0FSRDs7QUFVQVgsS0FBSyxDQUFDb0IsT0FBTixDQUFjLENBQUMsTUFBRCxFQUFTLEtBQVQsRUFBZ0IsT0FBaEIsQ0FBZCxFQUF3QyxTQUFTWSxxQkFBVCxDQUErQm5CLE1BQS9CLEVBQXVDO0FBQzdFO0FBQ0FWLE9BQUssQ0FBQ0ssU0FBTixDQUFnQkssTUFBaEIsSUFBMEIsVUFBU0YsR0FBVCxFQUFjc0IsSUFBZCxFQUFvQnhCLE1BQXBCLEVBQTRCO0FBQ3BELFdBQU8sS0FBS0gsT0FBTCxDQUFhTixLQUFLLENBQUNVLEtBQU4sQ0FBWUQsTUFBTSxJQUFJLEVBQXRCLEVBQTBCO0FBQzVDSSxZQUFNLEVBQUVBLE1BRG9DO0FBRTVDRixTQUFHLEVBQUVBLEdBRnVDO0FBRzVDc0IsVUFBSSxFQUFFQSxJQUhzQyxFQUExQixDQUFiLENBQVA7O0FBS0QsR0FORDtBQU9ELENBVEQ7O0FBV0FDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmhDLEtBQWpCIiwiZmlsZSI6IjMzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLy4uL2RlZmF1bHRzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gdXRpbHMubWVyZ2Uoe1xuICAgICAgdXJsOiBhcmd1bWVudHNbMF1cbiAgICB9LCBhcmd1bWVudHNbMV0pO1xuICB9XG5cbiAgY29uZmlnID0gdXRpbHMubWVyZ2UoZGVmYXVsdHMsIHttZXRob2Q6ICdnZXQnfSwgdGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcblxuICAvLyBIb29rIHVwIGludGVyY2VwdG9ycyBtaWRkbGV3YXJlXG4gIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///33\n");

/***/ }),

/***/ 34:
/*!******************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/axios/lib/defaults.js ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {\n\nvar utils = __webpack_require__(/*! ./utils */ 30);\nvar normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ 35);\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded' };\n\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = __webpack_require__(/*! ./adapters/xhr */ 36);\n  } else if (typeof process !== 'undefined') {\n    // For node use HTTP adapter\n    adapter = __webpack_require__(/*! ./adapters/http */ 36);\n  }\n  return adapter;\n}\n\nvar defaults = {\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Content-Type');\n    if (utils.isFormData(data) ||\n    utils.isArrayBuffer(data) ||\n    utils.isBuffer(data) ||\n    utils.isStream(data) ||\n    utils.isFile(data) ||\n    utils.isBlob(data))\n    {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data)) {\n      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');\n      return JSON.stringify(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    /*eslint no-param-reassign:0*/\n    if (typeof data === 'string') {\n      try {\n        data = JSON.parse(data);\n      } catch (e) {/* Ignore */}\n    }\n    return data;\n  }],\n\n  /**\n       * A timeout in milliseconds to abort a request. If set to 0 (default) a\n       * timeout is not created.\n       */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  } };\n\n\ndefaults.headers = {\n  common: {\n    'Accept': 'application/json, text/plain, */*' } };\n\n\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../../../../Downloads/HBuilderX.1.9.9.20190522.full/HBuilderX/plugins/uniapp-cli/node_modules/node-libs-browser/mock/process.js */ 17)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJoZWFkZXJzIiwidmFsdWUiLCJpc1VuZGVmaW5lZCIsImdldERlZmF1bHRBZGFwdGVyIiwiYWRhcHRlciIsIlhNTEh0dHBSZXF1ZXN0IiwicHJvY2VzcyIsImRlZmF1bHRzIiwidHJhbnNmb3JtUmVxdWVzdCIsImRhdGEiLCJpc0Zvcm1EYXRhIiwiaXNBcnJheUJ1ZmZlciIsImlzQnVmZmVyIiwiaXNTdHJlYW0iLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc0FycmF5QnVmZmVyVmlldyIsImJ1ZmZlciIsImlzVVJMU2VhcmNoUGFyYW1zIiwidG9TdHJpbmciLCJpc09iamVjdCIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInBhcnNlIiwiZSIsInRpbWVvdXQiLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwibWF4Q29udGVudExlbmd0aCIsInZhbGlkYXRlU3RhdHVzIiwic3RhdHVzIiwiY29tbW9uIiwiZm9yRWFjaCIsImZvckVhY2hNZXRob2ROb0RhdGEiLCJtZXRob2QiLCJmb3JFYWNoTWV0aG9kV2l0aERhdGEiLCJtZXJnZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLCtDQUFhOztBQUViLElBQUlBLEtBQUssR0FBR0MsbUJBQU8sQ0FBQyxpQkFBRCxDQUFuQjtBQUNBLElBQUlDLG1CQUFtQixHQUFHRCxtQkFBTyxDQUFDLHVDQUFELENBQWpDOztBQUVBLElBQUlFLG9CQUFvQixHQUFHO0FBQ3pCLGtCQUFnQixtQ0FEUyxFQUEzQjs7O0FBSUEsU0FBU0MscUJBQVQsQ0FBK0JDLE9BQS9CLEVBQXdDQyxLQUF4QyxFQUErQztBQUM3QyxNQUFJLENBQUNOLEtBQUssQ0FBQ08sV0FBTixDQUFrQkYsT0FBbEIsQ0FBRCxJQUErQkwsS0FBSyxDQUFDTyxXQUFOLENBQWtCRixPQUFPLENBQUMsY0FBRCxDQUF6QixDQUFuQyxFQUErRTtBQUM3RUEsV0FBTyxDQUFDLGNBQUQsQ0FBUCxHQUEwQkMsS0FBMUI7QUFDRDtBQUNGOztBQUVELFNBQVNFLGlCQUFULEdBQTZCO0FBQzNCLE1BQUlDLE9BQUo7QUFDQSxNQUFJLE9BQU9DLGNBQVAsS0FBMEIsV0FBOUIsRUFBMkM7QUFDekM7QUFDQUQsV0FBTyxHQUFHUixtQkFBTyxDQUFDLHdCQUFELENBQWpCO0FBQ0QsR0FIRCxNQUdPLElBQUksT0FBT1UsT0FBUCxLQUFtQixXQUF2QixFQUFvQztBQUN6QztBQUNBRixXQUFPLEdBQUdSLG1CQUFPLENBQUMseUJBQUQsQ0FBakI7QUFDRDtBQUNELFNBQU9RLE9BQVA7QUFDRDs7QUFFRCxJQUFJRyxRQUFRLEdBQUc7QUFDYkgsU0FBTyxFQUFFRCxpQkFBaUIsRUFEYjs7QUFHYkssa0JBQWdCLEVBQUUsQ0FBQyxTQUFTQSxnQkFBVCxDQUEwQkMsSUFBMUIsRUFBZ0NULE9BQWhDLEVBQXlDO0FBQzFESCx1QkFBbUIsQ0FBQ0csT0FBRCxFQUFVLGNBQVYsQ0FBbkI7QUFDQSxRQUFJTCxLQUFLLENBQUNlLFVBQU4sQ0FBaUJELElBQWpCO0FBQ0ZkLFNBQUssQ0FBQ2dCLGFBQU4sQ0FBb0JGLElBQXBCLENBREU7QUFFRmQsU0FBSyxDQUFDaUIsUUFBTixDQUFlSCxJQUFmLENBRkU7QUFHRmQsU0FBSyxDQUFDa0IsUUFBTixDQUFlSixJQUFmLENBSEU7QUFJRmQsU0FBSyxDQUFDbUIsTUFBTixDQUFhTCxJQUFiLENBSkU7QUFLRmQsU0FBSyxDQUFDb0IsTUFBTixDQUFhTixJQUFiLENBTEY7QUFNRTtBQUNBLGFBQU9BLElBQVA7QUFDRDtBQUNELFFBQUlkLEtBQUssQ0FBQ3FCLGlCQUFOLENBQXdCUCxJQUF4QixDQUFKLEVBQW1DO0FBQ2pDLGFBQU9BLElBQUksQ0FBQ1EsTUFBWjtBQUNEO0FBQ0QsUUFBSXRCLEtBQUssQ0FBQ3VCLGlCQUFOLENBQXdCVCxJQUF4QixDQUFKLEVBQW1DO0FBQ2pDViwyQkFBcUIsQ0FBQ0MsT0FBRCxFQUFVLGlEQUFWLENBQXJCO0FBQ0EsYUFBT1MsSUFBSSxDQUFDVSxRQUFMLEVBQVA7QUFDRDtBQUNELFFBQUl4QixLQUFLLENBQUN5QixRQUFOLENBQWVYLElBQWYsQ0FBSixFQUEwQjtBQUN4QlYsMkJBQXFCLENBQUNDLE9BQUQsRUFBVSxnQ0FBVixDQUFyQjtBQUNBLGFBQU9xQixJQUFJLENBQUNDLFNBQUwsQ0FBZWIsSUFBZixDQUFQO0FBQ0Q7QUFDRCxXQUFPQSxJQUFQO0FBQ0QsR0F2QmlCLENBSEw7O0FBNEJiYyxtQkFBaUIsRUFBRSxDQUFDLFNBQVNBLGlCQUFULENBQTJCZCxJQUEzQixFQUFpQztBQUNuRDtBQUNBLFFBQUksT0FBT0EsSUFBUCxLQUFnQixRQUFwQixFQUE4QjtBQUM1QixVQUFJO0FBQ0ZBLFlBQUksR0FBR1ksSUFBSSxDQUFDRyxLQUFMLENBQVdmLElBQVgsQ0FBUDtBQUNELE9BRkQsQ0FFRSxPQUFPZ0IsQ0FBUCxFQUFVLENBQUUsWUFBYztBQUM3QjtBQUNELFdBQU9oQixJQUFQO0FBQ0QsR0FSa0IsQ0E1Qk47O0FBc0NiOzs7O0FBSUFpQixTQUFPLEVBQUUsQ0ExQ0k7O0FBNENiQyxnQkFBYyxFQUFFLFlBNUNIO0FBNkNiQyxnQkFBYyxFQUFFLGNBN0NIOztBQStDYkMsa0JBQWdCLEVBQUUsQ0FBQyxDQS9DTjs7QUFpRGJDLGdCQUFjLEVBQUUsU0FBU0EsY0FBVCxDQUF3QkMsTUFBeEIsRUFBZ0M7QUFDOUMsV0FBT0EsTUFBTSxJQUFJLEdBQVYsSUFBaUJBLE1BQU0sR0FBRyxHQUFqQztBQUNELEdBbkRZLEVBQWY7OztBQXNEQXhCLFFBQVEsQ0FBQ1AsT0FBVCxHQUFtQjtBQUNqQmdDLFFBQU0sRUFBRTtBQUNOLGNBQVUsbUNBREosRUFEUyxFQUFuQjs7OztBQU1BckMsS0FBSyxDQUFDc0MsT0FBTixDQUFjLENBQUMsUUFBRCxFQUFXLEtBQVgsRUFBa0IsTUFBbEIsQ0FBZCxFQUF5QyxTQUFTQyxtQkFBVCxDQUE2QkMsTUFBN0IsRUFBcUM7QUFDNUU1QixVQUFRLENBQUNQLE9BQVQsQ0FBaUJtQyxNQUFqQixJQUEyQixFQUEzQjtBQUNELENBRkQ7O0FBSUF4QyxLQUFLLENBQUNzQyxPQUFOLENBQWMsQ0FBQyxNQUFELEVBQVMsS0FBVCxFQUFnQixPQUFoQixDQUFkLEVBQXdDLFNBQVNHLHFCQUFULENBQStCRCxNQUEvQixFQUF1QztBQUM3RTVCLFVBQVEsQ0FBQ1AsT0FBVCxDQUFpQm1DLE1BQWpCLElBQTJCeEMsS0FBSyxDQUFDMEMsS0FBTixDQUFZdkMsb0JBQVosQ0FBM0I7QUFDRCxDQUZEOztBQUlBd0MsTUFBTSxDQUFDQyxPQUFQLEdBQWlCaEMsUUFBakIsQyIsImZpbGUiOiIzNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgLyogSWdub3JlICovIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH1cbn07XG5cbmRlZmF1bHRzLmhlYWRlcnMgPSB7XG4gIGNvbW1vbjoge1xuICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///34\n");

/***/ }),

/***/ 35:
/*!*************************************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/axios/lib/helpers/normalizeHeaderName.js ***!
  \*************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ../utils */ 30);\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJoZWFkZXJzIiwibm9ybWFsaXplZE5hbWUiLCJmb3JFYWNoIiwicHJvY2Vzc0hlYWRlciIsInZhbHVlIiwibmFtZSIsInRvVXBwZXJDYXNlIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxLQUFLLEdBQUdDLG1CQUFPLENBQUMsa0JBQUQsQ0FBbkI7O0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixTQUFTQyxtQkFBVCxDQUE2QkMsT0FBN0IsRUFBc0NDLGNBQXRDLEVBQXNEO0FBQ3JFTixPQUFLLENBQUNPLE9BQU4sQ0FBY0YsT0FBZCxFQUF1QixTQUFTRyxhQUFULENBQXVCQyxLQUF2QixFQUE4QkMsSUFBOUIsRUFBb0M7QUFDekQsUUFBSUEsSUFBSSxLQUFLSixjQUFULElBQTJCSSxJQUFJLENBQUNDLFdBQUwsT0FBdUJMLGNBQWMsQ0FBQ0ssV0FBZixFQUF0RCxFQUFvRjtBQUNsRk4sYUFBTyxDQUFDQyxjQUFELENBQVAsR0FBMEJHLEtBQTFCO0FBQ0EsYUFBT0osT0FBTyxDQUFDSyxJQUFELENBQWQ7QUFDRDtBQUNGLEdBTEQ7QUFNRCxDQVBEIiwiZmlsZSI6IjM1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///35\n");

/***/ }),

/***/ 36:
/*!**********************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/axios/lib/adapters/xhr.js ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ 30);\nvar settle = __webpack_require__(/*! ./../core/settle */ 37);\nvar buildURL = __webpack_require__(/*! ./../helpers/buildURL */ 40);\nvar parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ 41);\nvar isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ 42);\nvar createError = __webpack_require__(/*! ../core/createError */ 38);\nvar btoa = typeof window !== 'undefined' && window.btoa && window.btoa.bind(window) || __webpack_require__(/*! ./../helpers/btoa */ 43);\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n    var loadEvent = 'onreadystatechange';\n    var xDomain = false;\n\n    // For IE 8/9 CORS support\n    // Only supports POST and GET calls and doesn't returns the response headers.\n    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.\n    if ( true &&\n    typeof window !== 'undefined' &&\n    window.XDomainRequest && !('withCredentials' in request) &&\n    !isURLSameOrigin(config.url)) {\n      request = new window.XDomainRequest();\n      loadEvent = 'onload';\n      xDomain = true;\n      request.onprogress = function handleProgress() {};\n      request.ontimeout = function handleTimeout() {};\n    }\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password || '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    // Listen for ready state\n    request[loadEvent] = function handleLoad() {\n      if (!request || request.readyState !== 4 && !xDomain) {\n        return;\n      }\n\n      // The request errored out and we didn't get a response, this will be\n      // handled by onerror instead\n      // With one exception: request that using file: protocol, most browsers\n      // will return status as 0 even though it's a successful request\n      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n        return;\n      }\n\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        // IE sends 1223 instead of 204 (https://github.com/axios/axios/issues/201)\n        status: request.status === 1223 ? 204 : request.status,\n        statusText: request.status === 1223 ? 'No Content' : request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request };\n\n\n      settle(resolve, reject, response);\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',\n      request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      var cookies = __webpack_require__(/*! ./../helpers/cookies */ 44);\n\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?\n      cookies.read(config.xsrfCookieName) :\n      undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (config.withCredentials) {\n      request.withCredentials = true;\n    }\n\n    // Add responseType to request if needed\n    if (config.responseType) {\n      try {\n        request.responseType = config.responseType;\n      } catch (e) {\n        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n        if (config.responseType !== 'json') {\n          throw e;\n        }\n      }\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n\n        request.abort();\n        reject(cancel);\n        // Clean up request\n        request = null;\n      });\n    }\n\n    if (requestData === undefined) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///36\n");

/***/ }),

/***/ 37:
/*!*********************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/axios/lib/core/settle.js ***!
  \*********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar createError = __webpack_require__(/*! ./createError */ 38);\n\n/**\n                                             * Resolve or reject a Promise based on response status.\n                                             *\n                                             * @param {Function} resolve A function that resolves the promise.\n                                             * @param {Function} reject A function that rejects the promise.\n                                             * @param {object} response The response.\n                                             */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  // Note: status is not exposed by XDomainRequest\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n    'Request failed with status code ' + response.status,\n    response.config,\n    null,\n    response.request,\n    response));\n\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyJdLCJuYW1lcyI6WyJjcmVhdGVFcnJvciIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic2V0dGxlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlc3BvbnNlIiwidmFsaWRhdGVTdGF0dXMiLCJjb25maWciLCJzdGF0dXMiLCJyZXF1ZXN0Il0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsdUJBQUQsQ0FBekI7O0FBRUE7Ozs7Ozs7QUFPQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFNBQVNDLE1BQVQsQ0FBZ0JDLE9BQWhCLEVBQXlCQyxNQUF6QixFQUFpQ0MsUUFBakMsRUFBMkM7QUFDMUQsTUFBSUMsY0FBYyxHQUFHRCxRQUFRLENBQUNFLE1BQVQsQ0FBZ0JELGNBQXJDO0FBQ0E7QUFDQSxNQUFJLENBQUNELFFBQVEsQ0FBQ0csTUFBVixJQUFvQixDQUFDRixjQUFyQixJQUF1Q0EsY0FBYyxDQUFDRCxRQUFRLENBQUNHLE1BQVYsQ0FBekQsRUFBNEU7QUFDMUVMLFdBQU8sQ0FBQ0UsUUFBRCxDQUFQO0FBQ0QsR0FGRCxNQUVPO0FBQ0xELFVBQU0sQ0FBQ04sV0FBVztBQUNoQix5Q0FBcUNPLFFBQVEsQ0FBQ0csTUFEOUI7QUFFaEJILFlBQVEsQ0FBQ0UsTUFGTztBQUdoQixRQUhnQjtBQUloQkYsWUFBUSxDQUFDSSxPQUpPO0FBS2hCSixZQUxnQixDQUFaLENBQU47O0FBT0Q7QUFDRixDQWREIiwiZmlsZSI6IjM3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICAvLyBOb3RlOiBzdGF0dXMgaXMgbm90IGV4cG9zZWQgYnkgWERvbWFpblJlcXVlc3RcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///37\n");

/***/ }),

/***/ 38:
/*!**************************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/axios/lib/core/createError.js ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar enhanceError = __webpack_require__(/*! ./enhanceError */ 39);\n\n/**\n                                               * Create an Error with the specified message, config, error code, request and response.\n                                               *\n                                               * @param {string} message The error message.\n                                               * @param {Object} config The config.\n                                               * @param {string} [code] The error code (for example, 'ECONNABORTED').\n                                               * @param {Object} [request] The request.\n                                               * @param {Object} [response] The response.\n                                               * @returns {Error} The created error.\n                                               */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIl0sIm5hbWVzIjpbImVuaGFuY2VFcnJvciIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiY3JlYXRlRXJyb3IiLCJtZXNzYWdlIiwiY29uZmlnIiwiY29kZSIsInJlcXVlc3QiLCJyZXNwb25zZSIsImVycm9yIiwiRXJyb3IiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLFlBQVksR0FBR0MsbUJBQU8sQ0FBQyx3QkFBRCxDQUExQjs7QUFFQTs7Ozs7Ozs7OztBQVVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsU0FBU0MsV0FBVCxDQUFxQkMsT0FBckIsRUFBOEJDLE1BQTlCLEVBQXNDQyxJQUF0QyxFQUE0Q0MsT0FBNUMsRUFBcURDLFFBQXJELEVBQStEO0FBQzlFLE1BQUlDLEtBQUssR0FBRyxJQUFJQyxLQUFKLENBQVVOLE9BQVYsQ0FBWjtBQUNBLFNBQU9MLFlBQVksQ0FBQ1UsS0FBRCxFQUFRSixNQUFSLEVBQWdCQyxJQUFoQixFQUFzQkMsT0FBdEIsRUFBK0JDLFFBQS9CLENBQW5CO0FBQ0QsQ0FIRCIsImZpbGUiOiIzOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///38\n");

/***/ }),

/***/ 39:
/*!***************************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/axios/lib/core/enhanceError.js ***!
  \***************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n               * Update an Error with the specified config, error code, and response.\n               *\n               * @param {Error} error The error to update.\n               * @param {Object} config The config.\n               * @param {string} [code] The error code (for example, 'ECONNABORTED').\n               * @param {Object} [request] The request.\n               * @param {Object} [response] The response.\n               * @returns {Error} The error.\n               */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n  error.request = request;\n  error.response = response;\n  return error;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZW5oYW5jZUVycm9yIiwiZXJyb3IiLCJjb25maWciLCJjb2RlIiwicmVxdWVzdCIsInJlc3BvbnNlIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjs7Ozs7Ozs7OztBQVVBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsU0FBU0MsWUFBVCxDQUFzQkMsS0FBdEIsRUFBNkJDLE1BQTdCLEVBQXFDQyxJQUFyQyxFQUEyQ0MsT0FBM0MsRUFBb0RDLFFBQXBELEVBQThEO0FBQzdFSixPQUFLLENBQUNDLE1BQU4sR0FBZUEsTUFBZjtBQUNBLE1BQUlDLElBQUosRUFBVTtBQUNSRixTQUFLLENBQUNFLElBQU4sR0FBYUEsSUFBYjtBQUNEO0FBQ0RGLE9BQUssQ0FBQ0csT0FBTixHQUFnQkEsT0FBaEI7QUFDQUgsT0FBSyxDQUFDSSxRQUFOLEdBQWlCQSxRQUFqQjtBQUNBLFNBQU9KLEtBQVA7QUFDRCxDQVJEIiwiZmlsZSI6IjM5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///39\n");

/***/ }),

/***/ 4:
/*!******************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/pages.json ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI0LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n");

/***/ }),

/***/ 40:
/*!**************************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/axios/lib/helpers/buildURL.js ***!
  \**************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ 30);\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n  replace(/%40/gi, '@').\n  replace(/%3A/gi, ':').\n  replace(/%24/g, '$').\n  replace(/%2C/gi, ',').\n  replace(/%20/g, '+').\n  replace(/%5B/gi, '[').\n  replace(/%5D/gi, ']');\n}\n\n/**\n   * Build a URL by appending params to the end\n   *\n   * @param {string} url The base of the url (e.g., http://www.google.com)\n   * @param {object} [params] The params to be appended\n   * @returns {string} The formatted url\n   */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIl0sIm5hbWVzIjpbInV0aWxzIiwicmVxdWlyZSIsImVuY29kZSIsInZhbCIsImVuY29kZVVSSUNvbXBvbmVudCIsInJlcGxhY2UiLCJtb2R1bGUiLCJleHBvcnRzIiwiYnVpbGRVUkwiLCJ1cmwiLCJwYXJhbXMiLCJwYXJhbXNTZXJpYWxpemVyIiwic2VyaWFsaXplZFBhcmFtcyIsImlzVVJMU2VhcmNoUGFyYW1zIiwidG9TdHJpbmciLCJwYXJ0cyIsImZvckVhY2giLCJzZXJpYWxpemUiLCJrZXkiLCJpc0FycmF5IiwicGFyc2VWYWx1ZSIsInYiLCJpc0RhdGUiLCJ0b0lTT1N0cmluZyIsImlzT2JqZWN0IiwiSlNPTiIsInN0cmluZ2lmeSIsInB1c2giLCJqb2luIiwiaW5kZXhPZiJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsS0FBSyxHQUFHQyxtQkFBTyxDQUFDLG9CQUFELENBQW5COztBQUVBLFNBQVNDLE1BQVQsQ0FBZ0JDLEdBQWhCLEVBQXFCO0FBQ25CLFNBQU9DLGtCQUFrQixDQUFDRCxHQUFELENBQWxCO0FBQ0xFLFNBREssQ0FDRyxPQURILEVBQ1ksR0FEWjtBQUVMQSxTQUZLLENBRUcsT0FGSCxFQUVZLEdBRlo7QUFHTEEsU0FISyxDQUdHLE1BSEgsRUFHVyxHQUhYO0FBSUxBLFNBSkssQ0FJRyxPQUpILEVBSVksR0FKWjtBQUtMQSxTQUxLLENBS0csTUFMSCxFQUtXLEdBTFg7QUFNTEEsU0FOSyxDQU1HLE9BTkgsRUFNWSxHQU5aO0FBT0xBLFNBUEssQ0FPRyxPQVBILEVBT1ksR0FQWixDQUFQO0FBUUQ7O0FBRUQ7Ozs7Ozs7QUFPQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFNBQVNDLFFBQVQsQ0FBa0JDLEdBQWxCLEVBQXVCQyxNQUF2QixFQUErQkMsZ0JBQS9CLEVBQWlEO0FBQ2hFO0FBQ0EsTUFBSSxDQUFDRCxNQUFMLEVBQWE7QUFDWCxXQUFPRCxHQUFQO0FBQ0Q7O0FBRUQsTUFBSUcsZ0JBQUo7QUFDQSxNQUFJRCxnQkFBSixFQUFzQjtBQUNwQkMsb0JBQWdCLEdBQUdELGdCQUFnQixDQUFDRCxNQUFELENBQW5DO0FBQ0QsR0FGRCxNQUVPLElBQUlWLEtBQUssQ0FBQ2EsaUJBQU4sQ0FBd0JILE1BQXhCLENBQUosRUFBcUM7QUFDMUNFLG9CQUFnQixHQUFHRixNQUFNLENBQUNJLFFBQVAsRUFBbkI7QUFDRCxHQUZNLE1BRUE7QUFDTCxRQUFJQyxLQUFLLEdBQUcsRUFBWjs7QUFFQWYsU0FBSyxDQUFDZ0IsT0FBTixDQUFjTixNQUFkLEVBQXNCLFNBQVNPLFNBQVQsQ0FBbUJkLEdBQW5CLEVBQXdCZSxHQUF4QixFQUE2QjtBQUNqRCxVQUFJZixHQUFHLEtBQUssSUFBUixJQUFnQixPQUFPQSxHQUFQLEtBQWUsV0FBbkMsRUFBZ0Q7QUFDOUM7QUFDRDs7QUFFRCxVQUFJSCxLQUFLLENBQUNtQixPQUFOLENBQWNoQixHQUFkLENBQUosRUFBd0I7QUFDdEJlLFdBQUcsR0FBR0EsR0FBRyxHQUFHLElBQVo7QUFDRCxPQUZELE1BRU87QUFDTGYsV0FBRyxHQUFHLENBQUNBLEdBQUQsQ0FBTjtBQUNEOztBQUVESCxXQUFLLENBQUNnQixPQUFOLENBQWNiLEdBQWQsRUFBbUIsU0FBU2lCLFVBQVQsQ0FBb0JDLENBQXBCLEVBQXVCO0FBQ3hDLFlBQUlyQixLQUFLLENBQUNzQixNQUFOLENBQWFELENBQWIsQ0FBSixFQUFxQjtBQUNuQkEsV0FBQyxHQUFHQSxDQUFDLENBQUNFLFdBQUYsRUFBSjtBQUNELFNBRkQsTUFFTyxJQUFJdkIsS0FBSyxDQUFDd0IsUUFBTixDQUFlSCxDQUFmLENBQUosRUFBdUI7QUFDNUJBLFdBQUMsR0FBR0ksSUFBSSxDQUFDQyxTQUFMLENBQWVMLENBQWYsQ0FBSjtBQUNEO0FBQ0ROLGFBQUssQ0FBQ1ksSUFBTixDQUFXekIsTUFBTSxDQUFDZ0IsR0FBRCxDQUFOLEdBQWMsR0FBZCxHQUFvQmhCLE1BQU0sQ0FBQ21CLENBQUQsQ0FBckM7QUFDRCxPQVBEO0FBUUQsS0FuQkQ7O0FBcUJBVCxvQkFBZ0IsR0FBR0csS0FBSyxDQUFDYSxJQUFOLENBQVcsR0FBWCxDQUFuQjtBQUNEOztBQUVELE1BQUloQixnQkFBSixFQUFzQjtBQUNwQkgsT0FBRyxJQUFJLENBQUNBLEdBQUcsQ0FBQ29CLE9BQUosQ0FBWSxHQUFaLE1BQXFCLENBQUMsQ0FBdEIsR0FBMEIsR0FBMUIsR0FBZ0MsR0FBakMsSUFBd0NqQixnQkFBL0M7QUFDRDs7QUFFRCxTQUFPSCxHQUFQO0FBQ0QsQ0EzQ0QiLCJmaWxlIjoiNDAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///40\n");

/***/ }),

/***/ 402:
/*!************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/utils/customs.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni, __f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _hydrogenJsSdk = _interopRequireDefault(__webpack_require__(/*! hydrogen-js-sdk */ 14));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var _default =\n{\n  //得到客户列表\n  get_customList: function get_customList(disabled, search_text) {\n    return new Promise(function (resolve, reject) {\n      var userid = uni.getStorageSync(\"uid\");\n      var query = _hydrogenJsSdk.default.Query(\"customs\");\n      query.order(\"num\");\n      query.equalTo(\"parent\", \"==\", userid);\n      query.equalTo(\"disabled\", \"==\", disabled);\n      if (search_text) {\n        query.equalTo(\"name\", \"==\", {\n          \"$regex\": \"\" + search_text + \".*\" });\n\n\n      }\n      query.find().then(function (res) {\n        resolve(res);\n      });\n    });\n\n  },\n\n  //产品详情里面得到客户统计\n  get_customCount: function get_customCount() {\n    return new Promise(function (resolve, reject) {\n      var userid = uni.getStorageSync(\"uid\");\n      var query = _hydrogenJsSdk.default.Query(\"customs\");\n      query.equalTo(\"parent\", \"==\", userid);\n      query.find().then(function (res) {\n\n        var custom = res;var _iteratorNormalCompletion = true;var _didIteratorError = false;var _iteratorError = undefined;try {var _loop = function _loop() {var\n            item = _step.value;\n            var query = _hydrogenJsSdk.default.Query(\"Bills\");\n            query.equalTo(\"type\", '==', -1);\n            query.equalTo(\"custom\", '==', item.objectId);\n            query.find().then(function (res) {\n              //console.log(res)\n              item.relations = res;\n            });};for (var _iterator = custom[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {_loop();\n          }} catch (err) {_didIteratorError = true;_iteratorError = err;} finally {try {if (!_iteratorNormalCompletion && _iterator.return != null) {_iterator.return();}} finally {if (_didIteratorError) {throw _iteratorError;}}}\n\n        resolve(custom);\n\n      });\n    });\n  },\n\n\n  //增加数据操作\n  add_custom: function add_custom(params) {\n\n    console.log(__f__(params, \" at utils\\\\customs.js:53\"));\n    var userid = JSON.parse(localStorage.getItem('bmob')).objectId;\n\n    return new Promise(function (resolve, reject) {\n      var pointer = _hydrogenJsSdk.default.Pointer('_User');\n      var poiID = pointer.set(userid);\n\n      if (params.objectId) {//修改操作\n        var query = _hydrogenJsSdk.default.Query('customs');\n        query.set(\"custom_name\", params.custom_name);\n        query.set(\"debt\", Number(params.debt));\n        query.set(\"custom_address\", params.custom_address);\n        query.set(\"custom_phone\", params.custom_phone);\n        query.set(\"parent\", poiID);\n        query.set(\"disabled\", !params.disabled);\n        query.set(\"id\", params.objectId);\n        query.save().then(function (res) {\n          resolve(res);\n        }).catch(function (err) {\n          console.log(__f__(err, \" at utils\\\\customs.js:72\"));\n\n        });\n      } else {\n\n        var _query = _hydrogenJsSdk.default.Query(\"customs\");\n        _query.equalTo(\"parent\", \"==\", userid);\n        _query.equalTo(\"name\", \"==\", params.custom_name);\n        _query.find().then(function (res) {\n          console.log(__f__(res, \" at utils\\\\customs.js:81\"));\n          if (res.length == 0) {\n            var _query2 = _hydrogenJsSdk.default.Query('customs');\n            _query2.set(\"custom_name\", params.custom_name);\n            _query2.set(\"debt\", Number(params.debt));\n            _query2.set(\"custom_address\", params.custom_address);\n            _query2.set(\"custom_phone\", params.custom_phone);\n            _query2.set(\"have_out\", 0);\n            _query2.set(\"disabled\", !params.disabled);\n            _query2.set(\"parent\", poiID);\n            _query2.save().then(function (res) {\n              resolve(res);\n            }).catch(function (err) {\n              console.log(__f__(err, \" at utils\\\\customs.js:94\"));\n            });\n          } else {\n            resolve(false);\n          }\n\n        });\n\n      }\n\n    });\n  },\n\n  //删除门店\n  delete_custom: function delete_custom(id) {\n    return new Promise(function (resolve, reject) {\n      var query = _hydrogenJsSdk.default.Query(\"customs\");\n      query.destroy(id).then(function (res) {\n        resolve(res);\n      }).catch(function (err) {\n        console.log(__f__(err, \" at utils\\\\customs.js:114\"));\n      });\n    });\n\n  },\n\n  //得到客户详情\n  custom_detail: function custom_detail(id) {\n    return new Promise(function (resolve, reject) {\n      var query = _hydrogenJsSdk.default.Query('customs');\n      query.get(id).then(function (res) {\n        //console.log(res)\n        resolve(res);\n      }).catch(function (err) {\n        console.log(__f__(err, \" at utils\\\\customs.js:128\"));\n      });\n\n    });\n  },\n\n  //得到收款列表\n  get_moneyList: function get_moneyList(id) {\n    return new Promise(function (resolve, reject) {\n      var query = _hydrogenJsSdk.default.Query(\"debt_history\");\n      query.equalTo(\"custom\", \"==\", id);\n      query.include(\"operater\");\n      query.find().then(function (res) {\n        console.log(__f__(res, \" at utils\\\\customs.js:141\"));\n        resolve(res);\n      });\n\n    });\n  } };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///402\n");

/***/ }),

/***/ 41:
/*!******************************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/axios/lib/helpers/parseHeaders.js ***!
  \******************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ 30);\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n'age', 'authorization', 'content-length', 'content-type', 'etag',\n'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n'referer', 'retry-after', 'user-agent'];\n\n\n/**\n                                          * Parse headers into an object\n                                          *\n                                          * ```\n                                          * Date: Wed, 27 Aug 2014 08:58:49 GMT\n                                          * Content-Type: application/json\n                                          * Connection: keep-alive\n                                          * Transfer-Encoding: chunked\n                                          * ```\n                                          *\n                                          * @param {String} headers Headers needing to be parsed\n                                          * @returns {Object} Headers parsed into an object\n                                          */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) {return parsed;}\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJpZ25vcmVEdXBsaWNhdGVPZiIsIm1vZHVsZSIsImV4cG9ydHMiLCJwYXJzZUhlYWRlcnMiLCJoZWFkZXJzIiwicGFyc2VkIiwia2V5IiwidmFsIiwiaSIsImZvckVhY2giLCJzcGxpdCIsInBhcnNlciIsImxpbmUiLCJpbmRleE9mIiwidHJpbSIsInN1YnN0ciIsInRvTG93ZXJDYXNlIiwiY29uY2F0Il0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxLQUFLLEdBQUdDLG1CQUFPLENBQUMsb0JBQUQsQ0FBbkI7O0FBRUE7QUFDQTtBQUNBLElBQUlDLGlCQUFpQixHQUFHO0FBQ3RCLEtBRHNCLEVBQ2YsZUFEZSxFQUNFLGdCQURGLEVBQ29CLGNBRHBCLEVBQ29DLE1BRHBDO0FBRXRCLFNBRnNCLEVBRVgsTUFGVyxFQUVILE1BRkcsRUFFSyxtQkFGTCxFQUUwQixxQkFGMUI7QUFHdEIsZUFIc0IsRUFHTCxVQUhLLEVBR08sY0FIUCxFQUd1QixxQkFIdkI7QUFJdEIsU0FKc0IsRUFJWCxhQUpXLEVBSUksWUFKSixDQUF4Qjs7O0FBT0E7Ozs7Ozs7Ozs7Ozs7QUFhQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFNBQVNDLFlBQVQsQ0FBc0JDLE9BQXRCLEVBQStCO0FBQzlDLE1BQUlDLE1BQU0sR0FBRyxFQUFiO0FBQ0EsTUFBSUMsR0FBSjtBQUNBLE1BQUlDLEdBQUo7QUFDQSxNQUFJQyxDQUFKOztBQUVBLE1BQUksQ0FBQ0osT0FBTCxFQUFjLENBQUUsT0FBT0MsTUFBUCxDQUFnQjs7QUFFaENQLE9BQUssQ0FBQ1csT0FBTixDQUFjTCxPQUFPLENBQUNNLEtBQVIsQ0FBYyxJQUFkLENBQWQsRUFBbUMsU0FBU0MsTUFBVCxDQUFnQkMsSUFBaEIsRUFBc0I7QUFDdkRKLEtBQUMsR0FBR0ksSUFBSSxDQUFDQyxPQUFMLENBQWEsR0FBYixDQUFKO0FBQ0FQLE9BQUcsR0FBR1IsS0FBSyxDQUFDZ0IsSUFBTixDQUFXRixJQUFJLENBQUNHLE1BQUwsQ0FBWSxDQUFaLEVBQWVQLENBQWYsQ0FBWCxFQUE4QlEsV0FBOUIsRUFBTjtBQUNBVCxPQUFHLEdBQUdULEtBQUssQ0FBQ2dCLElBQU4sQ0FBV0YsSUFBSSxDQUFDRyxNQUFMLENBQVlQLENBQUMsR0FBRyxDQUFoQixDQUFYLENBQU47O0FBRUEsUUFBSUYsR0FBSixFQUFTO0FBQ1AsVUFBSUQsTUFBTSxDQUFDQyxHQUFELENBQU4sSUFBZU4saUJBQWlCLENBQUNhLE9BQWxCLENBQTBCUCxHQUExQixLQUFrQyxDQUFyRCxFQUF3RDtBQUN0RDtBQUNEO0FBQ0QsVUFBSUEsR0FBRyxLQUFLLFlBQVosRUFBMEI7QUFDeEJELGNBQU0sQ0FBQ0MsR0FBRCxDQUFOLEdBQWMsQ0FBQ0QsTUFBTSxDQUFDQyxHQUFELENBQU4sR0FBY0QsTUFBTSxDQUFDQyxHQUFELENBQXBCLEdBQTRCLEVBQTdCLEVBQWlDVyxNQUFqQyxDQUF3QyxDQUFDVixHQUFELENBQXhDLENBQWQ7QUFDRCxPQUZELE1BRU87QUFDTEYsY0FBTSxDQUFDQyxHQUFELENBQU4sR0FBY0QsTUFBTSxDQUFDQyxHQUFELENBQU4sR0FBY0QsTUFBTSxDQUFDQyxHQUFELENBQU4sR0FBYyxJQUFkLEdBQXFCQyxHQUFuQyxHQUF5Q0EsR0FBdkQ7QUFDRDtBQUNGO0FBQ0YsR0FmRDs7QUFpQkEsU0FBT0YsTUFBUDtBQUNELENBMUJEIiwiZmlsZSI6IjQxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///41\n");

/***/ }),

/***/ 419:
/*!**************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/utils/producers.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _hydrogenJsSdk = _interopRequireDefault(__webpack_require__(/*! hydrogen-js-sdk */ 14));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var _default =\n{\n  //得到门店列表\n\n  get_producerList: function get_producerList(disabled, search_text) {\n    return new Promise(function (resolve, reject) {\n      var userid = JSON.parse(localStorage.getItem('bmob')).objectId;\n      var query = _hydrogenJsSdk.default.Query(\"producers\");\n      query.order(\"num\");\n      query.equalTo(\"parent\", \"==\", userid);\n      query.equalTo(\"disabled\", \"==\", disabled);\n      if (search_text) {\n        query.equalTo(\"name\", \"==\", {\n          \"$regex\": \"\" + search_text + \".*\" });\n\n\n      }\n      query.find().then(function (res) {\n        localStorage.setItem(\"shops\", JSON.stringify(res));\n        resolve(res);\n      });\n    });\n\n  },\n\n\n  //增加数据操作\n  add_producer: function add_producer(params) {\n\n    console.log(__f__(params, \" at utils\\\\producers.js:30\"));\n    var userid = JSON.parse(localStorage.getItem('bmob')).objectId;\n\n    return new Promise(function (resolve, reject) {\n      var pointer = _hydrogenJsSdk.default.Pointer('_User');\n      var poiID = pointer.set(userid);\n\n      if (params.objectId) {//修改操作\n        var query = _hydrogenJsSdk.default.Query('producers');\n        query.set(\"producer_name\", params.producer_name);\n        query.set(\"debt\", Number(params.debt));\n        query.set(\"producer_address\", params.producer_address);\n        query.set(\"producer_phone\", params.producer_phone);\n        query.set(\"parent\", poiID);\n        query.set(\"disabled\", !params.disabled);\n        query.set(\"id\", params.objectId);\n        query.save().then(function (res) {\n          resolve(res);\n        }).catch(function (err) {\n          console.log(__f__(err, \" at utils\\\\producers.js:49\"));\n\n        });\n      } else {\n\n        var _query = _hydrogenJsSdk.default.Query(\"producers\");\n        _query.equalTo(\"parent\", \"==\", userid);\n        _query.equalTo(\"name\", \"==\", params.producer_name);\n        _query.find().then(function (res) {\n          console.log(__f__(res, \" at utils\\\\producers.js:58\"));\n          if (res.length == 0) {\n            var _query2 = _hydrogenJsSdk.default.Query('producers');\n            _query2.set(\"producer_name\", params.producer_name);\n            _query2.set(\"debt\", Number(params.debt));\n            _query2.set(\"producer_address\", params.producer_address);\n            _query2.set(\"producer_phone\", params.producer_phone);\n            _query2.set(\"have_out\", 0);\n            _query2.set(\"disabled\", !params.disabled);\n            _query2.set(\"parent\", poiID);\n            _query2.save().then(function (res) {\n              resolve(res);\n            }).catch(function (err) {\n              console.log(__f__(err, \" at utils\\\\producers.js:71\"));\n            });\n          } else {\n            resolve(false);\n          }\n\n        });\n\n      }\n\n    });\n  },\n\n  //删除门店\n  delete_producer: function delete_producer(id) {\n    return new Promise(function (resolve, reject) {\n      var query = _hydrogenJsSdk.default.Query(\"producers\");\n      query.destroy(id).then(function (res) {\n        resolve(res);\n      }).catch(function (err) {\n        console.log(__f__(err, \" at utils\\\\producers.js:91\"));\n      });\n    });\n\n  },\n\n  //得到供货商详情\n  producer_detail: function producer_detail(id) {\n    return new Promise(function (resolve, reject) {\n      var query = _hydrogenJsSdk.default.Query('producers');\n      query.get(id).then(function (res) {\n        //console.log(res)\n        resolve(res);\n      }).catch(function (err) {\n        console.log(__f__(err, \" at utils\\\\producers.js:105\"));\n      });\n\n    });\n  },\n\n  //得到还款列表\n  get_moneyList: function get_moneyList(id) {\n    return new Promise(function (resolve, reject) {\n      var query = _hydrogenJsSdk.default.Query(\"debt_history\");\n      query.equalTo(\"producer\", \"==\", id);\n      query.include(\"operater\");\n      query.find().then(function (res) {\n        console.log(__f__(res, \" at utils\\\\producers.js:118\"));\n        resolve(res);\n      });\n\n    });\n  } };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///419\n");

/***/ }),

/***/ 42:
/*!*********************************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/axios/lib/helpers/isURLSameOrigin.js ***!
  \*********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ 30);\n\nmodule.exports =\nutils.isStandardBrowserEnv() ?\n\n// Standard browser envs have full support of the APIs needed to test\n// whether the request URL is of the same origin as current location.\nfunction standardBrowserEnv() {\n  var msie = /(msie|trident)/i.test(navigator.userAgent);\n  var urlParsingNode = document.createElement('a');\n  var originURL;\n\n  /**\n                 * Parse a URL to discover it's components\n                 *\n                 * @param {String} url The URL to be parsed\n                 * @returns {Object}\n                 */\n  function resolveURL(url) {\n    var href = url;\n\n    if (msie) {\n      // IE needs attribute set twice to normalize properties\n      urlParsingNode.setAttribute('href', href);\n      href = urlParsingNode.href;\n    }\n\n    urlParsingNode.setAttribute('href', href);\n\n    // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n    return {\n      href: urlParsingNode.href,\n      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n      host: urlParsingNode.host,\n      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n      hostname: urlParsingNode.hostname,\n      port: urlParsingNode.port,\n      pathname: urlParsingNode.pathname.charAt(0) === '/' ?\n      urlParsingNode.pathname :\n      '/' + urlParsingNode.pathname };\n\n  }\n\n  originURL = resolveURL(window.location.href);\n\n  /**\n                                                * Determine if a URL shares the same origin as the current location\n                                                *\n                                                * @param {String} requestURL The URL to test\n                                                * @returns {boolean} True if URL shares the same origin, otherwise false\n                                                */\n  return function isURLSameOrigin(requestURL) {\n    var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;\n    return parsed.protocol === originURL.protocol &&\n    parsed.host === originURL.host;\n  };\n}() :\n\n// Non standard browser envs (web workers, react-native) lack needed support.\nfunction nonStandardBrowserEnv() {\n  return function isURLSameOrigin() {\n    return true;\n  };\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJzdGFuZGFyZEJyb3dzZXJFbnYiLCJtc2llIiwidGVzdCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInVybFBhcnNpbmdOb2RlIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwib3JpZ2luVVJMIiwicmVzb2x2ZVVSTCIsInVybCIsImhyZWYiLCJzZXRBdHRyaWJ1dGUiLCJwcm90b2NvbCIsInJlcGxhY2UiLCJob3N0Iiwic2VhcmNoIiwiaGFzaCIsImhvc3RuYW1lIiwicG9ydCIsInBhdGhuYW1lIiwiY2hhckF0Iiwid2luZG93IiwibG9jYXRpb24iLCJpc1VSTFNhbWVPcmlnaW4iLCJyZXF1ZXN0VVJMIiwicGFyc2VkIiwiaXNTdHJpbmciLCJub25TdGFuZGFyZEJyb3dzZXJFbnYiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLEtBQUssR0FBR0MsbUJBQU8sQ0FBQyxvQkFBRCxDQUFuQjs7QUFFQUMsTUFBTSxDQUFDQyxPQUFQO0FBQ0VILEtBQUssQ0FBQ0ksb0JBQU47O0FBRUE7QUFDQTtBQUNDLFNBQVNDLGtCQUFULEdBQThCO0FBQzdCLE1BQUlDLElBQUksR0FBRyxrQkFBa0JDLElBQWxCLENBQXVCQyxTQUFTLENBQUNDLFNBQWpDLENBQVg7QUFDQSxNQUFJQyxjQUFjLEdBQUdDLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixHQUF2QixDQUFyQjtBQUNBLE1BQUlDLFNBQUo7O0FBRUE7Ozs7OztBQU1BLFdBQVNDLFVBQVQsQ0FBb0JDLEdBQXBCLEVBQXlCO0FBQ3ZCLFFBQUlDLElBQUksR0FBR0QsR0FBWDs7QUFFQSxRQUFJVCxJQUFKLEVBQVU7QUFDUjtBQUNBSSxvQkFBYyxDQUFDTyxZQUFmLENBQTRCLE1BQTVCLEVBQW9DRCxJQUFwQztBQUNBQSxVQUFJLEdBQUdOLGNBQWMsQ0FBQ00sSUFBdEI7QUFDRDs7QUFFRE4sa0JBQWMsQ0FBQ08sWUFBZixDQUE0QixNQUE1QixFQUFvQ0QsSUFBcEM7O0FBRUE7QUFDQSxXQUFPO0FBQ0xBLFVBQUksRUFBRU4sY0FBYyxDQUFDTSxJQURoQjtBQUVMRSxjQUFRLEVBQUVSLGNBQWMsQ0FBQ1EsUUFBZixHQUEwQlIsY0FBYyxDQUFDUSxRQUFmLENBQXdCQyxPQUF4QixDQUFnQyxJQUFoQyxFQUFzQyxFQUF0QyxDQUExQixHQUFzRSxFQUYzRTtBQUdMQyxVQUFJLEVBQUVWLGNBQWMsQ0FBQ1UsSUFIaEI7QUFJTEMsWUFBTSxFQUFFWCxjQUFjLENBQUNXLE1BQWYsR0FBd0JYLGNBQWMsQ0FBQ1csTUFBZixDQUFzQkYsT0FBdEIsQ0FBOEIsS0FBOUIsRUFBcUMsRUFBckMsQ0FBeEIsR0FBbUUsRUFKdEU7QUFLTEcsVUFBSSxFQUFFWixjQUFjLENBQUNZLElBQWYsR0FBc0JaLGNBQWMsQ0FBQ1ksSUFBZixDQUFvQkgsT0FBcEIsQ0FBNEIsSUFBNUIsRUFBa0MsRUFBbEMsQ0FBdEIsR0FBOEQsRUFML0Q7QUFNTEksY0FBUSxFQUFFYixjQUFjLENBQUNhLFFBTnBCO0FBT0xDLFVBQUksRUFBRWQsY0FBYyxDQUFDYyxJQVBoQjtBQVFMQyxjQUFRLEVBQUdmLGNBQWMsQ0FBQ2UsUUFBZixDQUF3QkMsTUFBeEIsQ0FBK0IsQ0FBL0IsTUFBc0MsR0FBdkM7QUFDQWhCLG9CQUFjLENBQUNlLFFBRGY7QUFFQSxZQUFNZixjQUFjLENBQUNlLFFBVjFCLEVBQVA7O0FBWUQ7O0FBRURaLFdBQVMsR0FBR0MsVUFBVSxDQUFDYSxNQUFNLENBQUNDLFFBQVAsQ0FBZ0JaLElBQWpCLENBQXRCOztBQUVBOzs7Ozs7QUFNQSxTQUFPLFNBQVNhLGVBQVQsQ0FBeUJDLFVBQXpCLEVBQXFDO0FBQzFDLFFBQUlDLE1BQU0sR0FBSS9CLEtBQUssQ0FBQ2dDLFFBQU4sQ0FBZUYsVUFBZixDQUFELEdBQStCaEIsVUFBVSxDQUFDZ0IsVUFBRCxDQUF6QyxHQUF3REEsVUFBckU7QUFDQSxXQUFRQyxNQUFNLENBQUNiLFFBQVAsS0FBb0JMLFNBQVMsQ0FBQ0ssUUFBOUI7QUFDRmEsVUFBTSxDQUFDWCxJQUFQLEtBQWdCUCxTQUFTLENBQUNPLElBRGhDO0FBRUQsR0FKRDtBQUtELENBbERELEVBSkE7O0FBd0RBO0FBQ0MsU0FBU2EscUJBQVQsR0FBaUM7QUFDaEMsU0FBTyxTQUFTSixlQUFULEdBQTJCO0FBQ2hDLFdBQU8sSUFBUDtBQUNELEdBRkQ7QUFHRCxDQUpELEVBMURGIiwiZmlsZSI6IjQyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgIH1cblxuICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgfSkoKVxuKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///42\n");

/***/ }),

/***/ 43:
/*!**********************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/axios/lib/helpers/btoa.js ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js\n\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nfunction E() {\n  this.message = 'String contains an invalid character';\n}\nE.prototype = new Error();\nE.prototype.code = 5;\nE.prototype.name = 'InvalidCharacterError';\n\nfunction btoa(input) {\n  var str = String(input);\n  var output = '';\n  for (\n  // initialize result and counter\n  var block, charCode, idx = 0, map = chars;\n  // if the next str index does not exist:\n  //   change the mapping table to \"=\"\n  //   check if d has no fractional digits\n  str.charAt(idx | 0) || (map = '=', idx % 1);\n  // \"8 - idx % 1 * 8\" generates the sequence 2, 4, 6, 8\n  output += map.charAt(63 & block >> 8 - idx % 1 * 8))\n  {\n    charCode = str.charCodeAt(idx += 3 / 4);\n    if (charCode > 0xFF) {\n      throw new E();\n    }\n    block = block << 8 | charCode;\n  }\n  return output;\n}\n\nmodule.exports = btoa;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2F4aW9zL2xpYi9oZWxwZXJzL2J0b2EuanMiXSwibmFtZXMiOlsiY2hhcnMiLCJFIiwibWVzc2FnZSIsInByb3RvdHlwZSIsIkVycm9yIiwiY29kZSIsIm5hbWUiLCJidG9hIiwiaW5wdXQiLCJzdHIiLCJTdHJpbmciLCJvdXRwdXQiLCJibG9jayIsImNoYXJDb2RlIiwiaWR4IiwibWFwIiwiY2hhckF0IiwiY2hhckNvZGVBdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViOztBQUVBLElBQUlBLEtBQUssR0FBRyxtRUFBWjs7QUFFQSxTQUFTQyxDQUFULEdBQWE7QUFDWCxPQUFLQyxPQUFMLEdBQWUsc0NBQWY7QUFDRDtBQUNERCxDQUFDLENBQUNFLFNBQUYsR0FBYyxJQUFJQyxLQUFKLEVBQWQ7QUFDQUgsQ0FBQyxDQUFDRSxTQUFGLENBQVlFLElBQVosR0FBbUIsQ0FBbkI7QUFDQUosQ0FBQyxDQUFDRSxTQUFGLENBQVlHLElBQVosR0FBbUIsdUJBQW5COztBQUVBLFNBQVNDLElBQVQsQ0FBY0MsS0FBZCxFQUFxQjtBQUNuQixNQUFJQyxHQUFHLEdBQUdDLE1BQU0sQ0FBQ0YsS0FBRCxDQUFoQjtBQUNBLE1BQUlHLE1BQU0sR0FBRyxFQUFiO0FBQ0E7QUFDRTtBQUNBLE1BQUlDLEtBQUosRUFBV0MsUUFBWCxFQUFxQkMsR0FBRyxHQUFHLENBQTNCLEVBQThCQyxHQUFHLEdBQUdmLEtBRnRDO0FBR0U7QUFDQTtBQUNBO0FBQ0FTLEtBQUcsQ0FBQ08sTUFBSixDQUFXRixHQUFHLEdBQUcsQ0FBakIsTUFBd0JDLEdBQUcsR0FBRyxHQUFOLEVBQVdELEdBQUcsR0FBRyxDQUF6QyxDQU5GO0FBT0U7QUFDQUgsUUFBTSxJQUFJSSxHQUFHLENBQUNDLE1BQUosQ0FBVyxLQUFLSixLQUFLLElBQUksSUFBSUUsR0FBRyxHQUFHLENBQU4sR0FBVSxDQUF2QyxDQVJaO0FBU0U7QUFDQUQsWUFBUSxHQUFHSixHQUFHLENBQUNRLFVBQUosQ0FBZUgsR0FBRyxJQUFJLElBQUksQ0FBMUIsQ0FBWDtBQUNBLFFBQUlELFFBQVEsR0FBRyxJQUFmLEVBQXFCO0FBQ25CLFlBQU0sSUFBSVosQ0FBSixFQUFOO0FBQ0Q7QUFDRFcsU0FBSyxHQUFHQSxLQUFLLElBQUksQ0FBVCxHQUFhQyxRQUFyQjtBQUNEO0FBQ0QsU0FBT0YsTUFBUDtBQUNEOztBQUVETyxNQUFNLENBQUNDLE9BQVAsR0FBaUJaLElBQWpCIiwiZmlsZSI6IjQzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBidG9hIHBvbHlmaWxsIGZvciBJRTwxMCBjb3VydGVzeSBodHRwczovL2dpdGh1Yi5jb20vZGF2aWRjaGFtYmVycy9CYXNlNjQuanNcblxudmFyIGNoYXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89JztcblxuZnVuY3Rpb24gRSgpIHtcbiAgdGhpcy5tZXNzYWdlID0gJ1N0cmluZyBjb250YWlucyBhbiBpbnZhbGlkIGNoYXJhY3Rlcic7XG59XG5FLnByb3RvdHlwZSA9IG5ldyBFcnJvcjtcbkUucHJvdG90eXBlLmNvZGUgPSA1O1xuRS5wcm90b3R5cGUubmFtZSA9ICdJbnZhbGlkQ2hhcmFjdGVyRXJyb3InO1xuXG5mdW5jdGlvbiBidG9hKGlucHV0KSB7XG4gIHZhciBzdHIgPSBTdHJpbmcoaW5wdXQpO1xuICB2YXIgb3V0cHV0ID0gJyc7XG4gIGZvciAoXG4gICAgLy8gaW5pdGlhbGl6ZSByZXN1bHQgYW5kIGNvdW50ZXJcbiAgICB2YXIgYmxvY2ssIGNoYXJDb2RlLCBpZHggPSAwLCBtYXAgPSBjaGFycztcbiAgICAvLyBpZiB0aGUgbmV4dCBzdHIgaW5kZXggZG9lcyBub3QgZXhpc3Q6XG4gICAgLy8gICBjaGFuZ2UgdGhlIG1hcHBpbmcgdGFibGUgdG8gXCI9XCJcbiAgICAvLyAgIGNoZWNrIGlmIGQgaGFzIG5vIGZyYWN0aW9uYWwgZGlnaXRzXG4gICAgc3RyLmNoYXJBdChpZHggfCAwKSB8fCAobWFwID0gJz0nLCBpZHggJSAxKTtcbiAgICAvLyBcIjggLSBpZHggJSAxICogOFwiIGdlbmVyYXRlcyB0aGUgc2VxdWVuY2UgMiwgNCwgNiwgOFxuICAgIG91dHB1dCArPSBtYXAuY2hhckF0KDYzICYgYmxvY2sgPj4gOCAtIGlkeCAlIDEgKiA4KVxuICApIHtcbiAgICBjaGFyQ29kZSA9IHN0ci5jaGFyQ29kZUF0KGlkeCArPSAzIC8gNCk7XG4gICAgaWYgKGNoYXJDb2RlID4gMHhGRikge1xuICAgICAgdGhyb3cgbmV3IEUoKTtcbiAgICB9XG4gICAgYmxvY2sgPSBibG9jayA8PCA4IHwgY2hhckNvZGU7XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBidG9hO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///43\n");

/***/ }),

/***/ 44:
/*!*************************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/axios/lib/helpers/cookies.js ***!
  \*************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ 30);\n\nmodule.exports =\nutils.isStandardBrowserEnv() ?\n\n// Standard browser envs support document.cookie\nfunction standardBrowserEnv() {\n  return {\n    write: function write(name, value, expires, path, domain, secure) {\n      var cookie = [];\n      cookie.push(name + '=' + encodeURIComponent(value));\n\n      if (utils.isNumber(expires)) {\n        cookie.push('expires=' + new Date(expires).toGMTString());\n      }\n\n      if (utils.isString(path)) {\n        cookie.push('path=' + path);\n      }\n\n      if (utils.isString(domain)) {\n        cookie.push('domain=' + domain);\n      }\n\n      if (secure === true) {\n        cookie.push('secure');\n      }\n\n      document.cookie = cookie.join('; ');\n    },\n\n    read: function read(name) {\n      var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n      return match ? decodeURIComponent(match[3]) : null;\n    },\n\n    remove: function remove(name) {\n      this.write(name, '', Date.now() - 86400000);\n    } };\n\n}() :\n\n// Non standard browser env (web workers, react-native) lack needed support.\nfunction nonStandardBrowserEnv() {\n  return {\n    write: function write() {},\n    read: function read() {return null;},\n    remove: function remove() {} };\n\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImlzU3RhbmRhcmRCcm93c2VyRW52Iiwic3RhbmRhcmRCcm93c2VyRW52Iiwid3JpdGUiLCJuYW1lIiwidmFsdWUiLCJleHBpcmVzIiwicGF0aCIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsInB1c2giLCJlbmNvZGVVUklDb21wb25lbnQiLCJpc051bWJlciIsIkRhdGUiLCJ0b0dNVFN0cmluZyIsImlzU3RyaW5nIiwiZG9jdW1lbnQiLCJqb2luIiwicmVhZCIsIm1hdGNoIiwiUmVnRXhwIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicmVtb3ZlIiwibm93Iiwibm9uU3RhbmRhcmRCcm93c2VyRW52Il0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxLQUFLLEdBQUdDLG1CQUFPLENBQUMsb0JBQUQsQ0FBbkI7O0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUDtBQUNFSCxLQUFLLENBQUNJLG9CQUFOOztBQUVBO0FBQ0MsU0FBU0Msa0JBQVQsR0FBOEI7QUFDN0IsU0FBTztBQUNMQyxTQUFLLEVBQUUsU0FBU0EsS0FBVCxDQUFlQyxJQUFmLEVBQXFCQyxLQUFyQixFQUE0QkMsT0FBNUIsRUFBcUNDLElBQXJDLEVBQTJDQyxNQUEzQyxFQUFtREMsTUFBbkQsRUFBMkQ7QUFDaEUsVUFBSUMsTUFBTSxHQUFHLEVBQWI7QUFDQUEsWUFBTSxDQUFDQyxJQUFQLENBQVlQLElBQUksR0FBRyxHQUFQLEdBQWFRLGtCQUFrQixDQUFDUCxLQUFELENBQTNDOztBQUVBLFVBQUlSLEtBQUssQ0FBQ2dCLFFBQU4sQ0FBZVAsT0FBZixDQUFKLEVBQTZCO0FBQzNCSSxjQUFNLENBQUNDLElBQVAsQ0FBWSxhQUFhLElBQUlHLElBQUosQ0FBU1IsT0FBVCxFQUFrQlMsV0FBbEIsRUFBekI7QUFDRDs7QUFFRCxVQUFJbEIsS0FBSyxDQUFDbUIsUUFBTixDQUFlVCxJQUFmLENBQUosRUFBMEI7QUFDeEJHLGNBQU0sQ0FBQ0MsSUFBUCxDQUFZLFVBQVVKLElBQXRCO0FBQ0Q7O0FBRUQsVUFBSVYsS0FBSyxDQUFDbUIsUUFBTixDQUFlUixNQUFmLENBQUosRUFBNEI7QUFDMUJFLGNBQU0sQ0FBQ0MsSUFBUCxDQUFZLFlBQVlILE1BQXhCO0FBQ0Q7O0FBRUQsVUFBSUMsTUFBTSxLQUFLLElBQWYsRUFBcUI7QUFDbkJDLGNBQU0sQ0FBQ0MsSUFBUCxDQUFZLFFBQVo7QUFDRDs7QUFFRE0sY0FBUSxDQUFDUCxNQUFULEdBQWtCQSxNQUFNLENBQUNRLElBQVAsQ0FBWSxJQUFaLENBQWxCO0FBQ0QsS0F0Qkk7O0FBd0JMQyxRQUFJLEVBQUUsU0FBU0EsSUFBVCxDQUFjZixJQUFkLEVBQW9CO0FBQ3hCLFVBQUlnQixLQUFLLEdBQUdILFFBQVEsQ0FBQ1AsTUFBVCxDQUFnQlUsS0FBaEIsQ0FBc0IsSUFBSUMsTUFBSixDQUFXLGVBQWVqQixJQUFmLEdBQXNCLFdBQWpDLENBQXRCLENBQVo7QUFDQSxhQUFRZ0IsS0FBSyxHQUFHRSxrQkFBa0IsQ0FBQ0YsS0FBSyxDQUFDLENBQUQsQ0FBTixDQUFyQixHQUFrQyxJQUEvQztBQUNELEtBM0JJOztBQTZCTEcsVUFBTSxFQUFFLFNBQVNBLE1BQVQsQ0FBZ0JuQixJQUFoQixFQUFzQjtBQUM1QixXQUFLRCxLQUFMLENBQVdDLElBQVgsRUFBaUIsRUFBakIsRUFBcUJVLElBQUksQ0FBQ1UsR0FBTCxLQUFhLFFBQWxDO0FBQ0QsS0EvQkksRUFBUDs7QUFpQ0QsQ0FsQ0QsRUFIQTs7QUF1Q0E7QUFDQyxTQUFTQyxxQkFBVCxHQUFpQztBQUNoQyxTQUFPO0FBQ0x0QixTQUFLLEVBQUUsU0FBU0EsS0FBVCxHQUFpQixDQUFFLENBRHJCO0FBRUxnQixRQUFJLEVBQUUsU0FBU0EsSUFBVCxHQUFnQixDQUFFLE9BQU8sSUFBUCxDQUFjLENBRmpDO0FBR0xJLFVBQU0sRUFBRSxTQUFTQSxNQUFULEdBQWtCLENBQUUsQ0FIdkIsRUFBUDs7QUFLRCxDQU5ELEVBekNGIiwiZmlsZSI6IjQ0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICB9LFxuXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgIH1cbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfSkoKVxuKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///44\n");

/***/ }),

/***/ 45:
/*!*********************************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/axios/lib/core/InterceptorManager.js ***!
  \*********************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ 30);\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n   * Add a new interceptor to the stack\n   *\n   * @param {Function} fulfilled The function to handle `then` for a `Promise`\n   * @param {Function} rejected The function to handle `reject` for a `Promise`\n   *\n   * @return {Number} An ID used to remove interceptor later\n   */\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected });\n\n  return this.handlers.length - 1;\n};\n\n/**\n    * Remove an interceptor from the stack\n    *\n    * @param {Number} id The ID that was returned by `use`\n    */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n    * Iterate over all the registered interceptors\n    *\n    * This method is particularly useful for skipping over any\n    * interceptors that may have become `null` calling `eject`.\n    *\n    * @param {Function} fn The function to call for each interceptor\n    */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJoYW5kbGVycyIsInByb3RvdHlwZSIsInVzZSIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwicHVzaCIsImxlbmd0aCIsImVqZWN0IiwiaWQiLCJmb3JFYWNoIiwiZm4iLCJmb3JFYWNoSGFuZGxlciIsImgiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxLQUFLLEdBQUdDLG1CQUFPLENBQUMsb0JBQUQsQ0FBbkI7O0FBRUEsU0FBU0Msa0JBQVQsR0FBOEI7QUFDNUIsT0FBS0MsUUFBTCxHQUFnQixFQUFoQjtBQUNEOztBQUVEOzs7Ozs7OztBQVFBRCxrQkFBa0IsQ0FBQ0UsU0FBbkIsQ0FBNkJDLEdBQTdCLEdBQW1DLFNBQVNBLEdBQVQsQ0FBYUMsU0FBYixFQUF3QkMsUUFBeEIsRUFBa0M7QUFDbkUsT0FBS0osUUFBTCxDQUFjSyxJQUFkLENBQW1CO0FBQ2pCRixhQUFTLEVBQUVBLFNBRE07QUFFakJDLFlBQVEsRUFBRUEsUUFGTyxFQUFuQjs7QUFJQSxTQUFPLEtBQUtKLFFBQUwsQ0FBY00sTUFBZCxHQUF1QixDQUE5QjtBQUNELENBTkQ7O0FBUUE7Ozs7O0FBS0FQLGtCQUFrQixDQUFDRSxTQUFuQixDQUE2Qk0sS0FBN0IsR0FBcUMsU0FBU0EsS0FBVCxDQUFlQyxFQUFmLEVBQW1CO0FBQ3RELE1BQUksS0FBS1IsUUFBTCxDQUFjUSxFQUFkLENBQUosRUFBdUI7QUFDckIsU0FBS1IsUUFBTCxDQUFjUSxFQUFkLElBQW9CLElBQXBCO0FBQ0Q7QUFDRixDQUpEOztBQU1BOzs7Ozs7OztBQVFBVCxrQkFBa0IsQ0FBQ0UsU0FBbkIsQ0FBNkJRLE9BQTdCLEdBQXVDLFNBQVNBLE9BQVQsQ0FBaUJDLEVBQWpCLEVBQXFCO0FBQzFEYixPQUFLLENBQUNZLE9BQU4sQ0FBYyxLQUFLVCxRQUFuQixFQUE2QixTQUFTVyxjQUFULENBQXdCQyxDQUF4QixFQUEyQjtBQUN0RCxRQUFJQSxDQUFDLEtBQUssSUFBVixFQUFnQjtBQUNkRixRQUFFLENBQUNFLENBQUQsQ0FBRjtBQUNEO0FBQ0YsR0FKRDtBQUtELENBTkQ7O0FBUUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmYsa0JBQWpCIiwiZmlsZSI6IjQ1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///45\n");

/***/ }),

/***/ 46:
/*!******************************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/axios/lib/core/dispatchRequest.js ***!
  \******************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ 30);\nvar transformData = __webpack_require__(/*! ./transformData */ 47);\nvar isCancel = __webpack_require__(/*! ../cancel/isCancel */ 48);\nvar defaults = __webpack_require__(/*! ../defaults */ 34);\nvar isAbsoluteURL = __webpack_require__(/*! ./../helpers/isAbsoluteURL */ 49);\nvar combineURLs = __webpack_require__(/*! ./../helpers/combineURLs */ 50);\n\n/**\n                                                        * Throws a `Cancel` if cancellation has been requested.\n                                                        */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n}\n\n/**\n   * Dispatch a request to the server using the configured adapter.\n   *\n   * @param {object} config The config that is to be used for the request\n   * @returns {Promise} The Promise to be fulfilled\n   */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Support baseURL config\n  if (config.baseURL && !isAbsoluteURL(config.url)) {\n    config.url = combineURLs(config.baseURL, config.url);\n  }\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData(\n  config.data,\n  config.headers,\n  config.transformRequest);\n\n\n  // Flatten headers\n  config.headers = utils.merge(\n  config.headers.common || {},\n  config.headers[config.method] || {},\n  config.headers || {});\n\n\n  utils.forEach(\n  ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n  function cleanHeaderConfig(method) {\n    delete config.headers[method];\n  });\n\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData(\n    response.data,\n    response.headers,\n    config.transformResponse);\n\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData(\n        reason.response.data,\n        reason.response.headers,\n        config.transformResponse);\n\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJ0cmFuc2Zvcm1EYXRhIiwiaXNDYW5jZWwiLCJkZWZhdWx0cyIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJjb25maWciLCJjYW5jZWxUb2tlbiIsInRocm93SWZSZXF1ZXN0ZWQiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiYmFzZVVSTCIsInVybCIsImhlYWRlcnMiLCJkYXRhIiwidHJhbnNmb3JtUmVxdWVzdCIsIm1lcmdlIiwiY29tbW9uIiwibWV0aG9kIiwiZm9yRWFjaCIsImNsZWFuSGVhZGVyQ29uZmlnIiwiYWRhcHRlciIsInRoZW4iLCJvbkFkYXB0ZXJSZXNvbHV0aW9uIiwicmVzcG9uc2UiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsIm9uQWRhcHRlclJlamVjdGlvbiIsInJlYXNvbiIsIlByb21pc2UiLCJyZWplY3QiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLEtBQUssR0FBR0MsbUJBQU8sQ0FBQyxvQkFBRCxDQUFuQjtBQUNBLElBQUlDLGFBQWEsR0FBR0QsbUJBQU8sQ0FBQyx5QkFBRCxDQUEzQjtBQUNBLElBQUlFLFFBQVEsR0FBR0YsbUJBQU8sQ0FBQyw0QkFBRCxDQUF0QjtBQUNBLElBQUlHLFFBQVEsR0FBR0gsbUJBQU8sQ0FBQyxxQkFBRCxDQUF0QjtBQUNBLElBQUlJLGFBQWEsR0FBR0osbUJBQU8sQ0FBQyxvQ0FBRCxDQUEzQjtBQUNBLElBQUlLLFdBQVcsR0FBR0wsbUJBQU8sQ0FBQyxrQ0FBRCxDQUF6Qjs7QUFFQTs7O0FBR0EsU0FBU00sNEJBQVQsQ0FBc0NDLE1BQXRDLEVBQThDO0FBQzVDLE1BQUlBLE1BQU0sQ0FBQ0MsV0FBWCxFQUF3QjtBQUN0QkQsVUFBTSxDQUFDQyxXQUFQLENBQW1CQyxnQkFBbkI7QUFDRDtBQUNGOztBQUVEOzs7Ozs7QUFNQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFNBQVNDLGVBQVQsQ0FBeUJMLE1BQXpCLEVBQWlDO0FBQ2hERCw4QkFBNEIsQ0FBQ0MsTUFBRCxDQUE1Qjs7QUFFQTtBQUNBLE1BQUlBLE1BQU0sQ0FBQ00sT0FBUCxJQUFrQixDQUFDVCxhQUFhLENBQUNHLE1BQU0sQ0FBQ08sR0FBUixDQUFwQyxFQUFrRDtBQUNoRFAsVUFBTSxDQUFDTyxHQUFQLEdBQWFULFdBQVcsQ0FBQ0UsTUFBTSxDQUFDTSxPQUFSLEVBQWlCTixNQUFNLENBQUNPLEdBQXhCLENBQXhCO0FBQ0Q7O0FBRUQ7QUFDQVAsUUFBTSxDQUFDUSxPQUFQLEdBQWlCUixNQUFNLENBQUNRLE9BQVAsSUFBa0IsRUFBbkM7O0FBRUE7QUFDQVIsUUFBTSxDQUFDUyxJQUFQLEdBQWNmLGFBQWE7QUFDekJNLFFBQU0sQ0FBQ1MsSUFEa0I7QUFFekJULFFBQU0sQ0FBQ1EsT0FGa0I7QUFHekJSLFFBQU0sQ0FBQ1UsZ0JBSGtCLENBQTNCOzs7QUFNQTtBQUNBVixRQUFNLENBQUNRLE9BQVAsR0FBaUJoQixLQUFLLENBQUNtQixLQUFOO0FBQ2ZYLFFBQU0sQ0FBQ1EsT0FBUCxDQUFlSSxNQUFmLElBQXlCLEVBRFY7QUFFZlosUUFBTSxDQUFDUSxPQUFQLENBQWVSLE1BQU0sQ0FBQ2EsTUFBdEIsS0FBaUMsRUFGbEI7QUFHZmIsUUFBTSxDQUFDUSxPQUFQLElBQWtCLEVBSEgsQ0FBakI7OztBQU1BaEIsT0FBSyxDQUFDc0IsT0FBTjtBQUNFLEdBQUMsUUFBRCxFQUFXLEtBQVgsRUFBa0IsTUFBbEIsRUFBMEIsTUFBMUIsRUFBa0MsS0FBbEMsRUFBeUMsT0FBekMsRUFBa0QsUUFBbEQsQ0FERjtBQUVFLFdBQVNDLGlCQUFULENBQTJCRixNQUEzQixFQUFtQztBQUNqQyxXQUFPYixNQUFNLENBQUNRLE9BQVAsQ0FBZUssTUFBZixDQUFQO0FBQ0QsR0FKSDs7O0FBT0EsTUFBSUcsT0FBTyxHQUFHaEIsTUFBTSxDQUFDZ0IsT0FBUCxJQUFrQnBCLFFBQVEsQ0FBQ29CLE9BQXpDOztBQUVBLFNBQU9BLE9BQU8sQ0FBQ2hCLE1BQUQsQ0FBUCxDQUFnQmlCLElBQWhCLENBQXFCLFNBQVNDLG1CQUFULENBQTZCQyxRQUE3QixFQUF1QztBQUNqRXBCLGdDQUE0QixDQUFDQyxNQUFELENBQTVCOztBQUVBO0FBQ0FtQixZQUFRLENBQUNWLElBQVQsR0FBZ0JmLGFBQWE7QUFDM0J5QixZQUFRLENBQUNWLElBRGtCO0FBRTNCVSxZQUFRLENBQUNYLE9BRmtCO0FBRzNCUixVQUFNLENBQUNvQixpQkFIb0IsQ0FBN0I7OztBQU1BLFdBQU9ELFFBQVA7QUFDRCxHQVhNLEVBV0osU0FBU0Usa0JBQVQsQ0FBNEJDLE1BQTVCLEVBQW9DO0FBQ3JDLFFBQUksQ0FBQzNCLFFBQVEsQ0FBQzJCLE1BQUQsQ0FBYixFQUF1QjtBQUNyQnZCLGtDQUE0QixDQUFDQyxNQUFELENBQTVCOztBQUVBO0FBQ0EsVUFBSXNCLE1BQU0sSUFBSUEsTUFBTSxDQUFDSCxRQUFyQixFQUErQjtBQUM3QkcsY0FBTSxDQUFDSCxRQUFQLENBQWdCVixJQUFoQixHQUF1QmYsYUFBYTtBQUNsQzRCLGNBQU0sQ0FBQ0gsUUFBUCxDQUFnQlYsSUFEa0I7QUFFbENhLGNBQU0sQ0FBQ0gsUUFBUCxDQUFnQlgsT0FGa0I7QUFHbENSLGNBQU0sQ0FBQ29CLGlCQUgyQixDQUFwQzs7QUFLRDtBQUNGOztBQUVELFdBQU9HLE9BQU8sQ0FBQ0MsTUFBUixDQUFlRixNQUFmLENBQVA7QUFDRCxHQTFCTSxDQUFQO0FBMkJELENBN0REIiwiZmlsZSI6IjQ2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gU3VwcG9ydCBiYXNlVVJMIGNvbmZpZ1xuICBpZiAoY29uZmlnLmJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwoY29uZmlnLnVybCkpIHtcbiAgICBjb25maWcudXJsID0gY29tYmluZVVSTHMoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICB9XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVycyB8fCB7fVxuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///46\n");

/***/ }),

/***/ 47:
/*!****************************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/axios/lib/core/transformData.js ***!
  \****************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ 30);\n\n/**\n                                    * Transform the data for a request or a response\n                                    *\n                                    * @param {Object|String} data The data to be transformed\n                                    * @param {Array} headers The headers for the request or response\n                                    * @param {Array|Function} fns A single function or Array of functions\n                                    * @returns {*} The resulting transformed data\n                                    */\nmodule.exports = function transformData(data, headers, fns) {\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn(data, headers);\n  });\n\n  return data;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInRyYW5zZm9ybURhdGEiLCJkYXRhIiwiaGVhZGVycyIsImZucyIsImZvckVhY2giLCJ0cmFuc2Zvcm0iLCJmbiJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsS0FBSyxHQUFHQyxtQkFBTyxDQUFDLG9CQUFELENBQW5COztBQUVBOzs7Ozs7OztBQVFBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsU0FBU0MsYUFBVCxDQUF1QkMsSUFBdkIsRUFBNkJDLE9BQTdCLEVBQXNDQyxHQUF0QyxFQUEyQztBQUMxRDtBQUNBUCxPQUFLLENBQUNRLE9BQU4sQ0FBY0QsR0FBZCxFQUFtQixTQUFTRSxTQUFULENBQW1CQyxFQUFuQixFQUF1QjtBQUN4Q0wsUUFBSSxHQUFHSyxFQUFFLENBQUNMLElBQUQsRUFBT0MsT0FBUCxDQUFUO0FBQ0QsR0FGRDs7QUFJQSxTQUFPRCxJQUFQO0FBQ0QsQ0FQRCIsImZpbGUiOiI0Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4oZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///47\n");

/***/ }),

/***/ 476:
/*!***********************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/utils/upload.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni, __f__) {var _hydrogenJsSdk = _interopRequireDefault(__webpack_require__(/*! hydrogen-js-sdk */ 14));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\nmodule.exports = {\n  //上传凭证图\n  upload_image: function upload_image(num) {\n    return new Promise(function (resolve, reject) {\n      var user = uni.getStorageSync(\"user\");\n      var Images = [];\n      if (user.is_vip) {\n        uni.chooseImage({\n          count: num, //默认9\n          sizeType: ['compressed'], //可以指定是原图还是压缩图，默认二者都有\n          sourceType: ['album', 'camera'], //从相册选择\n          success: function success(res) {\n            console.log(__f__(res, \" at utils\\\\upload.js:14\"));\n            var timestamp = Date.parse(new Date());\n            var tempFilePaths = res.tempFilePaths;\n            var file;var _iteratorNormalCompletion = true;var _didIteratorError = false;var _iteratorError = undefined;try {\n              for (var _iterator = tempFilePaths[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {var item = _step.value;\n                file = _hydrogenJsSdk.default.File(timestamp + '.jpg', item);\n              }} catch (err) {_didIteratorError = true;_iteratorError = err;} finally {try {if (!_iteratorNormalCompletion && _iterator.return != null) {_iterator.return();}} finally {if (_didIteratorError) {throw _iteratorError;}}}\n            file.save().then(function (res) {var _iteratorNormalCompletion2 = true;var _didIteratorError2 = false;var _iteratorError2 = undefined;try {\n                for (var _iterator2 = res[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {var item = _step2.value;\n                  Images.push(res[0].url);\n                }} catch (err) {_didIteratorError2 = true;_iteratorError2 = err;} finally {try {if (!_iteratorNormalCompletion2 && _iterator2.return != null) {_iterator2.return();}} finally {if (_didIteratorError2) {throw _iteratorError2;}}}\n              resolve(Images);\n            });\n          } });\n\n      } else {\n        uni.showToast({\n          title: \"您还不是会员，无法使用\",\n          icon: 'none' });\n\n      }\n    });\n  } };\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vdXRpbHMvdXBsb2FkLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ1cGxvYWRfaW1hZ2UiLCJudW0iLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInVzZXIiLCJ1bmkiLCJnZXRTdG9yYWdlU3luYyIsIkltYWdlcyIsImlzX3ZpcCIsImNob29zZUltYWdlIiwiY291bnQiLCJzaXplVHlwZSIsInNvdXJjZVR5cGUiLCJzdWNjZXNzIiwicmVzIiwiY29uc29sZSIsImxvZyIsInRpbWVzdGFtcCIsIkRhdGUiLCJwYXJzZSIsInRlbXBGaWxlUGF0aHMiLCJmaWxlIiwiaXRlbSIsIkJtb2IiLCJGaWxlIiwic2F2ZSIsInRoZW4iLCJwdXNoIiwidXJsIiwic2hvd1RvYXN0IiwidGl0bGUiLCJpY29uIl0sIm1hcHBpbmdzIjoia0RBQUEsNEY7QUFDQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2hCO0FBQ0FDLGNBRmdCLHdCQUVIQyxHQUZHLEVBRUM7QUFDaEIsV0FBTyxJQUFJQyxPQUFKLENBQVksVUFBQ0MsT0FBRCxFQUFVQyxNQUFWLEVBQXFCO0FBQ3ZDLFVBQUlDLElBQUksR0FBR0MsR0FBRyxDQUFDQyxjQUFKLENBQW1CLE1BQW5CLENBQVg7QUFDQSxVQUFJQyxNQUFNLEdBQUcsRUFBYjtBQUNBLFVBQUdILElBQUksQ0FBQ0ksTUFBUixFQUFlO0FBQ2RILFdBQUcsQ0FBQ0ksV0FBSixDQUFnQjtBQUNmQyxlQUFLLEVBQUVWLEdBRFEsRUFDSDtBQUNaVyxrQkFBUSxFQUFFLENBQUMsWUFBRCxDQUZLLEVBRVc7QUFDMUJDLG9CQUFVLEVBQUUsQ0FBQyxPQUFELEVBQVUsUUFBVixDQUhHLEVBR2tCO0FBQ2pDQyxpQkFBTyxFQUFFLGlCQUFTQyxHQUFULEVBQWM7QUFDdEJDLG1CQUFPLENBQUNDLEdBQVIsT0FBWUYsR0FBWjtBQUNBLGdCQUFJRyxTQUFTLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXLElBQUlELElBQUosRUFBWCxDQUFoQjtBQUNBLGdCQUFJRSxhQUFhLEdBQUdOLEdBQUcsQ0FBQ00sYUFBeEI7QUFDQSxnQkFBSUMsSUFBSixDQUpzQjtBQUt0QixtQ0FBaUJELGFBQWpCLDhIQUFnQyxLQUF2QkUsSUFBdUI7QUFDL0JELG9CQUFJLEdBQUdFLHVCQUFLQyxJQUFMLENBQVVQLFNBQVMsR0FBRyxNQUF0QixFQUE4QkssSUFBOUIsQ0FBUDtBQUNBLGVBUHFCO0FBUXRCRCxnQkFBSSxDQUFDSSxJQUFMLEdBQVlDLElBQVosQ0FBaUIsVUFBQVosR0FBRyxFQUFJO0FBQ3ZCLHNDQUFnQkEsR0FBaEIsbUlBQW9CLEtBQVpRLElBQVk7QUFDbkJmLHdCQUFNLENBQUNvQixJQUFQLENBQVliLEdBQUcsQ0FBQyxDQUFELENBQUgsQ0FBT2MsR0FBbkI7QUFDQSxpQkFIc0I7QUFJdkIxQixxQkFBTyxDQUFDSyxNQUFELENBQVA7QUFDQSxhQUxEO0FBTUEsV0FsQmMsRUFBaEI7O0FBb0JBLE9BckJELE1BcUJLO0FBQ0pGLFdBQUcsQ0FBQ3dCLFNBQUosQ0FBYztBQUNiQyxlQUFLLEVBQUMsYUFETztBQUViQyxjQUFJLEVBQUMsTUFGUSxFQUFkOztBQUlBO0FBQ0QsS0E5Qk0sQ0FBUDtBQStCQSxHQWxDZSxFQUFqQixDIiwiZmlsZSI6IjQ3Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCbW9iIGZyb20gXCJoeWRyb2dlbi1qcy1zZGtcIjtcclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcblx0Ly/kuIrkvKDlh63or4Hlm75cclxuXHR1cGxvYWRfaW1hZ2UobnVtKXtcclxuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblx0XHRcdGxldCB1c2VyID0gdW5pLmdldFN0b3JhZ2VTeW5jKFwidXNlclwiKTtcclxuXHRcdFx0bGV0IEltYWdlcyA9IFtdXHJcblx0XHRcdGlmKHVzZXIuaXNfdmlwKXtcclxuXHRcdFx0XHR1bmkuY2hvb3NlSW1hZ2Uoe1xyXG5cdFx0XHRcdFx0Y291bnQ6IG51bSwgLy/pu5jorqQ5XHJcblx0XHRcdFx0XHRzaXplVHlwZTogWydjb21wcmVzc2VkJ10sIC8v5Y+v5Lul5oyH5a6a5piv5Y6f5Zu+6L+Y5piv5Y6L57yp5Zu+77yM6buY6K6k5LqM6ICF6YO95pyJXHJcblx0XHRcdFx0XHRzb3VyY2VUeXBlOiBbJ2FsYnVtJywgJ2NhbWVyYSddLCAvL+S7juebuOWGjOmAieaLqVxyXG5cdFx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24ocmVzKSB7XHJcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKHJlcyk7XHJcblx0XHRcdFx0XHRcdGxldCB0aW1lc3RhbXAgPSBEYXRlLnBhcnNlKG5ldyBEYXRlKCkpO1xyXG5cdFx0XHRcdFx0XHRsZXQgdGVtcEZpbGVQYXRocyA9IHJlcy50ZW1wRmlsZVBhdGhzXHJcblx0XHRcdFx0XHRcdGxldCBmaWxlO1xyXG5cdFx0XHRcdFx0XHRmb3IgKGxldCBpdGVtIG9mIHRlbXBGaWxlUGF0aHMpIHtcclxuXHRcdFx0XHRcdFx0XHRmaWxlID0gQm1vYi5GaWxlKHRpbWVzdGFtcCArICcuanBnJywgaXRlbSk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0ZmlsZS5zYXZlKCkudGhlbihyZXMgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdGZvcihsZXQgaXRlbSBvZiByZXMpe1xyXG5cdFx0XHRcdFx0XHRcdFx0SW1hZ2VzLnB1c2gocmVzWzBdLnVybCk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoSW1hZ2VzKTtcclxuXHRcdFx0XHRcdFx0fSlcclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdHVuaS5zaG93VG9hc3Qoe1xyXG5cdFx0XHRcdFx0dGl0bGU6XCLmgqjov5jkuI3mmK/kvJrlkZjvvIzml6Dms5Xkvb/nlKhcIixcclxuXHRcdFx0XHRcdGljb246J25vbmUnXHJcblx0XHRcdFx0fSlcclxuXHRcdFx0fVxyXG5cdFx0fSlcclxuXHR9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///476\n");

/***/ }),

/***/ 48:
/*!*************************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/axios/lib/cancel/isCancel.js ***!
  \*************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImlzQ2FuY2VsIiwidmFsdWUiLCJfX0NBTkNFTF9fIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFNBQVNDLFFBQVQsQ0FBa0JDLEtBQWxCLEVBQXlCO0FBQ3hDLFNBQU8sQ0FBQyxFQUFFQSxLQUFLLElBQUlBLEtBQUssQ0FBQ0MsVUFBakIsQ0FBUjtBQUNELENBRkQiLCJmaWxlIjoiNDguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///48\n");

/***/ }),

/***/ 49:
/*!*******************************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/axios/lib/helpers/isAbsoluteURL.js ***!
  \*******************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n               * Determines whether the specified URL is absolute\n               *\n               * @param {string} url The URL to test\n               * @returns {boolean} True if the specified URL is absolute, otherwise false\n               */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImlzQWJzb2x1dGVVUkwiLCJ1cmwiLCJ0ZXN0Il0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjs7Ozs7O0FBTUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixTQUFTQyxhQUFULENBQXVCQyxHQUF2QixFQUE0QjtBQUMzQztBQUNBO0FBQ0E7QUFDQSxTQUFPLGdDQUFnQ0MsSUFBaEMsQ0FBcUNELEdBQXJDLENBQVA7QUFDRCxDQUxEIiwiZmlsZSI6IjQ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///49\n");

/***/ }),

/***/ 5:
/*!*******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/dist/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {var _package = __webpack_require__(/*! ../package.json */ 6);function _possibleConstructorReturn(self, call) {if (call && (typeof call === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}\n\nvar STAT_VERSION = _package.version;\nvar STAT_URL = 'https://tongji.dcloud.io/uni/stat';\nvar STAT_H5_URL = 'https://tongji.dcloud.io/uni/stat.gif';\nvar PAGE_PVER_TIME = 1800;\nvar APP_PVER_TIME = 300;\nvar OPERATING_TIME = 10;\n\nvar UUID_KEY = '__DC_STAT_UUID';\nvar UUID_VALUE = '__DC_UUID_VALUE';\n\nfunction getUuid() {\n  var uuid = '';\n  if (getPlatformName() === 'n') {\n    try {\n      uuid = plus.runtime.getDCloudId();\n    } catch (e) {\n      uuid = '';\n    }\n    return uuid;\n  }\n\n  try {\n    uuid = uni.getStorageSync(UUID_KEY);\n  } catch (e) {\n    uuid = UUID_VALUE;\n  }\n\n  if (!uuid) {\n    uuid = Date.now() + '' + Math.floor(Math.random() * 1e7);\n    try {\n      uni.setStorageSync(UUID_KEY, uuid);\n    } catch (e) {\n      uni.setStorageSync(UUID_KEY, UUID_VALUE);\n    }\n  }\n  return uuid;\n}\n\nvar getSgin = function getSgin(statData) {\n  var arr = Object.keys(statData);\n  var sortArr = arr.sort();\n  var sgin = {};\n  var sginStr = '';\n  for (var i in sortArr) {\n    sgin[sortArr[i]] = statData[sortArr[i]];\n    sginStr += sortArr[i] + '=' + statData[sortArr[i]] + '&';\n  }\n  // const options = sginStr.substr(0, sginStr.length - 1)\n  // sginStr = sginStr.substr(0, sginStr.length - 1) + '&key=' + STAT_KEY;\n  // const si = crypto.createHash('md5').update(sginStr).digest('hex');\n  return {\n    sign: '',\n    options: sginStr.substr(0, sginStr.length - 1) };\n\n};\n\nvar getSplicing = function getSplicing(data) {\n  var str = '';\n  for (var i in data) {\n    str += i + '=' + data[i] + '&';\n  }\n  return str.substr(0, str.length - 1);\n};\n\nvar getTime = function getTime() {\n  return parseInt(new Date().getTime() / 1000);\n};\n\nvar getPlatformName = function getPlatformName() {\n  var platformList = {\n    'app-plus': 'n',\n    'h5': 'h5',\n    'mp-weixin': 'wx',\n    'mp-alipay': 'ali',\n    'mp-baidu': 'bd',\n    'mp-toutiao': 'tt',\n    'mp-qq': 'qq' };\n\n  return platformList[\"app-plus\"];\n};\n\nvar getPackName = function getPackName() {\n  var packName = '';\n  if (getPlatformName() === 'wx' || getPlatformName() === 'qq') {\n    // 兼容微信小程序低版本基础库\n    if (uni.canIUse('getAccountInfoSync')) {\n      packName = uni.getAccountInfoSync().miniProgram.appId || '';\n    }\n  }\n  return packName;\n};\n\nvar getVersion = function getVersion() {\n  return getPlatformName() === 'n' ? plus.runtime.version : '';\n};\n\nvar getChannel = function getChannel() {\n  var platformName = getPlatformName();\n  var channel = '';\n  if (platformName === 'n') {\n    channel = plus.runtime.channel;\n  }\n  return channel;\n};\n\nvar getScene = function getScene(options) {\n  var platformName = getPlatformName();\n  var scene = '';\n  if (options) {\n    return options;\n  }\n  if (platformName === 'wx') {\n    scene = uni.getLaunchOptionsSync().scene;\n  }\n  return scene;\n};\nvar First__Visit__Time__KEY = 'First__Visit__Time';\nvar Last__Visit__Time__KEY = 'Last__Visit__Time';\n\nvar getFirstVisitTime = function getFirstVisitTime() {\n  var timeStorge = uni.getStorageSync(First__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = getTime();\n    uni.setStorageSync(First__Visit__Time__KEY, time);\n    uni.removeStorageSync(Last__Visit__Time__KEY);\n  }\n  return time;\n};\n\nvar getLastVisitTime = function getLastVisitTime() {\n  var timeStorge = uni.getStorageSync(Last__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = '';\n  }\n  uni.setStorageSync(Last__Visit__Time__KEY, getTime());\n  return time;\n};\n\n\nvar PAGE_RESIDENCE_TIME = '__page__residence__time';\nvar First_Page_residence_time = 0;\nvar Last_Page_residence_time = 0;\n\n\nvar setPageResidenceTime = function setPageResidenceTime() {\n  First_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    uni.setStorageSync(PAGE_RESIDENCE_TIME, getTime());\n  }\n  return First_Page_residence_time;\n};\n\nvar getPageResidenceTime = function getPageResidenceTime() {\n  Last_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    First_Page_residence_time = uni.getStorageSync(PAGE_RESIDENCE_TIME);\n  }\n  return Last_Page_residence_time - First_Page_residence_time;\n};\nvar TOTAL__VISIT__COUNT = 'Total__Visit__Count';\nvar getTotalVisitCount = function getTotalVisitCount() {\n  var timeStorge = uni.getStorageSync(TOTAL__VISIT__COUNT);\n  var count = 1;\n  if (timeStorge) {\n    count = timeStorge;\n    count++;\n  }\n  uni.setStorageSync(TOTAL__VISIT__COUNT, count);\n  return count;\n};\n\nvar GetEncodeURIComponentOptions = function GetEncodeURIComponentOptions(statData) {\n  var data = {};\n  for (var prop in statData) {\n    data[prop] = encodeURIComponent(statData[prop]);\n  }\n  return data;\n};\n\nvar Set__First__Time = 0;\nvar Set__Last__Time = 0;\n\nvar getFirstTime = function getFirstTime() {\n  var time = new Date().getTime();\n  Set__First__Time = time;\n  Set__Last__Time = 0;\n  return time;\n};\n\n\nvar getLastTime = function getLastTime() {\n  var time = new Date().getTime();\n  Set__Last__Time = time;\n  return time;\n};\n\n\nvar getResidenceTime = function getResidenceTime(type) {\n  var residenceTime = 0;\n  if (Set__First__Time !== 0) {\n    residenceTime = Set__Last__Time - Set__First__Time;\n  }\n\n  residenceTime = parseInt(residenceTime / 1000);\n  residenceTime = residenceTime < 1 ? 1 : residenceTime;\n  if (type === 'app') {\n    var overtime = residenceTime > APP_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: overtime };\n\n  }\n  if (type === 'page') {\n    var _overtime = residenceTime > PAGE_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: _overtime };\n\n  }\n\n  return {\n    residenceTime: residenceTime };\n\n\n};\n\nvar getRoute = function getRoute() {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is;\n  } else {\n    return _self.$scope && _self.$scope.route || _self.$mp && _self.$mp.page.route;\n  }\n};\n\nvar getPageRoute = function getPageRoute(self) {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n  var query = self._query;\n  var str = query && JSON.stringify(query) !== '{}' ? '?' + JSON.stringify(query) : '';\n  // clear\n  self._query = '';\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is + str;\n  } else {\n    return _self.$scope && _self.$scope.route + str || _self.$mp && _self.$mp.page.route + str;\n  }\n};\n\nvar getPageTypes = function getPageTypes(self) {\n  if (self.mpType === 'page' || self.$mp && self.$mp.mpType === 'page' || self.$options.mpType === 'page') {\n    return true;\n  }\n  return false;\n};\n\nvar calibration = function calibration(eventName, options) {\n  //  login 、 share 、pay_success 、pay_fail 、register 、title\n  if (!eventName) {\n    console.error(\"uni.report \\u7F3A\\u5C11 [eventName] \\u53C2\\u6570\");\n    return true;\n  }\n  if (typeof eventName !== 'string') {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u7C7B\\u578B\");\n    return true;\n  }\n  if (eventName.length > 255) {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (typeof options !== 'string' && typeof options !== 'object') {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u6216 Object \\u7C7B\\u578B\");\n    return true;\n  }\n\n  if (typeof options === 'string' && options.length > 255) {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (eventName === 'title' && typeof options !== 'string') {\n    console.error('uni.report [eventName] 参数为 title 时，[options] 参数只能为 String 类型');\n    return true;\n  }\n};\n\nvar PagesJson = __webpack_require__(/*! uni-pages?{\"type\":\"style\"} */ 7).default;\nvar statConfig = __webpack_require__(/*! uni-stat-config */ 8).default || __webpack_require__(/*! uni-stat-config */ 8);\n\nvar resultOptions = uni.getSystemInfoSync();var\n\nUtil = /*#__PURE__*/function () {\n  function Util() {_classCallCheck(this, Util);\n    this.self = '';\n    this._retry = 0;\n    this._platform = '';\n    this._query = {};\n    this._navigationBarTitle = {\n      config: '',\n      page: '',\n      report: '',\n      lt: '' };\n\n    this._operatingTime = 0;\n    this._reportingRequestData = {\n      '1': [],\n      '11': [] };\n\n    this.__prevent_triggering = false;\n\n    this.__licationHide = false;\n    this.__licationShow = false;\n    this._lastPageRoute = '';\n    this.statData = {\n      uuid: getUuid(),\n      ut: getPlatformName(),\n      mpn: getPackName(),\n      ak: statConfig.appid,\n      usv: STAT_VERSION,\n      v: getVersion(),\n      ch: getChannel(),\n      cn: '',\n      pn: '',\n      ct: '',\n      t: getTime(),\n      tt: '',\n      p: resultOptions.platform === 'android' ? 'a' : 'i',\n      brand: resultOptions.brand || '',\n      md: resultOptions.model,\n      sv: resultOptions.system.replace(/(Android|iOS)\\s/, ''),\n      mpsdk: resultOptions.SDKVersion || '',\n      mpv: resultOptions.version || '',\n      lang: resultOptions.language,\n      pr: resultOptions.pixelRatio,\n      ww: resultOptions.windowWidth,\n      wh: resultOptions.windowHeight,\n      sw: resultOptions.screenWidth,\n      sh: resultOptions.screenHeight };\n\n\n  }_createClass(Util, [{ key: \"_applicationShow\", value: function _applicationShow()\n\n    {\n      if (this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('app');\n        if (time.overtime) {\n          var options = {\n            path: this._lastPageRoute,\n            scene: this.statData.sc };\n\n          this._sendReportRequest(options);\n        }\n        this.__licationHide = false;\n      }\n    } }, { key: \"_applicationHide\", value: function _applicationHide(\n\n    self, type) {\n\n      this.__licationHide = true;\n      getLastTime();\n      var time = getResidenceTime();\n      getFirstTime();\n      var route = getPageRoute(this);\n      this._sendHideRequest({\n        urlref: route,\n        urlref_ts: time.residenceTime },\n      type);\n    } }, { key: \"_pageShow\", value: function _pageShow()\n\n    {\n      var route = getPageRoute(this);\n      var routepath = getRoute();\n      this._navigationBarTitle.config = PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].titleNView &&\n      PagesJson.pages[routepath].titleNView.titleText ||\n      PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].navigationBarTitleText || '';\n\n      if (this.__licationShow) {\n        getFirstTime();\n        this.__licationShow = false;\n        // console.log('这是 onLauch 之后执行的第一次 pageShow ，为下次记录时间做准备');\n        this._lastPageRoute = route;\n        return;\n      }\n\n      getLastTime();\n      this._lastPageRoute = route;\n      var time = getResidenceTime('page');\n      if (time.overtime) {\n        var options = {\n          path: this._lastPageRoute,\n          scene: this.statData.sc };\n\n        this._sendReportRequest(options);\n      }\n      getFirstTime();\n    } }, { key: \"_pageHide\", value: function _pageHide()\n\n    {\n      if (!this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('page');\n        this._sendPageRequest({\n          url: this._lastPageRoute,\n          urlref: this._lastPageRoute,\n          urlref_ts: time.residenceTime });\n\n        this._navigationBarTitle = {\n          config: '',\n          page: '',\n          report: '',\n          lt: '' };\n\n        return;\n      }\n    } }, { key: \"_login\", value: function _login()\n\n    {\n      this._sendEventRequest({\n        key: 'login' },\n      0);\n    } }, { key: \"_share\", value: function _share()\n\n    {\n      this._sendEventRequest({\n        key: 'share' },\n      0);\n    } }, { key: \"_payment\", value: function _payment(\n    key) {\n      this._sendEventRequest({\n        key: key },\n      0);\n    } }, { key: \"_sendReportRequest\", value: function _sendReportRequest(\n    options) {\n\n      this._navigationBarTitle.lt = '1';\n      var query = options.query && JSON.stringify(options.query) !== '{}' ? '?' + JSON.stringify(options.query) : '';\n      this.statData.lt = '1';\n      this.statData.url = options.path + query || '';\n      this.statData.t = getTime();\n      this.statData.sc = getScene(options.scene);\n      this.statData.fvts = getFirstVisitTime();\n      this.statData.lvts = getLastVisitTime();\n      this.statData.tvc = getTotalVisitCount();\n      if (getPlatformName() === 'n') {\n        this.getProperty();\n      } else {\n        this.getNetworkInfo();\n      }\n    } }, { key: \"_sendPageRequest\", value: function _sendPageRequest(\n\n    opt) {var\n\n      url =\n\n\n      opt.url,urlref = opt.urlref,urlref_ts = opt.urlref_ts;\n      this._navigationBarTitle.lt = '11';\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '11',\n        ut: this.statData.ut,\n        url: url,\n        tt: this.statData.tt,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"_sendHideRequest\", value: function _sendHideRequest(\n\n    opt, type) {var\n\n      urlref =\n\n      opt.urlref,urlref_ts = opt.urlref_ts;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '3',\n        ut: this.statData.ut,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options, type);\n    } }, { key: \"_sendEventRequest\", value: function _sendEventRequest()\n\n\n\n    {var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},_ref$key = _ref.key,key = _ref$key === void 0 ? '' : _ref$key,_ref$value = _ref.value,value = _ref$value === void 0 ? \"\" : _ref$value;\n      var route = this._lastPageRoute;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '21',\n        ut: this.statData.ut,\n        url: route,\n        ch: this.statData.ch,\n        e_n: key,\n        e_v: typeof value === 'object' ? JSON.stringify(value) : value.toString(),\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"getNetworkInfo\", value: function getNetworkInfo()\n\n    {var _this = this;\n      uni.getNetworkType({\n        success: function success(result) {\n          _this.statData.net = result.networkType;\n          _this.getLocation();\n        } });\n\n    } }, { key: \"getProperty\", value: function getProperty()\n\n    {var _this2 = this;\n      plus.runtime.getProperty(plus.runtime.appid, function (wgtinfo) {\n        _this2.statData.v = wgtinfo.version || '';\n        _this2.getNetworkInfo();\n      });\n    } }, { key: \"getLocation\", value: function getLocation()\n\n    {var _this3 = this;\n      if (statConfig.getLocation) {\n        uni.getLocation({\n          type: 'wgs84',\n          geocode: true,\n          success: function success(result) {\n            if (result.address) {\n              _this3.statData.cn = result.address.country;\n              _this3.statData.pn = result.address.province;\n              _this3.statData.ct = result.address.city;\n            }\n\n            _this3.statData.lat = result.latitude;\n            _this3.statData.lng = result.longitude;\n            _this3.request(_this3.statData);\n          } });\n\n      } else {\n        this.statData.lat = 0;\n        this.statData.lng = 0;\n        this.request(this.statData);\n      }\n    } }, { key: \"request\", value: function request(\n\n    data, type) {var _this4 = this;\n      var time = getTime();\n      var title = this._navigationBarTitle;\n      data.ttn = title.page;\n      data.ttpj = title.config;\n      data.ttc = title.report;\n\n      var requestData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        requestData = uni.getStorageSync('__UNI__STAT__DATA') || {};\n      }\n      if (!requestData[data.lt]) {\n        requestData[data.lt] = [];\n      }\n      requestData[data.lt].push(data);\n\n      if (getPlatformName() === 'n') {\n        uni.setStorageSync('__UNI__STAT__DATA', requestData);\n      }\n      if (getPageResidenceTime() < OPERATING_TIME && !type) {\n        return;\n      }\n      var uniStatData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        uniStatData = uni.getStorageSync('__UNI__STAT__DATA');\n      }\n      // 时间超过，重新获取时间戳\n      setPageResidenceTime();\n      var firstArr = [];\n      var contentArr = [];\n      var lastArr = [];var _loop = function _loop(\n\n      i) {\n        var rd = uniStatData[i];\n        rd.forEach(function (elm) {\n          var newData = getSplicing(elm);\n          if (i === 0) {\n            firstArr.push(newData);\n          } else if (i === 3) {\n            lastArr.push(newData);\n          } else {\n            contentArr.push(newData);\n          }\n        });};for (var i in uniStatData) {_loop(i);\n      }\n\n      firstArr.push.apply(firstArr, contentArr.concat(lastArr));\n      var optionsData = {\n        usv: STAT_VERSION, //统计 SDK 版本号\n        t: time, //发送请求时的时间戮\n        requests: JSON.stringify(firstArr) };\n\n\n      this._reportingRequestData = {};\n      if (getPlatformName() === 'n') {\n        uni.removeStorageSync('__UNI__STAT__DATA');\n      }\n\n      if (data.ut === 'h5') {\n        this.imageRequest(optionsData);\n        return;\n      }\n\n      if (getPlatformName() === 'n' && this.statData.p === 'a') {\n        setTimeout(function () {\n          _this4._sendRequest(optionsData);\n        }, 200);\n        return;\n      }\n      this._sendRequest(optionsData);\n    } }, { key: \"_sendRequest\", value: function _sendRequest(\n    optionsData) {var _this5 = this;\n      uni.request({\n        url: STAT_URL,\n        method: 'POST',\n        // header: {\n        //   'content-type': 'application/json' // 默认值\n        // },\n        data: optionsData,\n        success: function success() {\n          // if (process.env.NODE_ENV === 'development') {\n          //   console.log('stat request success');\n          // }\n        },\n        fail: function fail(e) {\n          if (++_this5._retry < 3) {\n            setTimeout(function () {\n              _this5._sendRequest(optionsData);\n            }, 1000);\n          }\n        } });\n\n    }\n    /**\r\n       * h5 请求\r\n       */ }, { key: \"imageRequest\", value: function imageRequest(\n    data) {\n      var image = new Image();\n      var options = getSgin(GetEncodeURIComponentOptions(data)).options;\n      image.src = STAT_H5_URL + '?' + options;\n    } }, { key: \"sendEvent\", value: function sendEvent(\n\n    key, value) {\n      // 校验 type 参数\n      if (calibration(key, value)) return;\n\n      if (key === 'title') {\n        this._navigationBarTitle.report = value;\n        return;\n      }\n      this._sendEventRequest({\n        key: key,\n        value: typeof value === 'object' ? JSON.stringify(value) : value },\n      1);\n    } }]);return Util;}();var\n\n\n\nStat = /*#__PURE__*/function (_Util) {_inherits(Stat, _Util);_createClass(Stat, null, [{ key: \"getInstance\", value: function getInstance()\n    {\n      if (!this.instance) {\n        this.instance = new Stat();\n      }\n      return this.instance;\n    } }]);\n  function Stat() {var _this6;_classCallCheck(this, Stat);\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Stat).call(this));\n    _this6.instance = null;\n    // 注册拦截器\n    if (typeof uni.addInterceptor === 'function' && \"development\" !== 'development') {\n      _this6.addInterceptorInit();\n      _this6.interceptLogin();\n      _this6.interceptShare(true);\n      _this6.interceptRequestPayment();\n    }return _this6;\n  }_createClass(Stat, [{ key: \"addInterceptorInit\", value: function addInterceptorInit()\n\n    {\n      var self = this;\n      uni.addInterceptor('setNavigationBarTitle', {\n        invoke: function invoke(args) {\n          self._navigationBarTitle.page = args.title;\n        } });\n\n    } }, { key: \"interceptLogin\", value: function interceptLogin()\n\n    {\n      var self = this;\n      uni.addInterceptor('login', {\n        complete: function complete() {\n          self._login();\n        } });\n\n    } }, { key: \"interceptShare\", value: function interceptShare(\n\n    type) {\n      var self = this;\n      if (!type) {\n        self._share();\n        return;\n      }\n      uni.addInterceptor('share', {\n        success: function success() {\n          self._share();\n        },\n        fail: function fail() {\n          self._share();\n        } });\n\n    } }, { key: \"interceptRequestPayment\", value: function interceptRequestPayment()\n\n    {\n      var self = this;\n      uni.addInterceptor('requestPayment', {\n        success: function success() {\n          self._payment('pay_success');\n        },\n        fail: function fail() {\n          self._payment('pay_fail');\n        } });\n\n    } }, { key: \"report\", value: function report(\n\n    options, self) {\n      this.self = self;\n      // if (process.env.NODE_ENV === 'development') {\n      //   console.log('report init');\n      // }\n      setPageResidenceTime();\n      this.__licationShow = true;\n      this._sendReportRequest(options, true);\n    } }, { key: \"load\", value: function load(\n\n    options, self) {\n      if (!self.$scope && !self.$mp) {\n        var page = getCurrentPages();\n        self.$scope = page[page.length - 1];\n      }\n      this.self = self;\n      this._query = options;\n    } }, { key: \"show\", value: function show(\n\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageShow(self);\n      } else {\n        this._applicationShow(self);\n      }\n    } }, { key: \"ready\", value: function ready(\n\n    self) {\n      // this.self = self;\n      // if (getPageTypes(self)) {\n      //   this._pageShow(self);\n      // }\n    } }, { key: \"hide\", value: function hide(\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageHide(self);\n      } else {\n        this._applicationHide(self, true);\n      }\n    } }, { key: \"error\", value: function error(\n    em) {\n      if (this._platform === 'devtools') {\n        if (true) {\n          console.info('当前运行环境为开发者工具，不上报数据。');\n        }\n        // return;\n      }\n      var emVal = '';\n      if (!em.message) {\n        emVal = JSON.stringify(em);\n      } else {\n        emVal = em.stack;\n      }\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '31',\n        ut: this.statData.ut,\n        ch: this.statData.ch,\n        mpsdk: this.statData.mpsdk,\n        mpv: this.statData.mpv,\n        v: this.statData.v,\n        em: emVal,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }]);return Stat;}(Util);\n\n\nvar stat = Stat.getInstance();\nvar isHide = false;\nvar lifecycle = {\n  onLaunch: function onLaunch(options) {\n    stat.report(options, this);\n  },\n  onReady: function onReady() {\n    stat.ready(this);\n  },\n  onLoad: function onLoad(options) {\n    stat.load(options, this);\n    // 重写分享，获取分享上报事件\n    if (this.$scope && this.$scope.onShareAppMessage) {\n      var oldShareAppMessage = this.$scope.onShareAppMessage;\n      this.$scope.onShareAppMessage = function (options) {\n        stat.interceptShare(false);\n        return oldShareAppMessage.call(this, options);\n      };\n    }\n  },\n  onShow: function onShow() {\n    isHide = false;\n    stat.show(this);\n  },\n  onHide: function onHide() {\n    isHide = true;\n    stat.hide(this);\n  },\n  onUnload: function onUnload() {\n    if (isHide) {\n      isHide = false;\n      return;\n    }\n    stat.hide(this);\n  },\n  onError: function onError(e) {\n    stat.error(e);\n  } };\n\n\nfunction main() {\n  if (true) {\n    uni.report = function (type, options) {};\n  } else { var Vue; }\n}\n\nmain();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n");

/***/ }),

/***/ 50:
/*!*****************************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/axios/lib/helpers/combineURLs.js ***!
  \*****************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n               * Creates a new URL by combining the specified URLs\n               *\n               * @param {string} baseURL The base URL\n               * @param {string} relativeURL The relative URL\n               * @returns {string} The combined URL\n               */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL ?\n  baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '') :\n  baseURL;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjb21iaW5lVVJMcyIsImJhc2VVUkwiLCJyZWxhdGl2ZVVSTCIsInJlcGxhY2UiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViOzs7Ozs7O0FBT0FBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixTQUFTQyxXQUFULENBQXFCQyxPQUFyQixFQUE4QkMsV0FBOUIsRUFBMkM7QUFDMUQsU0FBT0EsV0FBVztBQUNkRCxTQUFPLENBQUNFLE9BQVIsQ0FBZ0IsTUFBaEIsRUFBd0IsRUFBeEIsSUFBOEIsR0FBOUIsR0FBb0NELFdBQVcsQ0FBQ0MsT0FBWixDQUFvQixNQUFwQixFQUE0QixFQUE1QixDQUR0QjtBQUVkRixTQUZKO0FBR0QsQ0FKRCIsImZpbGUiOiI1MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///50\n");

/***/ }),

/***/ 51:
/*!***********************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/axios/lib/cancel/Cancel.js ***!
  \***********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n               * A `Cancel` is an object that is thrown when an operation is canceled.\n               *\n               * @class\n               * @param {string=} message The message.\n               */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIl0sIm5hbWVzIjpbIkNhbmNlbCIsIm1lc3NhZ2UiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsIl9fQ0FOQ0VMX18iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjs7Ozs7O0FBTUEsU0FBU0EsTUFBVCxDQUFnQkMsT0FBaEIsRUFBeUI7QUFDdkIsT0FBS0EsT0FBTCxHQUFlQSxPQUFmO0FBQ0Q7O0FBRURELE1BQU0sQ0FBQ0UsU0FBUCxDQUFpQkMsUUFBakIsR0FBNEIsU0FBU0EsUUFBVCxHQUFvQjtBQUM5QyxTQUFPLFlBQVksS0FBS0YsT0FBTCxHQUFlLE9BQU8sS0FBS0EsT0FBM0IsR0FBcUMsRUFBakQsQ0FBUDtBQUNELENBRkQ7O0FBSUFELE1BQU0sQ0FBQ0UsU0FBUCxDQUFpQkUsVUFBakIsR0FBOEIsSUFBOUI7O0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQk4sTUFBakIiLCJmaWxlIjoiNTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///51\n");

/***/ }),

/***/ 52:
/*!****************************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/axios/lib/cancel/CancelToken.js ***!
  \****************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Cancel = __webpack_require__(/*! ./Cancel */ 51);\n\n/**\n                                   * A `CancelToken` is an object that can be used to request cancellation of an operation.\n                                   *\n                                   * @class\n                                   * @param {Function} executor The executor function.\n                                   */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n   * Throws a `Cancel` if cancellation has been requested.\n   */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n    * Returns an object that contains a new `CancelToken` and a function that, when called,\n    * cancels the `CancelToken`.\n    */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel };\n\n};\n\nmodule.exports = CancelToken;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiXSwibmFtZXMiOlsiQ2FuY2VsIiwicmVxdWlyZSIsIkNhbmNlbFRva2VuIiwiZXhlY3V0b3IiLCJUeXBlRXJyb3IiLCJyZXNvbHZlUHJvbWlzZSIsInByb21pc2UiLCJQcm9taXNlIiwicHJvbWlzZUV4ZWN1dG9yIiwicmVzb2x2ZSIsInRva2VuIiwiY2FuY2VsIiwibWVzc2FnZSIsInJlYXNvbiIsInByb3RvdHlwZSIsInRocm93SWZSZXF1ZXN0ZWQiLCJzb3VyY2UiLCJjIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsTUFBTSxHQUFHQyxtQkFBTyxDQUFDLGtCQUFELENBQXBCOztBQUVBOzs7Ozs7QUFNQSxTQUFTQyxXQUFULENBQXFCQyxRQUFyQixFQUErQjtBQUM3QixNQUFJLE9BQU9BLFFBQVAsS0FBb0IsVUFBeEIsRUFBb0M7QUFDbEMsVUFBTSxJQUFJQyxTQUFKLENBQWMsOEJBQWQsQ0FBTjtBQUNEOztBQUVELE1BQUlDLGNBQUo7QUFDQSxPQUFLQyxPQUFMLEdBQWUsSUFBSUMsT0FBSixDQUFZLFNBQVNDLGVBQVQsQ0FBeUJDLE9BQXpCLEVBQWtDO0FBQzNESixrQkFBYyxHQUFHSSxPQUFqQjtBQUNELEdBRmMsQ0FBZjs7QUFJQSxNQUFJQyxLQUFLLEdBQUcsSUFBWjtBQUNBUCxVQUFRLENBQUMsU0FBU1EsTUFBVCxDQUFnQkMsT0FBaEIsRUFBeUI7QUFDaEMsUUFBSUYsS0FBSyxDQUFDRyxNQUFWLEVBQWtCO0FBQ2hCO0FBQ0E7QUFDRDs7QUFFREgsU0FBSyxDQUFDRyxNQUFOLEdBQWUsSUFBSWIsTUFBSixDQUFXWSxPQUFYLENBQWY7QUFDQVAsa0JBQWMsQ0FBQ0ssS0FBSyxDQUFDRyxNQUFQLENBQWQ7QUFDRCxHQVJPLENBQVI7QUFTRDs7QUFFRDs7O0FBR0FYLFdBQVcsQ0FBQ1ksU0FBWixDQUFzQkMsZ0JBQXRCLEdBQXlDLFNBQVNBLGdCQUFULEdBQTRCO0FBQ25FLE1BQUksS0FBS0YsTUFBVCxFQUFpQjtBQUNmLFVBQU0sS0FBS0EsTUFBWDtBQUNEO0FBQ0YsQ0FKRDs7QUFNQTs7OztBQUlBWCxXQUFXLENBQUNjLE1BQVosR0FBcUIsU0FBU0EsTUFBVCxHQUFrQjtBQUNyQyxNQUFJTCxNQUFKO0FBQ0EsTUFBSUQsS0FBSyxHQUFHLElBQUlSLFdBQUosQ0FBZ0IsU0FBU0MsUUFBVCxDQUFrQmMsQ0FBbEIsRUFBcUI7QUFDL0NOLFVBQU0sR0FBR00sQ0FBVDtBQUNELEdBRlcsQ0FBWjtBQUdBLFNBQU87QUFDTFAsU0FBSyxFQUFFQSxLQURGO0FBRUxDLFVBQU0sRUFBRUEsTUFGSCxFQUFQOztBQUlELENBVEQ7O0FBV0FPLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmpCLFdBQWpCIiwiZmlsZSI6IjUyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///52\n");

/***/ }),

/***/ 53:
/*!************************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/axios/lib/helpers/spread.js ***!
  \************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n               * Syntactic sugar for invoking a function and expanding an array for arguments.\n               *\n               * Common use case would be to use `Function.prototype.apply`.\n               *\n               *  ```js\n               *  function f(x, y, z) {}\n               *  var args = [1, 2, 3];\n               *  f.apply(null, args);\n               *  ```\n               *\n               * With `spread` this example can be re-written.\n               *\n               *  ```js\n               *  spread(function(x, y, z) {})([1, 2, 3]);\n               *  ```\n               *\n               * @param {Function} callback\n               * @returns {Function}\n               */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic3ByZWFkIiwiY2FsbGJhY2siLCJ3cmFwIiwiYXJyIiwiYXBwbHkiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW9CQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFNBQVNDLE1BQVQsQ0FBZ0JDLFFBQWhCLEVBQTBCO0FBQ3pDLFNBQU8sU0FBU0MsSUFBVCxDQUFjQyxHQUFkLEVBQW1CO0FBQ3hCLFdBQU9GLFFBQVEsQ0FBQ0csS0FBVCxDQUFlLElBQWYsRUFBcUJELEdBQXJCLENBQVA7QUFDRCxHQUZEO0FBR0QsQ0FKRCIsImZpbGUiOiI1My5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///53\n");

/***/ }),

/***/ 54:
/*!***************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/md5.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" /*\n               * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n               * Digest Algorithm, as defined in RFC 1321.\n               * Version 1.1 Copyright (C) Paul Johnston 1999 - 2002.\n               * Code also contributed by Greg Holt\n               * See http://pajhome.org.uk/site/legal.html for details.\n               */\n\nfunction safeAdd(x, y) {\n  var lsw = (x & 0xffff) + (y & 0xffff);\n\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xffff;\n}\n\n/*\n   * Bitwise rotate a 32-bit number to the left.\n   */\nfunction rol(num, cnt) {\n  return num << cnt | num >>> 32 - cnt;\n}\n\n/*\n   * These functions implement the four basic operations the algorithm uses.\n   */\nfunction cmn(q, a, b, x, s, t) {\n  return safeAdd(rol(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);\n}\nfunction ff(a, b, c, d, x, s, t) {\n  return cmn(b & c | ~b & d, a, b, x, s, t);\n}\nfunction gg(a, b, c, d, x, s, t) {\n  return cmn(b & d | c & ~d, a, b, x, s, t);\n}\nfunction hh(a, b, c, d, x, s, t) {\n  return cmn(b ^ c ^ d, a, b, x, s, t);\n}\nfunction ii(a, b, c, d, x, s, t) {\n  return cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\n/*\n   * Calculate the MD5 of an array of little-endian words, producing an array\n   * of little-endian words.\n   */\nfunction coreMD5(x) {\n  var a = 1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d = 271733878;\n\n  for (var i = 0; i < x.length; i += 16) {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n\n    a = ff(a, b, c, d, x[i + 0], 7, -680876936);\n    d = ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = ff(b, c, d, a, x[i + 15], 22, 1236535329);\n\n    a = gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = gg(b, c, d, a, x[i + 0], 20, -373897302);\n    a = gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = gg(b, c, d, a, x[i + 12], 20, -1926607734);\n\n    a = hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = hh(d, a, b, c, x[i + 0], 11, -358537222);\n    c = hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = hh(b, c, d, a, x[i + 2], 23, -995338651);\n\n    a = ii(a, b, c, d, x[i + 0], 6, -198630844);\n    d = ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = ii(b, c, d, a, x[i + 9], 21, -343485551);\n\n    a = safeAdd(a, olda);\n    b = safeAdd(b, oldb);\n    c = safeAdd(c, oldc);\n    d = safeAdd(d, oldd);\n  }\n  return [a, b, c, d];\n}\n\n/*\n   * Convert an array of little-endian words to a hex string.\n   */\nfunction binl2hex(binarray) {\n  var hexTab = '0123456789abcdef';\n  var str = '';\n  for (var i = 0; i < binarray.length * 4; i++) {\n    str +=\n    hexTab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xf) +\n    hexTab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xf);\n  }\n  return str;\n}\n\n/*\n   * Convert an array of little-endian words to a base64 encoded string.\n   */\n// function binl2b64 (binarray) {\n//   let tab = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n//   let str = ''\n//   for (let i = 0; i < binarray.length * 32; i += 6) {\n//     str += tab.charAt(\n//       ((binarray[i >> 5] << i % 32) & 0x3f) |\n//       ((binarray[i >> (5 + 1)] >> (32 - (i % 32))) & 0x3f)\n//     )\n//   }\n//   return str\n// }\n\n/*\n * Convert an 8-bit character string to a sequence of 16-word blocks, stored\n * as an array, and append appropriate padding for MD4/5 calculation.\n * If any of the characters are >255, the high byte is silently ignored.\n */\nfunction str2binl(str) {\n  var nblk = (str.length + 8 >> 6) + 1; // number of 16-word blocks\n  var blks = new Array(nblk * 16);\n  for (var _i = 0; _i < nblk * 16; _i++) {blks[_i] = 0;}\n  for (var i = 0; i < str.length; i++) {\n    blks[i >> 2] |= (str.charCodeAt(i) & 0xff) << i % 4 * 8;\n  }\n  blks[i >> 2] |= 0x80 << i % 4 * 8;\n  blks[nblk * 16 - 2] = str.length * 8;\n  return blks;\n}\n\n/*\n   * External interface\n   */\nfunction hexMD5(str) {\n  return binl2hex(coreMD5(str2binl(str)));\n}\n\nmodule.exports = {\n  hexMD5: hexMD5 };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///54\n");

/***/ }),

/***/ 55:
/*!*********************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/wxRequest.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {var Bmob = __webpack_require__(/*! ./bmob */ 15);\nvar md5 = __webpack_require__(/*! ./md5 */ 54);\nvar sdkType = 'wechatApp';\nif (typeof tt !== 'undefined') {\n  sdkType = 'toutiao';\n} else if (typeof qq !== 'undefined') {\n  sdkType = 'qqApp';\n}\n\nvar setHeader = function setHeader(config, route) {\n  var t = Math.round(new Date().getTime() / 1000);\n  var rand = Bmob.utils.randomString();\n  var sign = md5.hexMD5(route + t + config.securityCode + rand);\n  var header = {\n    'content-type': 'application/json',\n    'X-Bmob-SDK-Type': sdkType,\n    'X-Bmob-Safe-Sign': sign,\n    'X-Bmob-Safe-Timestamp': t,\n    'X-Bmob-Noncestr-Key': rand,\n    'X-Bmob-Secret-Key': config.secretKey };\n\n  if (config.applicationMasterKey) {\n    header['X-Bmob-Master-Key'] = config.applicationMasterKey;\n  }\n  return header;\n};\n\nvar request = function request(route) {var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'get';var parma = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return new Promise(function (resolve, reject) {\n    var header = setHeader(Bmob._config, route);\n\n    if (undefined === Bmob.User) {\n      Bmob = __webpack_require__(/*! ./bmob */ 15);\n    }\n    var current = Bmob.User.current();\n    if (current) {\n      header['X-Bmob-Session-Token'] = current.sessionToken;\n    }\n    if (Bmob._config.deBug === true) {\n      console.log(__f__('host:', Bmob._config.host, \" at node_modules\\\\hydrogen-js-sdk\\\\src\\\\lib\\\\wxRequest.js:40\"));\n      console.log(__f__('parma:', parma, \" at node_modules\\\\hydrogen-js-sdk\\\\src\\\\lib\\\\wxRequest.js:41\"));\n    }\n    wx.request({\n      url: Bmob._config.host + route,\n      method: method,\n      data: parma,\n      header: header,\n      success: function success(res) {\n        if (res.data.code && res.data.error || res.data.error) {\n          reject(res.data);\n        }\n        resolve(res.data);\n      },\n      fail: function fail(err) {\n        console.log(__f__(err, \" at node_modules\\\\hydrogen-js-sdk\\\\src\\\\lib\\\\wxRequest.js:55\"));\n        reject(err);\n      } });\n\n  });\n};\n\nmodule.exports = request;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL3d4UmVxdWVzdC5qcyJdLCJuYW1lcyI6WyJCbW9iIiwicmVxdWlyZSIsIm1kNSIsInNka1R5cGUiLCJ0dCIsInFxIiwic2V0SGVhZGVyIiwiY29uZmlnIiwicm91dGUiLCJ0IiwiTWF0aCIsInJvdW5kIiwiRGF0ZSIsImdldFRpbWUiLCJyYW5kIiwidXRpbHMiLCJyYW5kb21TdHJpbmciLCJzaWduIiwiaGV4TUQ1Iiwic2VjdXJpdHlDb2RlIiwiaGVhZGVyIiwic2VjcmV0S2V5IiwiYXBwbGljYXRpb25NYXN0ZXJLZXkiLCJyZXF1ZXN0IiwibWV0aG9kIiwicGFybWEiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIl9jb25maWciLCJ1bmRlZmluZWQiLCJVc2VyIiwiY3VycmVudCIsInNlc3Npb25Ub2tlbiIsImRlQnVnIiwiY29uc29sZSIsImxvZyIsImhvc3QiLCJ3eCIsInVybCIsImRhdGEiLCJzdWNjZXNzIiwicmVzIiwiY29kZSIsImVycm9yIiwiZmFpbCIsImVyciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI2Q0FBQSxJQUFJQSxJQUFJLEdBQUdDLG1CQUFPLENBQUMsZ0JBQUQsQ0FBbEI7QUFDQSxJQUFJQyxHQUFHLEdBQUdELG1CQUFPLENBQUMsZUFBRCxDQUFqQjtBQUNBLElBQUlFLE9BQU8sR0FBRyxXQUFkO0FBQ0EsSUFBSSxPQUFRQyxFQUFSLEtBQWdCLFdBQXBCLEVBQWlDO0FBQy9CRCxTQUFPLEdBQUcsU0FBVjtBQUNELENBRkQsTUFFTyxJQUFJLE9BQVFFLEVBQVIsS0FBZ0IsV0FBcEIsRUFBaUM7QUFDdENGLFNBQU8sR0FBRyxPQUFWO0FBQ0Q7O0FBRUQsSUFBTUcsU0FBUyxHQUFHLFNBQVpBLFNBQVksQ0FBQ0MsTUFBRCxFQUFTQyxLQUFULEVBQW1CO0FBQ25DLE1BQU1DLENBQUMsR0FBR0MsSUFBSSxDQUFDQyxLQUFMLENBQVcsSUFBSUMsSUFBSixHQUFXQyxPQUFYLEtBQXVCLElBQWxDLENBQVY7QUFDQSxNQUFNQyxJQUFJLEdBQUdkLElBQUksQ0FBQ2UsS0FBTCxDQUFXQyxZQUFYLEVBQWI7QUFDQSxNQUFNQyxJQUFJLEdBQUdmLEdBQUcsQ0FBQ2dCLE1BQUosQ0FBV1YsS0FBSyxHQUFHQyxDQUFSLEdBQVlGLE1BQU0sQ0FBQ1ksWUFBbkIsR0FBa0NMLElBQTdDLENBQWI7QUFDQSxNQUFJTSxNQUFNLEdBQUc7QUFDWCxvQkFBZ0Isa0JBREw7QUFFWCx1QkFBbUJqQixPQUZSO0FBR1gsd0JBQW9CYyxJQUhUO0FBSVgsNkJBQXlCUixDQUpkO0FBS1gsMkJBQXVCSyxJQUxaO0FBTVgseUJBQXFCUCxNQUFNLENBQUNjLFNBTmpCLEVBQWI7O0FBUUEsTUFBSWQsTUFBTSxDQUFDZSxvQkFBWCxFQUFpQztBQUMvQkYsVUFBTSxDQUFDLG1CQUFELENBQU4sR0FBOEJiLE1BQU0sQ0FBQ2Usb0JBQXJDO0FBQ0Q7QUFDRCxTQUFPRixNQUFQO0FBQ0QsQ0FoQkQ7O0FBa0JBLElBQU1HLE9BQU8sR0FBRyxTQUFWQSxPQUFVLENBQUNmLEtBQUQsRUFBdUMsS0FBL0JnQixNQUErQix1RUFBdEIsS0FBc0IsS0FBZkMsS0FBZSx1RUFBUCxFQUFPO0FBQ3JELFNBQU8sSUFBSUMsT0FBSixDQUFZLFVBQUNDLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUN0QyxRQUFNUixNQUFNLEdBQUdkLFNBQVMsQ0FBQ04sSUFBSSxDQUFDNkIsT0FBTixFQUFlckIsS0FBZixDQUF4Qjs7QUFFQSxRQUFJc0IsU0FBUyxLQUFLOUIsSUFBSSxDQUFDK0IsSUFBdkIsRUFBNkI7QUFDM0IvQixVQUFJLEdBQUdDLG1CQUFPLENBQUMsZ0JBQUQsQ0FBZDtBQUNEO0FBQ0QsUUFBSStCLE9BQU8sR0FBR2hDLElBQUksQ0FBQytCLElBQUwsQ0FBVUMsT0FBVixFQUFkO0FBQ0EsUUFBSUEsT0FBSixFQUFhO0FBQ1haLFlBQU0sQ0FBQyxzQkFBRCxDQUFOLEdBQWlDWSxPQUFPLENBQUNDLFlBQXpDO0FBQ0Q7QUFDRCxRQUFJakMsSUFBSSxDQUFDNkIsT0FBTCxDQUFhSyxLQUFiLEtBQXVCLElBQTNCLEVBQWlDO0FBQy9CQyxhQUFPLENBQUNDLEdBQVIsT0FBWSxPQUFaLEVBQXFCcEMsSUFBSSxDQUFDNkIsT0FBTCxDQUFhUSxJQUFsQztBQUNBRixhQUFPLENBQUNDLEdBQVIsT0FBWSxRQUFaLEVBQXNCWCxLQUF0QjtBQUNEO0FBQ0RhLE1BQUUsQ0FBQ2YsT0FBSCxDQUFXO0FBQ1RnQixTQUFHLEVBQUV2QyxJQUFJLENBQUM2QixPQUFMLENBQWFRLElBQWIsR0FBb0I3QixLQURoQjtBQUVUZ0IsWUFBTSxFQUFFQSxNQUZDO0FBR1RnQixVQUFJLEVBQUVmLEtBSEc7QUFJVEwsWUFBTSxFQUFFQSxNQUpDO0FBS1RxQixhQUFPLEVBQUUsaUJBQUFDLEdBQUcsRUFBSTtBQUNkLFlBQUtBLEdBQUcsQ0FBQ0YsSUFBSixDQUFTRyxJQUFULElBQWlCRCxHQUFHLENBQUNGLElBQUosQ0FBU0ksS0FBM0IsSUFBcUNGLEdBQUcsQ0FBQ0YsSUFBSixDQUFTSSxLQUFsRCxFQUF5RDtBQUN2RGhCLGdCQUFNLENBQUNjLEdBQUcsQ0FBQ0YsSUFBTCxDQUFOO0FBQ0Q7QUFDRGIsZUFBTyxDQUFDZSxHQUFHLENBQUNGLElBQUwsQ0FBUDtBQUNELE9BVlE7QUFXVEssVUFBSSxFQUFFLGNBQUFDLEdBQUcsRUFBSTtBQUNYWCxlQUFPLENBQUNDLEdBQVIsT0FBWVUsR0FBWjtBQUNBbEIsY0FBTSxDQUFDa0IsR0FBRCxDQUFOO0FBQ0QsT0FkUSxFQUFYOztBQWdCRCxHQTlCTSxDQUFQO0FBK0JELENBaENEOztBQWtDQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCekIsT0FBakIsQyIsImZpbGUiOiI1NS5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBCbW9iID0gcmVxdWlyZSgnLi9ibW9iJylcbmxldCBtZDUgPSByZXF1aXJlKCcuL21kNScpXG5sZXQgc2RrVHlwZSA9ICd3ZWNoYXRBcHAnXG5pZiAodHlwZW9mICh0dCkgIT09ICd1bmRlZmluZWQnKSB7XG4gIHNka1R5cGUgPSAndG91dGlhbydcbn0gZWxzZSBpZiAodHlwZW9mIChxcSkgIT09ICd1bmRlZmluZWQnKSB7XG4gIHNka1R5cGUgPSAncXFBcHAnXG59XG5cbmNvbnN0IHNldEhlYWRlciA9IChjb25maWcsIHJvdXRlKSA9PiB7XG4gIGNvbnN0IHQgPSBNYXRoLnJvdW5kKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMClcbiAgY29uc3QgcmFuZCA9IEJtb2IudXRpbHMucmFuZG9tU3RyaW5nKClcbiAgY29uc3Qgc2lnbiA9IG1kNS5oZXhNRDUocm91dGUgKyB0ICsgY29uZmlnLnNlY3VyaXR5Q29kZSArIHJhbmQpXG4gIGxldCBoZWFkZXIgPSB7XG4gICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAnWC1CbW9iLVNESy1UeXBlJzogc2RrVHlwZSxcbiAgICAnWC1CbW9iLVNhZmUtU2lnbic6IHNpZ24sXG4gICAgJ1gtQm1vYi1TYWZlLVRpbWVzdGFtcCc6IHQsXG4gICAgJ1gtQm1vYi1Ob25jZXN0ci1LZXknOiByYW5kLFxuICAgICdYLUJtb2ItU2VjcmV0LUtleSc6IGNvbmZpZy5zZWNyZXRLZXlcbiAgfVxuICBpZiAoY29uZmlnLmFwcGxpY2F0aW9uTWFzdGVyS2V5KSB7XG4gICAgaGVhZGVyWydYLUJtb2ItTWFzdGVyLUtleSddID0gY29uZmlnLmFwcGxpY2F0aW9uTWFzdGVyS2V5XG4gIH1cbiAgcmV0dXJuIGhlYWRlclxufVxuXG5jb25zdCByZXF1ZXN0ID0gKHJvdXRlLCBtZXRob2QgPSAnZ2V0JywgcGFybWEgPSB7fSkgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlciA9IHNldEhlYWRlcihCbW9iLl9jb25maWcsIHJvdXRlKVxuXG4gICAgaWYgKHVuZGVmaW5lZCA9PT0gQm1vYi5Vc2VyKSB7XG4gICAgICBCbW9iID0gcmVxdWlyZSgnLi9ibW9iJylcbiAgICB9XG4gICAgbGV0IGN1cnJlbnQgPSBCbW9iLlVzZXIuY3VycmVudCgpXG4gICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgIGhlYWRlclsnWC1CbW9iLVNlc3Npb24tVG9rZW4nXSA9IGN1cnJlbnQuc2Vzc2lvblRva2VuXG4gICAgfVxuICAgIGlmIChCbW9iLl9jb25maWcuZGVCdWcgPT09IHRydWUpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdob3N0OicsIEJtb2IuX2NvbmZpZy5ob3N0KVxuICAgICAgY29uc29sZS5sb2coJ3Bhcm1hOicsIHBhcm1hKVxuICAgIH1cbiAgICB3eC5yZXF1ZXN0KHtcbiAgICAgIHVybDogQm1vYi5fY29uZmlnLmhvc3QgKyByb3V0ZSxcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgZGF0YTogcGFybWEsXG4gICAgICBoZWFkZXI6IGhlYWRlcixcbiAgICAgIHN1Y2Nlc3M6IHJlcyA9PiB7XG4gICAgICAgIGlmICgocmVzLmRhdGEuY29kZSAmJiByZXMuZGF0YS5lcnJvcikgfHwgcmVzLmRhdGEuZXJyb3IpIHtcbiAgICAgICAgICByZWplY3QocmVzLmRhdGEpXG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZShyZXMuZGF0YSlcbiAgICAgIH0sXG4gICAgICBmYWlsOiBlcnIgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpXG4gICAgICAgIHJlamVjdChlcnIpXG4gICAgICB9XG4gICAgfSlcbiAgfSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1ZXN0XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///55\n");

/***/ }),

/***/ 56:
/*!**********************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/hapRequest.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {var Bmob = __webpack_require__(/*! ./bmob */ 15);\nvar md5 = __webpack_require__(/*! ./md5 */ 54);\nvar fetch = \"xxrequire('@system.fetch')xx\";\n\nvar setHeader = function setHeader(config, route) {\n  var t = Math.round(new Date().getTime() / 1000);\n  var rand = Bmob.utils.randomString();\n  var sign = md5.hexMD5(route + t + config.securityCode + rand);\n  var header = {\n    'content-type': 'application/json',\n    'X-Bmob-SDK-Type': 'wechatApp',\n    'X-Bmob-Safe-Sign': sign,\n    'X-Bmob-Safe-Timestamp': t,\n    'X-Bmob-Noncestr-Key': rand,\n    'X-Bmob-Secret-Key': config.secretKey };\n\n  if (config.applicationMasterKey) {\n    header['X-Bmob-Master-Key'] = config.applicationMasterKey;\n  }\n  return header;\n};\n\nvar request = function request(route) {var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'get';var parma = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return new Promise(function (resolve, reject) {\n    var header = setHeader(Bmob._config, route);\n\n    if (undefined === Bmob.User) {\n      Bmob = __webpack_require__(/*! ./bmob */ 15);\n    }\n    var current = Bmob.User.current();\n    if (current) {\n      header['X-Bmob-Session-Token'] = current.sessionToken;\n    }\n\n    if (typeof parma === 'object') {\n      parma = JSON.stringify(parma);\n    }\n\n    fetch.fetch({\n      url: Bmob._config.host + route,\n      header: header,\n      method: method,\n      data: parma,\n      success: function success(res) {\n        var data = JSON.parse(res.data);\n        if (data.code) {\n          reject(data);\n        }\n        resolve(data);\n      },\n      fail: function fail(data, code) {\n        console.log(__f__(\"handling fail, code = \".concat(code), \" at node_modules\\\\hydrogen-js-sdk\\\\src\\\\lib\\\\hapRequest.js:52\"));\n        reject(data);\n      } });\n\n  });\n};\nmodule.exports = request;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2hhcFJlcXVlc3QuanMiXSwibmFtZXMiOlsiQm1vYiIsInJlcXVpcmUiLCJtZDUiLCJmZXRjaCIsInNldEhlYWRlciIsImNvbmZpZyIsInJvdXRlIiwidCIsIk1hdGgiLCJyb3VuZCIsIkRhdGUiLCJnZXRUaW1lIiwicmFuZCIsInV0aWxzIiwicmFuZG9tU3RyaW5nIiwic2lnbiIsImhleE1ENSIsInNlY3VyaXR5Q29kZSIsImhlYWRlciIsInNlY3JldEtleSIsImFwcGxpY2F0aW9uTWFzdGVyS2V5IiwicmVxdWVzdCIsIm1ldGhvZCIsInBhcm1hIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJfY29uZmlnIiwidW5kZWZpbmVkIiwiVXNlciIsImN1cnJlbnQiLCJzZXNzaW9uVG9rZW4iLCJKU09OIiwic3RyaW5naWZ5IiwidXJsIiwiaG9zdCIsImRhdGEiLCJzdWNjZXNzIiwicmVzIiwicGFyc2UiLCJjb2RlIiwiZmFpbCIsImNvbnNvbGUiLCJsb2ciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiNkNBQUEsSUFBSUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLGdCQUFELENBQWxCO0FBQ0EsSUFBSUMsR0FBRyxHQUFHRCxtQkFBTyxDQUFDLGVBQUQsQ0FBakI7QUFDQSxJQUFNRSxLQUFLLEdBQUcsOEJBQWQ7O0FBRUEsSUFBTUMsU0FBUyxHQUFHLFNBQVpBLFNBQVksQ0FBQ0MsTUFBRCxFQUFTQyxLQUFULEVBQW1CO0FBQ25DLE1BQU1DLENBQUMsR0FBR0MsSUFBSSxDQUFDQyxLQUFMLENBQVcsSUFBSUMsSUFBSixHQUFXQyxPQUFYLEtBQXVCLElBQWxDLENBQVY7QUFDQSxNQUFNQyxJQUFJLEdBQUdaLElBQUksQ0FBQ2EsS0FBTCxDQUFXQyxZQUFYLEVBQWI7QUFDQSxNQUFNQyxJQUFJLEdBQUdiLEdBQUcsQ0FBQ2MsTUFBSixDQUFXVixLQUFLLEdBQUdDLENBQVIsR0FBWUYsTUFBTSxDQUFDWSxZQUFuQixHQUFrQ0wsSUFBN0MsQ0FBYjtBQUNBLE1BQUlNLE1BQU0sR0FBRztBQUNYLG9CQUFnQixrQkFETDtBQUVYLHVCQUFtQixXQUZSO0FBR1gsd0JBQW9CSCxJQUhUO0FBSVgsNkJBQXlCUixDQUpkO0FBS1gsMkJBQXVCSyxJQUxaO0FBTVgseUJBQXFCUCxNQUFNLENBQUNjLFNBTmpCLEVBQWI7O0FBUUEsTUFBSWQsTUFBTSxDQUFDZSxvQkFBWCxFQUFpQztBQUMvQkYsVUFBTSxDQUFDLG1CQUFELENBQU4sR0FBOEJiLE1BQU0sQ0FBQ2Usb0JBQXJDO0FBQ0Q7QUFDRCxTQUFPRixNQUFQO0FBQ0QsQ0FoQkQ7O0FBa0JBLElBQU1HLE9BQU8sR0FBRyxTQUFWQSxPQUFVLENBQUNmLEtBQUQsRUFBdUMsS0FBL0JnQixNQUErQix1RUFBdEIsS0FBc0IsS0FBZkMsS0FBZSx1RUFBUCxFQUFPO0FBQ3JELFNBQU8sSUFBSUMsT0FBSixDQUFZLFVBQUNDLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUN0QyxRQUFNUixNQUFNLEdBQUdkLFNBQVMsQ0FBQ0osSUFBSSxDQUFDMkIsT0FBTixFQUFlckIsS0FBZixDQUF4Qjs7QUFFQSxRQUFJc0IsU0FBUyxLQUFLNUIsSUFBSSxDQUFDNkIsSUFBdkIsRUFBNkI7QUFDM0I3QixVQUFJLEdBQUdDLG1CQUFPLENBQUMsZ0JBQUQsQ0FBZDtBQUNEO0FBQ0QsUUFBSTZCLE9BQU8sR0FBRzlCLElBQUksQ0FBQzZCLElBQUwsQ0FBVUMsT0FBVixFQUFkO0FBQ0EsUUFBSUEsT0FBSixFQUFhO0FBQ1haLFlBQU0sQ0FBQyxzQkFBRCxDQUFOLEdBQWlDWSxPQUFPLENBQUNDLFlBQXpDO0FBQ0Q7O0FBRUQsUUFBSSxPQUFPUixLQUFQLEtBQWlCLFFBQXJCLEVBQStCO0FBQzdCQSxXQUFLLEdBQUdTLElBQUksQ0FBQ0MsU0FBTCxDQUFlVixLQUFmLENBQVI7QUFDRDs7QUFFRHBCLFNBQUssQ0FBQ0EsS0FBTixDQUFZO0FBQ1YrQixTQUFHLEVBQUVsQyxJQUFJLENBQUMyQixPQUFMLENBQWFRLElBQWIsR0FBb0I3QixLQURmO0FBRVZZLFlBQU0sRUFBRUEsTUFGRTtBQUdWSSxZQUFNLEVBQUVBLE1BSEU7QUFJVmMsVUFBSSxFQUFFYixLQUpJO0FBS1ZjLGFBQU8sRUFBRSxpQkFBVUMsR0FBVixFQUFlO0FBQ3RCLFlBQU1GLElBQUksR0FBR0osSUFBSSxDQUFDTyxLQUFMLENBQVdELEdBQUcsQ0FBQ0YsSUFBZixDQUFiO0FBQ0EsWUFBSUEsSUFBSSxDQUFDSSxJQUFULEVBQWU7QUFDYmQsZ0JBQU0sQ0FBQ1UsSUFBRCxDQUFOO0FBQ0Q7QUFDRFgsZUFBTyxDQUFDVyxJQUFELENBQVA7QUFDRCxPQVhTO0FBWVZLLFVBQUksRUFBRSxjQUFVTCxJQUFWLEVBQWdCSSxJQUFoQixFQUFzQjtBQUMxQkUsZUFBTyxDQUFDQyxHQUFSLHVDQUFxQ0gsSUFBckM7QUFDQWQsY0FBTSxDQUFDVSxJQUFELENBQU47QUFDRCxPQWZTLEVBQVo7O0FBaUJELEdBaENNLENBQVA7QUFpQ0QsQ0FsQ0Q7QUFtQ0FRLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnhCLE9BQWpCLEMiLCJmaWxlIjoiNTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgQm1vYiA9IHJlcXVpcmUoJy4vYm1vYicpXG5sZXQgbWQ1ID0gcmVxdWlyZSgnLi9tZDUnKVxuY29uc3QgZmV0Y2ggPSBcInh4cmVxdWlyZSgnQHN5c3RlbS5mZXRjaCcpeHhcIlxuXG5jb25zdCBzZXRIZWFkZXIgPSAoY29uZmlnLCByb3V0ZSkgPT4ge1xuICBjb25zdCB0ID0gTWF0aC5yb3VuZChuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDApXG4gIGNvbnN0IHJhbmQgPSBCbW9iLnV0aWxzLnJhbmRvbVN0cmluZygpXG4gIGNvbnN0IHNpZ24gPSBtZDUuaGV4TUQ1KHJvdXRlICsgdCArIGNvbmZpZy5zZWN1cml0eUNvZGUgKyByYW5kKVxuICBsZXQgaGVhZGVyID0ge1xuICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgJ1gtQm1vYi1TREstVHlwZSc6ICd3ZWNoYXRBcHAnLFxuICAgICdYLUJtb2ItU2FmZS1TaWduJzogc2lnbixcbiAgICAnWC1CbW9iLVNhZmUtVGltZXN0YW1wJzogdCxcbiAgICAnWC1CbW9iLU5vbmNlc3RyLUtleSc6IHJhbmQsXG4gICAgJ1gtQm1vYi1TZWNyZXQtS2V5JzogY29uZmlnLnNlY3JldEtleVxuICB9XG4gIGlmIChjb25maWcuYXBwbGljYXRpb25NYXN0ZXJLZXkpIHtcbiAgICBoZWFkZXJbJ1gtQm1vYi1NYXN0ZXItS2V5J10gPSBjb25maWcuYXBwbGljYXRpb25NYXN0ZXJLZXlcbiAgfVxuICByZXR1cm4gaGVhZGVyXG59XG5cbmNvbnN0IHJlcXVlc3QgPSAocm91dGUsIG1ldGhvZCA9ICdnZXQnLCBwYXJtYSA9IHt9KSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgaGVhZGVyID0gc2V0SGVhZGVyKEJtb2IuX2NvbmZpZywgcm91dGUpXG5cbiAgICBpZiAodW5kZWZpbmVkID09PSBCbW9iLlVzZXIpIHtcbiAgICAgIEJtb2IgPSByZXF1aXJlKCcuL2Jtb2InKVxuICAgIH1cbiAgICBsZXQgY3VycmVudCA9IEJtb2IuVXNlci5jdXJyZW50KClcbiAgICBpZiAoY3VycmVudCkge1xuICAgICAgaGVhZGVyWydYLUJtb2ItU2Vzc2lvbi1Ub2tlbiddID0gY3VycmVudC5zZXNzaW9uVG9rZW5cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHBhcm1hID09PSAnb2JqZWN0Jykge1xuICAgICAgcGFybWEgPSBKU09OLnN0cmluZ2lmeShwYXJtYSlcbiAgICB9XG5cbiAgICBmZXRjaC5mZXRjaCh7XG4gICAgICB1cmw6IEJtb2IuX2NvbmZpZy5ob3N0ICsgcm91dGUsXG4gICAgICBoZWFkZXI6IGhlYWRlcixcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgZGF0YTogcGFybWEsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKHJlcy5kYXRhKVxuICAgICAgICBpZiAoZGF0YS5jb2RlKSB7XG4gICAgICAgICAgcmVqZWN0KGRhdGEpXG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZShkYXRhKVxuICAgICAgfSxcbiAgICAgIGZhaWw6IGZ1bmN0aW9uIChkYXRhLCBjb2RlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBoYW5kbGluZyBmYWlsLCBjb2RlID0gJHtjb2RlfWApXG4gICAgICAgIHJlamVjdChkYXRhKVxuICAgICAgfVxuICAgIH0pXG4gIH0pXG59XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVlc3RcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///56\n");

/***/ }),

/***/ 57:
/*!*******************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/storage.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // const Bmob = require('./bmob')\nvar utils = __webpack_require__(/*! ./utils */ 16);\n\nvar storage;\n// //获取当前应用类型\nvar type = utils.getAppType();\n// h5\nif (type === 'h5') {\n  storage = __webpack_require__(/*! ./webstorage */ 58);\n} else if (type === 'wx') {\n  // 小程序\n  storage = __webpack_require__(/*! ./wxstorage */ 59);\n} else if (type === 'hap') {\n  storage = __webpack_require__(/*! ./hapStorage */ 60);\n  // 快应用功能\n} else if (type === 'nodejs') {\n  // 快应用功能\n  storage = __webpack_require__(/*! ./nodestorage */ 61);\n}\n\nmodule.exports = storage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL3N0b3JhZ2UuanMiXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwic3RvcmFnZSIsInR5cGUiLCJnZXRBcHBUeXBlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkNBQUE7QUFDQSxJQUFNQSxLQUFLLEdBQUdDLG1CQUFPLENBQUMsaUJBQUQsQ0FBckI7O0FBRUEsSUFBSUMsT0FBSjtBQUNBO0FBQ0EsSUFBTUMsSUFBSSxHQUFHSCxLQUFLLENBQUNJLFVBQU4sRUFBYjtBQUNBO0FBQ0EsSUFBSUQsSUFBSSxLQUFLLElBQWIsRUFBbUI7QUFDakJELFNBQU8sR0FBR0QsbUJBQU8sQ0FBQyxzQkFBRCxDQUFqQjtBQUNELENBRkQsTUFFTyxJQUFJRSxJQUFJLEtBQUssSUFBYixFQUFtQjtBQUN4QjtBQUNBRCxTQUFPLEdBQUdELG1CQUFPLENBQUMscUJBQUQsQ0FBakI7QUFDRCxDQUhNLE1BR0EsSUFBSUUsSUFBSSxLQUFLLEtBQWIsRUFBb0I7QUFDekJELFNBQU8sR0FBR0QsbUJBQU8sQ0FBQyxzQkFBRCxDQUFqQjtBQUNBO0FBQ0QsQ0FITSxNQUdBLElBQUlFLElBQUksS0FBSyxRQUFiLEVBQXVCO0FBQzVCO0FBQ0FELFNBQU8sR0FBR0QsbUJBQU8sQ0FBQyx1QkFBRCxDQUFqQjtBQUNEOztBQUVESSxNQUFNLENBQUNDLE9BQVAsR0FBaUJKLE9BQWpCIiwiZmlsZSI6IjU3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gY29uc3QgQm1vYiA9IHJlcXVpcmUoJy4vYm1vYicpXG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKVxuXG5sZXQgc3RvcmFnZVxuLy8gLy/ojrflj5blvZPliY3lupTnlKjnsbvlnotcbmNvbnN0IHR5cGUgPSB1dGlscy5nZXRBcHBUeXBlKClcbi8vIGg1XG5pZiAodHlwZSA9PT0gJ2g1Jykge1xuICBzdG9yYWdlID0gcmVxdWlyZSgnLi93ZWJzdG9yYWdlJylcbn0gZWxzZSBpZiAodHlwZSA9PT0gJ3d4Jykge1xuICAvLyDlsI/nqIvluo9cbiAgc3RvcmFnZSA9IHJlcXVpcmUoJy4vd3hzdG9yYWdlJylcbn0gZWxzZSBpZiAodHlwZSA9PT0gJ2hhcCcpIHtcbiAgc3RvcmFnZSA9IHJlcXVpcmUoJy4vaGFwU3RvcmFnZScpXG4gIC8vIOW/q+W6lOeUqOWKn+iDvVxufSBlbHNlIGlmICh0eXBlID09PSAnbm9kZWpzJykge1xuICAvLyDlv6vlupTnlKjlip/og71cbiAgc3RvcmFnZSA9IHJlcXVpcmUoJy4vbm9kZXN0b3JhZ2UnKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JhZ2VcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///57\n");

/***/ }),

/***/ 58:
/*!**********************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/webstorage.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var _require = __webpack_require__(/*! ./dataType */ 23),isString = _require.isString;\n\nvar lt;\nif (typeof cc !== 'undefined') {\n  lt = cc.sys.localStorage;\n} else {\n  lt = localStorage;\n}\nvar storage = {\n  save: function save(key, value) {\n    if (!isString(key) || !value) {\n      throw new Error(415);\n    }\n    lt.setItem(key, JSON.stringify(value));\n  },\n  fetch: function fetch(key) {\n    if (!isString(key)) {\n      throw new Error(415);\n    }\n    return JSON.parse(lt.getItem(key)) || null;\n  },\n  remove: function remove(key) {\n    if (!isString(key)) {\n      throw new Error(415);\n    }\n    lt.removeItem(key);\n  },\n  clear: function clear() {\n    lt.clear();\n  } };\n\nmodule.exports = storage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL3dlYnN0b3JhZ2UuanMiXSwibmFtZXMiOlsicmVxdWlyZSIsImlzU3RyaW5nIiwibHQiLCJjYyIsInN5cyIsImxvY2FsU3RvcmFnZSIsInN0b3JhZ2UiLCJzYXZlIiwia2V5IiwidmFsdWUiLCJFcnJvciIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5IiwiZmV0Y2giLCJwYXJzZSIsImdldEl0ZW0iLCJyZW1vdmUiLCJyZW1vdmVJdGVtIiwiY2xlYXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiZUFBcUJBLG1CQUFPLENBQUMsb0JBQUQsQyxDQUFwQkMsUSxZQUFBQSxROztBQUVSLElBQUlDLEVBQUo7QUFDQSxJQUFJLE9BQU9DLEVBQVAsS0FBYyxXQUFsQixFQUErQjtBQUM3QkQsSUFBRSxHQUFHQyxFQUFFLENBQUNDLEdBQUgsQ0FBT0MsWUFBWjtBQUNELENBRkQsTUFFTztBQUNMSCxJQUFFLEdBQUdHLFlBQUw7QUFDRDtBQUNELElBQU1DLE9BQU8sR0FBRztBQUNkQyxNQURjLGdCQUNSQyxHQURRLEVBQ0hDLEtBREcsRUFDSTtBQUNoQixRQUFJLENBQUNSLFFBQVEsQ0FBQ08sR0FBRCxDQUFULElBQWtCLENBQUNDLEtBQXZCLEVBQThCO0FBQzVCLFlBQU0sSUFBSUMsS0FBSixDQUFVLEdBQVYsQ0FBTjtBQUNEO0FBQ0RSLE1BQUUsQ0FBQ1MsT0FBSCxDQUFXSCxHQUFYLEVBQWdCSSxJQUFJLENBQUNDLFNBQUwsQ0FBZUosS0FBZixDQUFoQjtBQUNELEdBTmE7QUFPZEssT0FQYyxpQkFPUE4sR0FQTyxFQU9GO0FBQ1YsUUFBSSxDQUFDUCxRQUFRLENBQUNPLEdBQUQsQ0FBYixFQUFvQjtBQUNsQixZQUFNLElBQUlFLEtBQUosQ0FBVSxHQUFWLENBQU47QUFDRDtBQUNELFdBQU9FLElBQUksQ0FBQ0csS0FBTCxDQUFXYixFQUFFLENBQUNjLE9BQUgsQ0FBV1IsR0FBWCxDQUFYLEtBQStCLElBQXRDO0FBQ0QsR0FaYTtBQWFkUyxRQWJjLGtCQWFOVCxHQWJNLEVBYUQ7QUFDWCxRQUFJLENBQUNQLFFBQVEsQ0FBQ08sR0FBRCxDQUFiLEVBQW9CO0FBQ2xCLFlBQU0sSUFBSUUsS0FBSixDQUFVLEdBQVYsQ0FBTjtBQUNEO0FBQ0RSLE1BQUUsQ0FBQ2dCLFVBQUgsQ0FBY1YsR0FBZDtBQUNELEdBbEJhO0FBbUJkVyxPQW5CYyxtQkFtQkw7QUFDUGpCLE1BQUUsQ0FBQ2lCLEtBQUg7QUFDRCxHQXJCYSxFQUFoQjs7QUF1QkFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmYsT0FBakIiLCJmaWxlIjoiNTguanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IGlzU3RyaW5nIH0gPSByZXF1aXJlKCcuL2RhdGFUeXBlJylcblxubGV0IGx0XG5pZiAodHlwZW9mIGNjICE9PSAndW5kZWZpbmVkJykge1xuICBsdCA9IGNjLnN5cy5sb2NhbFN0b3JhZ2Vcbn0gZWxzZSB7XG4gIGx0ID0gbG9jYWxTdG9yYWdlXG59XG5jb25zdCBzdG9yYWdlID0ge1xuICBzYXZlIChrZXksIHZhbHVlKSB7XG4gICAgaWYgKCFpc1N0cmluZyhrZXkpIHx8ICF2YWx1ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKDQxNSlcbiAgICB9XG4gICAgbHQuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KHZhbHVlKSlcbiAgfSxcbiAgZmV0Y2ggKGtleSkge1xuICAgIGlmICghaXNTdHJpbmcoa2V5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKDQxNSlcbiAgICB9XG4gICAgcmV0dXJuIEpTT04ucGFyc2UobHQuZ2V0SXRlbShrZXkpKSB8fCBudWxsXG4gIH0sXG4gIHJlbW92ZSAoa2V5KSB7XG4gICAgaWYgKCFpc1N0cmluZyhrZXkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoNDE1KVxuICAgIH1cbiAgICBsdC5yZW1vdmVJdGVtKGtleSlcbiAgfSxcbiAgY2xlYXIgKCkge1xuICAgIGx0LmNsZWFyKClcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdG9yYWdlXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///58\n");

/***/ }),

/***/ 59:
/*!*********************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/wxstorage.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var _require = __webpack_require__(/*! ./dataType */ 23),isString = _require.isString,isObject = _require.isObject;\n\nvar storage = {\n  save: function save(key, value) {\n    if (!isString(key) || !value) {\n      throw new Error(415);\n    }\n    value = !isObject(value) ? value : JSON.stringify(value);\n    return wx.setStorageSync(key, value);\n  },\n  fetch: function fetch(key) {\n    if (!isString(key)) {\n      throw new Error(415);\n    }\n    return wx.getStorageSync(key) || null;\n  },\n  remove: function remove(key) {\n    if (!isString(key)) {\n      throw new Error(415);\n    }\n    return wx.removeStorageSync(key);\n  },\n  clear: function clear() {\n    return wx.clearStorageSync();\n  } };\n\nmodule.exports = storage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL3d4c3RvcmFnZS5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiaXNTdHJpbmciLCJpc09iamVjdCIsInN0b3JhZ2UiLCJzYXZlIiwia2V5IiwidmFsdWUiLCJFcnJvciIsIkpTT04iLCJzdHJpbmdpZnkiLCJ3eCIsInNldFN0b3JhZ2VTeW5jIiwiZmV0Y2giLCJnZXRTdG9yYWdlU3luYyIsInJlbW92ZSIsInJlbW92ZVN0b3JhZ2VTeW5jIiwiY2xlYXIiLCJjbGVhclN0b3JhZ2VTeW5jIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6ImVBQStCQSxtQkFBTyxDQUFDLG9CQUFELEMsQ0FBOUJDLFEsWUFBQUEsUSxDQUFVQyxRLFlBQUFBLFE7O0FBRWxCLElBQU1DLE9BQU8sR0FBRztBQUNkQyxNQURjLGdCQUNSQyxHQURRLEVBQ0hDLEtBREcsRUFDSTtBQUNoQixRQUFJLENBQUNMLFFBQVEsQ0FBQ0ksR0FBRCxDQUFULElBQWtCLENBQUNDLEtBQXZCLEVBQThCO0FBQzVCLFlBQU0sSUFBSUMsS0FBSixDQUFVLEdBQVYsQ0FBTjtBQUNEO0FBQ0RELFNBQUssR0FBRyxDQUFDSixRQUFRLENBQUNJLEtBQUQsQ0FBVCxHQUFtQkEsS0FBbkIsR0FBMkJFLElBQUksQ0FBQ0MsU0FBTCxDQUFlSCxLQUFmLENBQW5DO0FBQ0EsV0FBT0ksRUFBRSxDQUFDQyxjQUFILENBQWtCTixHQUFsQixFQUF1QkMsS0FBdkIsQ0FBUDtBQUNELEdBUGE7QUFRZE0sT0FSYyxpQkFRUFAsR0FSTyxFQVFGO0FBQ1YsUUFBSSxDQUFDSixRQUFRLENBQUNJLEdBQUQsQ0FBYixFQUFvQjtBQUNsQixZQUFNLElBQUlFLEtBQUosQ0FBVSxHQUFWLENBQU47QUFDRDtBQUNELFdBQU9HLEVBQUUsQ0FBQ0csY0FBSCxDQUFrQlIsR0FBbEIsS0FBMEIsSUFBakM7QUFDRCxHQWJhO0FBY2RTLFFBZGMsa0JBY05ULEdBZE0sRUFjRDtBQUNYLFFBQUksQ0FBQ0osUUFBUSxDQUFDSSxHQUFELENBQWIsRUFBb0I7QUFDbEIsWUFBTSxJQUFJRSxLQUFKLENBQVUsR0FBVixDQUFOO0FBQ0Q7QUFDRCxXQUFPRyxFQUFFLENBQUNLLGlCQUFILENBQXFCVixHQUFyQixDQUFQO0FBQ0QsR0FuQmE7QUFvQmRXLE9BcEJjLG1CQW9CTDtBQUNQLFdBQU9OLEVBQUUsQ0FBQ08sZ0JBQUgsRUFBUDtBQUNELEdBdEJhLEVBQWhCOztBQXdCQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCaEIsT0FBakIiLCJmaWxlIjoiNTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IGlzU3RyaW5nLCBpc09iamVjdCB9ID0gcmVxdWlyZSgnLi9kYXRhVHlwZScpXG5cbmNvbnN0IHN0b3JhZ2UgPSB7XG4gIHNhdmUgKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoIWlzU3RyaW5nKGtleSkgfHwgIXZhbHVlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoNDE1KVxuICAgIH1cbiAgICB2YWx1ZSA9ICFpc09iamVjdCh2YWx1ZSkgPyB2YWx1ZSA6IEpTT04uc3RyaW5naWZ5KHZhbHVlKVxuICAgIHJldHVybiB3eC5zZXRTdG9yYWdlU3luYyhrZXksIHZhbHVlKVxuICB9LFxuICBmZXRjaCAoa2V5KSB7XG4gICAgaWYgKCFpc1N0cmluZyhrZXkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoNDE1KVxuICAgIH1cbiAgICByZXR1cm4gd3guZ2V0U3RvcmFnZVN5bmMoa2V5KSB8fCBudWxsXG4gIH0sXG4gIHJlbW92ZSAoa2V5KSB7XG4gICAgaWYgKCFpc1N0cmluZyhrZXkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoNDE1KVxuICAgIH1cbiAgICByZXR1cm4gd3gucmVtb3ZlU3RvcmFnZVN5bmMoa2V5KVxuICB9LFxuICBjbGVhciAoKSB7XG4gICAgcmV0dXJuIHd4LmNsZWFyU3RvcmFnZVN5bmMoKVxuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JhZ2VcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///59\n");

/***/ }),

/***/ 6:
/*!******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/package.json ***!
  \******************************************************/
/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, bugs, bundleDependencies, deprecated, description, devDependencies, files, gitHead, homepage, license, main, name, repository, scripts, version, default */
/***/ (function(module) {

eval("module.exports = {\"_from\":\"@dcloudio/uni-stat@next\",\"_id\":\"@dcloudio/uni-stat@2.0.0-23620191019001\",\"_inBundle\":false,\"_integrity\":\"sha512-gBpkjEOQ/LhTnXBVi266PoTNT5VJtbYoEVy+gZ8/LN9/jKEWeWndd2Lu7vn7hmUySVM5K5UV/Bd5LEVkgXB8mA==\",\"_location\":\"/@dcloudio/uni-stat\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"tag\",\"registry\":true,\"raw\":\"@dcloudio/uni-stat@next\",\"name\":\"@dcloudio/uni-stat\",\"escapedName\":\"@dcloudio%2funi-stat\",\"scope\":\"@dcloudio\",\"rawSpec\":\"next\",\"saveSpec\":null,\"fetchSpec\":\"next\"},\"_requiredBy\":[\"#USER\",\"/\",\"/@dcloudio/vue-cli-plugin-uni\"],\"_resolved\":\"https://registry.npmjs.org/@dcloudio/uni-stat/-/uni-stat-2.0.0-23620191019001.tgz\",\"_shasum\":\"5c006b903ae7bc407c8b1786de249ffbf72da996\",\"_spec\":\"@dcloudio/uni-stat@next\",\"_where\":\"/Users/fxy/Documents/DCloud/HbuilderX-plugins/release/uniapp-cli\",\"author\":\"\",\"bugs\":{\"url\":\"https://github.com/dcloudio/uni-app/issues\"},\"bundleDependencies\":false,\"deprecated\":false,\"description\":\"\",\"devDependencies\":{\"@babel/core\":\"^7.5.5\",\"@babel/preset-env\":\"^7.5.5\",\"eslint\":\"^6.1.0\",\"rollup\":\"^1.19.3\",\"rollup-plugin-babel\":\"^4.3.3\",\"rollup-plugin-clear\":\"^2.0.7\",\"rollup-plugin-commonjs\":\"^10.0.2\",\"rollup-plugin-copy\":\"^3.1.0\",\"rollup-plugin-eslint\":\"^7.0.0\",\"rollup-plugin-json\":\"^4.0.0\",\"rollup-plugin-node-resolve\":\"^5.2.0\",\"rollup-plugin-replace\":\"^2.2.0\",\"rollup-plugin-uglify\":\"^6.0.2\"},\"files\":[\"dist\",\"package.json\",\"LICENSE\"],\"gitHead\":\"bc995d4b43b68e7fe7914ae6b2112117d36e63a8\",\"homepage\":\"https://github.com/dcloudio/uni-app#readme\",\"license\":\"Apache-2.0\",\"main\":\"dist/index.js\",\"name\":\"@dcloudio/uni-stat\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/dcloudio/uni-app.git\",\"directory\":\"packages/uni-stat\"},\"scripts\":{\"build\":\"NODE_ENV=production rollup -c rollup.config.js\",\"dev\":\"NODE_ENV=development rollup -w -c rollup.config.js\"},\"version\":\"2.0.0-23620191019001\"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI2LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n");

/***/ }),

/***/ 60:
/*!**********************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/hapStorage.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {var _require = __webpack_require__(/*! ./dataType */ 23),isString = _require.isString;\nvar storages = \"xxrequire('@system.storage')xx\";\nvar storage = {\n  save: function save(key, value) {\n    if (!isString(key) || !value) {\n      throw new Error(415);\n    }\n    storages.set({\n      key: key,\n      value: JSON.stringify(value),\n      success: function success(data) {\n        console.log(__f__('handling success', \" at node_modules\\\\hydrogen-js-sdk\\\\src\\\\lib\\\\hapStorage.js:12\"));\n        return data;\n      },\n      fail: function fail(data, code) {\n        console.log(__f__(\"handling fail, code = \".concat(code), \" at node_modules\\\\hydrogen-js-sdk\\\\src\\\\lib\\\\hapStorage.js:16\"));\n      } });\n\n  },\n  fetch: function fetch(key) {\n    if (!isString(key)) {\n      throw new Error(415);\n    }\n    return new Promise(function (resolve, reject) {\n      return storages.get({\n        key: key,\n        success: function success(data) {\n          resolve(data || null);\n        },\n        fail: function fail(data, code) {\n          console.log(__f__(\"handling fail, code = \".concat(code), \" at node_modules\\\\hydrogen-js-sdk\\\\src\\\\lib\\\\hapStorage.js:31\"));\n          reject(data);\n        } });\n\n    });\n  },\n  remove: function remove(key) {\n    if (!isString(key)) {\n      throw new Error(415);\n    }\n    storages.delete({\n      key: key,\n      success: function success(data) {\n        console.log(__f__('handling success', \" at node_modules\\\\hydrogen-js-sdk\\\\src\\\\lib\\\\hapStorage.js:44\"));\n      },\n      fail: function fail(data, code) {\n        console.log(__f__(\"handling fail, code = \".concat(code), \" at node_modules\\\\hydrogen-js-sdk\\\\src\\\\lib\\\\hapStorage.js:47\"));\n      } });\n\n  },\n  clear: function clear() {\n    storages.clear({\n      success: function success(data) {\n        console.log(__f__('handling success', \" at node_modules\\\\hydrogen-js-sdk\\\\src\\\\lib\\\\hapStorage.js:54\"));\n      },\n      fail: function fail(data, code) {\n        console.log(__f__(\"handling fail, code = \".concat(code), \" at node_modules\\\\hydrogen-js-sdk\\\\src\\\\lib\\\\hapStorage.js:57\"));\n      } });\n\n  } };\n\nmodule.exports = storage;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2hhcFN0b3JhZ2UuanMiXSwibmFtZXMiOlsicmVxdWlyZSIsImlzU3RyaW5nIiwic3RvcmFnZXMiLCJzdG9yYWdlIiwic2F2ZSIsImtleSIsInZhbHVlIiwiRXJyb3IiLCJzZXQiLCJKU09OIiwic3RyaW5naWZ5Iiwic3VjY2VzcyIsImRhdGEiLCJjb25zb2xlIiwibG9nIiwiZmFpbCIsImNvZGUiLCJmZXRjaCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZ2V0IiwicmVtb3ZlIiwiZGVsZXRlIiwiY2xlYXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiNERBQXFCQSxtQkFBTyxDQUFDLG9CQUFELEMsQ0FBcEJDLFEsWUFBQUEsUTtBQUNSLElBQU1DLFFBQVEsR0FBRyxnQ0FBakI7QUFDQSxJQUFNQyxPQUFPLEdBQUc7QUFDZEMsTUFEYyxnQkFDUkMsR0FEUSxFQUNIQyxLQURHLEVBQ0k7QUFDaEIsUUFBSSxDQUFDTCxRQUFRLENBQUNJLEdBQUQsQ0FBVCxJQUFrQixDQUFDQyxLQUF2QixFQUE4QjtBQUM1QixZQUFNLElBQUlDLEtBQUosQ0FBVSxHQUFWLENBQU47QUFDRDtBQUNETCxZQUFRLENBQUNNLEdBQVQsQ0FBYTtBQUNYSCxTQUFHLEVBQUVBLEdBRE07QUFFWEMsV0FBSyxFQUFFRyxJQUFJLENBQUNDLFNBQUwsQ0FBZUosS0FBZixDQUZJO0FBR1hLLGFBQU8sRUFBRSxpQkFBVUMsSUFBVixFQUFnQjtBQUN2QkMsZUFBTyxDQUFDQyxHQUFSLE9BQVksa0JBQVo7QUFDQSxlQUFPRixJQUFQO0FBQ0QsT0FOVTtBQU9YRyxVQUFJLEVBQUUsY0FBVUgsSUFBVixFQUFnQkksSUFBaEIsRUFBc0I7QUFDMUJILGVBQU8sQ0FBQ0MsR0FBUix1Q0FBcUNFLElBQXJDO0FBQ0QsT0FUVSxFQUFiOztBQVdELEdBaEJhO0FBaUJkQyxPQWpCYyxpQkFpQlBaLEdBakJPLEVBaUJGO0FBQ1YsUUFBSSxDQUFDSixRQUFRLENBQUNJLEdBQUQsQ0FBYixFQUFvQjtBQUNsQixZQUFNLElBQUlFLEtBQUosQ0FBVSxHQUFWLENBQU47QUFDRDtBQUNELFdBQU8sSUFBSVcsT0FBSixDQUFZLFVBQUNDLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUN0QyxhQUFPbEIsUUFBUSxDQUFDbUIsR0FBVCxDQUFhO0FBQ2xCaEIsV0FBRyxFQUFFQSxHQURhO0FBRWxCTSxlQUFPLEVBQUUsaUJBQVVDLElBQVYsRUFBZ0I7QUFDdkJPLGlCQUFPLENBQUNQLElBQUksSUFBSSxJQUFULENBQVA7QUFDRCxTQUppQjtBQUtsQkcsWUFBSSxFQUFFLGNBQVVILElBQVYsRUFBZ0JJLElBQWhCLEVBQXNCO0FBQzFCSCxpQkFBTyxDQUFDQyxHQUFSLHVDQUFxQ0UsSUFBckM7QUFDQUksZ0JBQU0sQ0FBQ1IsSUFBRCxDQUFOO0FBQ0QsU0FSaUIsRUFBYixDQUFQOztBQVVELEtBWE0sQ0FBUDtBQVlELEdBakNhO0FBa0NkVSxRQWxDYyxrQkFrQ05qQixHQWxDTSxFQWtDRDtBQUNYLFFBQUksQ0FBQ0osUUFBUSxDQUFDSSxHQUFELENBQWIsRUFBb0I7QUFDbEIsWUFBTSxJQUFJRSxLQUFKLENBQVUsR0FBVixDQUFOO0FBQ0Q7QUFDREwsWUFBUSxDQUFDcUIsTUFBVCxDQUFnQjtBQUNkbEIsU0FBRyxFQUFFQSxHQURTO0FBRWRNLGFBQU8sRUFBRSxpQkFBVUMsSUFBVixFQUFnQjtBQUN2QkMsZUFBTyxDQUFDQyxHQUFSLE9BQVksa0JBQVo7QUFDRCxPQUphO0FBS2RDLFVBQUksRUFBRSxjQUFVSCxJQUFWLEVBQWdCSSxJQUFoQixFQUFzQjtBQUMxQkgsZUFBTyxDQUFDQyxHQUFSLHVDQUFxQ0UsSUFBckM7QUFDRCxPQVBhLEVBQWhCOztBQVNELEdBL0NhO0FBZ0RkUSxPQWhEYyxtQkFnREw7QUFDUHRCLFlBQVEsQ0FBQ3NCLEtBQVQsQ0FBZTtBQUNiYixhQUFPLEVBQUUsaUJBQVVDLElBQVYsRUFBZ0I7QUFDdkJDLGVBQU8sQ0FBQ0MsR0FBUixPQUFZLGtCQUFaO0FBQ0QsT0FIWTtBQUliQyxVQUFJLEVBQUUsY0FBVUgsSUFBVixFQUFnQkksSUFBaEIsRUFBc0I7QUFDMUJILGVBQU8sQ0FBQ0MsR0FBUix1Q0FBcUNFLElBQXJDO0FBQ0QsT0FOWSxFQUFmOztBQVFELEdBekRhLEVBQWhCOztBQTJEQVMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCdkIsT0FBakIsQyIsImZpbGUiOiI2MC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgaXNTdHJpbmcgfSA9IHJlcXVpcmUoJy4vZGF0YVR5cGUnKVxuY29uc3Qgc3RvcmFnZXMgPSBcInh4cmVxdWlyZSgnQHN5c3RlbS5zdG9yYWdlJyl4eFwiXG5jb25zdCBzdG9yYWdlID0ge1xuICBzYXZlIChrZXksIHZhbHVlKSB7XG4gICAgaWYgKCFpc1N0cmluZyhrZXkpIHx8ICF2YWx1ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKDQxNSlcbiAgICB9XG4gICAgc3RvcmFnZXMuc2V0KHtcbiAgICAgIGtleToga2V5LFxuICAgICAgdmFsdWU6IEpTT04uc3RyaW5naWZ5KHZhbHVlKSxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdoYW5kbGluZyBzdWNjZXNzJylcbiAgICAgICAgcmV0dXJuIGRhdGFcbiAgICAgIH0sXG4gICAgICBmYWlsOiBmdW5jdGlvbiAoZGF0YSwgY29kZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhgaGFuZGxpbmcgZmFpbCwgY29kZSA9ICR7Y29kZX1gKVxuICAgICAgfVxuICAgIH0pXG4gIH0sXG4gIGZldGNoIChrZXkpIHtcbiAgICBpZiAoIWlzU3RyaW5nKGtleSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcig0MTUpXG4gICAgfVxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICByZXR1cm4gc3RvcmFnZXMuZ2V0KHtcbiAgICAgICAga2V5OiBrZXksXG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgcmVzb2x2ZShkYXRhIHx8IG51bGwpXG4gICAgICAgIH0sXG4gICAgICAgIGZhaWw6IGZ1bmN0aW9uIChkYXRhLCBjb2RlKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coYGhhbmRsaW5nIGZhaWwsIGNvZGUgPSAke2NvZGV9YClcbiAgICAgICAgICByZWplY3QoZGF0YSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuICB9LFxuICByZW1vdmUgKGtleSkge1xuICAgIGlmICghaXNTdHJpbmcoa2V5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKDQxNSlcbiAgICB9XG4gICAgc3RvcmFnZXMuZGVsZXRlKHtcbiAgICAgIGtleToga2V5LFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2hhbmRsaW5nIHN1Y2Nlc3MnKVxuICAgICAgfSxcbiAgICAgIGZhaWw6IGZ1bmN0aW9uIChkYXRhLCBjb2RlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBoYW5kbGluZyBmYWlsLCBjb2RlID0gJHtjb2RlfWApXG4gICAgICB9XG4gICAgfSlcbiAgfSxcbiAgY2xlYXIgKCkge1xuICAgIHN0b3JhZ2VzLmNsZWFyKHtcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdoYW5kbGluZyBzdWNjZXNzJylcbiAgICAgIH0sXG4gICAgICBmYWlsOiBmdW5jdGlvbiAoZGF0YSwgY29kZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhgaGFuZGxpbmcgZmFpbCwgY29kZSA9ICR7Y29kZX1gKVxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3RvcmFnZVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///60\n");

/***/ }),

/***/ 61:
/*!***********************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/nodestorage.js ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var storage = {\n  save: function save(key, value) {\n\n  },\n  fetch: function fetch(key) {\n    return null;\n  },\n  remove: function remove(key) {\n\n  },\n  clear: function clear() {\n  } };\n\nmodule.exports = storage;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL25vZGVzdG9yYWdlLmpzIl0sIm5hbWVzIjpbInN0b3JhZ2UiLCJzYXZlIiwia2V5IiwidmFsdWUiLCJmZXRjaCIsInJlbW92ZSIsImNsZWFyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBTUEsT0FBTyxHQUFHO0FBQ2RDLE1BRGMsZ0JBQ1JDLEdBRFEsRUFDSEMsS0FERyxFQUNJOztBQUVqQixHQUhhO0FBSWRDLE9BSmMsaUJBSVBGLEdBSk8sRUFJRjtBQUNWLFdBQU8sSUFBUDtBQUNELEdBTmE7QUFPZEcsUUFQYyxrQkFPTkgsR0FQTSxFQU9EOztBQUVaLEdBVGE7QUFVZEksT0FWYyxtQkFVTDtBQUNSLEdBWGEsRUFBaEI7O0FBYUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlIsT0FBakIiLCJmaWxlIjoiNjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBzdG9yYWdlID0ge1xuICBzYXZlIChrZXksIHZhbHVlKSB7XG5cbiAgfSxcbiAgZmV0Y2ggKGtleSkge1xuICAgIHJldHVybiBudWxsXG4gIH0sXG4gIHJlbW92ZSAoa2V5KSB7XG5cbiAgfSxcbiAgY2xlYXIgKCkge1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JhZ2VcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///61\n");

/***/ }),

/***/ 62:
/*!****************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/user.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _possibleConstructorReturn(self, call) {if (call && (typeof call === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}var request = __webpack_require__(/*! ./request */ 27);\nvar storage = __webpack_require__(/*! ./storage */ 57);\nvar query = __webpack_require__(/*! ./query */ 26);\nvar Bmob = __webpack_require__(/*! ./bmob */ 15);\nvar Error = __webpack_require__(/*! ./error */ 24);var _require =\n__webpack_require__(/*! ./dataType */ 23),isObject = _require.isObject,isString = _require.isString,isNumber = _require.isNumber;\n\nvar user = /*#__PURE__*/function (_query) {_inherits(user, _query);\n  function user() {_classCallCheck(this, user);\n    var tableName = '_User';return _possibleConstructorReturn(this, _getPrototypeOf(user).call(this,\n    tableName));\n  }_createClass(user, [{ key: \"set\", value: function set(\n    key) {var val = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      if (isString(key)) {\n        this.setData[key] = val;\n      }\n    } }, { key: \"requestEmailVerify\", value: function requestEmailVerify(\n    email) {\n      if (!isString(email)) {\n        // 异常\n        throw new Error(415);\n      }\n\n      this.setData = Object.assign({}, { email: email });\n      console.log(__f__(this.setData, \" at node_modules\\\\hydrogen-js-sdk\\\\src\\\\lib\\\\user.js:25\"));\n      var route = Bmob._config.parameters.REQUEST_EMAIL_VERIFY;\n      return request(route, 'post', this.setData);\n    } }, { key: \"register\", value: function register(\n    parma) {\n      if (!isObject(parma)) {\n        // 异常\n        throw new Error(415);\n      }\n      this.setData = Object.assign({}, parma);\n      var route = Bmob._config.parameters.REGISTER;\n      return request(route, 'post', this.setData);\n    } }, { key: \"login\", value: function login(\n\n    username, password) {var _this = this;\n      if (!isString(username) || !isString(password)) {\n        // 异常\n        throw new Error(415);\n      }\n      this.setData = Object.assign({}, { username: username, password: password });\n      var route = Bmob._config.parameters.LOGIN;\n      return new Promise(function (resolve, reject) {\n        request(route, 'get', _this.setData).then(function (res) {\n          storage.save('bmob', res);\n          resolve(res);\n        }).catch(function (err) {\n          reject(err);\n        });\n      });\n    } }, { key: \"logout\", value: function logout()\n    {\n      storage.clear();\n    } }, { key: \"users\", value: function users()\n    {\n      var route = Bmob._config.parameters.USERS;\n      return request(route, 'get');\n    } }, { key: \"decryption\", value: function decryption(\n    e) {\n      var self = this;\n      return new Promise(function (resolve, reject) {\n        var i = e.iv ? e.iv : e.detail.iv;\n        var d = e.encryptedData ? e.encryptedData : e.detail.encryptedData;\n\n        // 调用云函数解密\n        var current = self.current();\n        var s;\n        if (typeof tt !== 'undefined') {\n          s = current.authData.toutiao.session_key;\n        } else if (typeof qq !== 'undefined') {\n          s = current.authData.qqapp.session_key;\n        } else {\n          s = current.authData.weapp.session_key;\n        }\n        var data = {\n          'sessionKey': s,\n          'encryptedData': d,\n          'iv': i };\n\n        var route = Bmob._config.parameters.DECRYPTION;\n        request(route, 'POST', data).\n        then(function (res) {\n          resolve(res);\n        }).\n        catch(function (err) {\n          reject(err);\n        });\n      });\n    } }, { key: \"signOrLoginByMobilePhone\", value: function signOrLoginByMobilePhone(\n    mobilePhoneNumber, smsCode) {\n      // 手机号登陆\n      if (!isNumber(mobilePhoneNumber) || !isNumber(smsCode)) {\n        // 异常\n        throw new Error(415);\n      }\n      this.setData = Object.assign({}, { mobilePhoneNumber: mobilePhoneNumber, smsCode: smsCode });\n      var route = Bmob._config.parameters.LOGIN;\n      return request(route, 'get', this.setData);\n    } }, { key: \"requestOpenId\", value: function requestOpenId(\n    code) {var a = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var route = Bmob._config.parameters.WECHAT_APP;\n      return request(route + code, 'POST', { 'anonymous_code': a });\n    } }, { key: \"linkWith\", value: function linkWith(\n    data) {\n      // 第三方登陆\n      var authData = { 'authData': data };\n      var route = Bmob._config.parameters.USERS;\n      return request(route, 'POST', authData);\n    } }, { key: \"loginWithWeapp\", value: function loginWithWeapp(\n    code) {var _this2 = this;var a = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';var str = arguments.length > 2 ? arguments[2] : undefined;\n      return new Promise(function (resolve, reject) {\n        _this2.requestOpenId(code, a).then(function (res) {\n          var w = { 'weapp': res };\n          if (typeof tt !== 'undefined') {\n            delete res.error;\n            w = { 'toutiao': res };\n          }\n          if (typeof qq !== 'undefined') {\n            delete res.errcode;\n            delete res.errmsg;\n            w = { 'qqapp': res };\n          }\n          if (str === 'openid') {\n            resolve(res);\n          } else {\n            var result = _this2.linkWith(w);\n            resolve(result);\n          }\n        }).catch(function (err) {\n          reject(err);\n        });\n      });\n    } }, { key: \"upInfo\", value: function upInfo(\n\n    userInfo) {var _this3 = this;\n      return new Promise(function (resolve, reject) {\n        var nickName = userInfo.nickName;\n        var avatarUrl = userInfo.avatarUrl;\n\n        var currentUser = _this3.current();\n        if (!currentUser) {\n          throw new Error(415);\n        }\n        var openid = storage.fetch('openid');\n        _this3.get(currentUser.objectId).then(function (res) {\n          res.set('nickName', nickName);\n          res.set('userPic', avatarUrl);\n          res.set('openid', openid);\n          res.save().then(function (result) {\n            resolve(result);\n          }).catch(function (err) {\n            console.log(__f__(err, \" at node_modules\\\\hydrogen-js-sdk\\\\src\\\\lib\\\\user.js:155\"));\n            reject(err);\n          });\n        }).catch(function (err) {\n          console.log(__f__(err, \" at node_modules\\\\hydrogen-js-sdk\\\\src\\\\lib\\\\user.js:159\"));\n          reject(err);\n        });\n      });\n    } }, { key: \"openId\", value: function openId()\n    {\n      console.log(__f__('fff', \" at node_modules\\\\hydrogen-js-sdk\\\\src\\\\lib\\\\user.js:165\"));\n      this.auth('openid');\n    } }, { key: \"auth\", value: function auth()\n    {var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var that = this;\n      return new Promise(function (resolve, reject) {\n        var login = function login() {\n          wx.login({\n            success: function success(res) {\n              var anonymousCode = '';\n              if (typeof tt !== 'undefined') {\n                anonymousCode = res.anonymousCode;\n              }\n              that.loginWithWeapp(res.code, anonymousCode, str).then(\n              function (user) {\n                if (user.error) {\n                  throw new Error(415);\n                }\n                var openid;\n                if (typeof tt !== 'undefined') {\n                  openid = user.authData.toutiao.openid;\n                } else if (typeof qq !== 'undefined') {\n                  openid = user.authData.qqapp.openid;\n                } else {\n                  openid = user.authData.weapp.openid;\n                }\n                storage.save('openid', openid);\n                storage.save('bmob', user);\n                // 保存用户其他信息到用户表\n                resolve(user);\n\n                var query = Bmob.Query('_User');\n                query.destroy(user.objectId).then(function (res) {\n                  console.log(__f__(res, \" at node_modules\\\\hydrogen-js-sdk\\\\src\\\\lib\\\\user.js:198\"));\n                }).catch(function (err) {\n                  console.log(__f__(err, \" at node_modules\\\\hydrogen-js-sdk\\\\src\\\\lib\\\\user.js:200\"));\n                });\n              },\n              function (err) {\n                reject(err);\n              });\n\n            } });\n\n        };\n\n        wx.checkSession({\n          success: function success() {\n            var c = that.current();\n            if (c === null) {\n              var e = '登陆错误，请在Bmob后台填写小程序AppSecret。';\n              reject(e);\n            }\n            resolve(c);\n            login();\n          },\n          fail: function fail() {\n            login();\n          } });\n\n      });\n    } }]);return user;}(query);\n\n\nmodule.exports = user;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL3VzZXIuanMiXSwibmFtZXMiOlsicmVxdWVzdCIsInJlcXVpcmUiLCJzdG9yYWdlIiwicXVlcnkiLCJCbW9iIiwiRXJyb3IiLCJpc09iamVjdCIsImlzU3RyaW5nIiwiaXNOdW1iZXIiLCJ1c2VyIiwidGFibGVOYW1lIiwia2V5IiwidmFsIiwic2V0RGF0YSIsImVtYWlsIiwiT2JqZWN0IiwiYXNzaWduIiwiY29uc29sZSIsImxvZyIsInJvdXRlIiwiX2NvbmZpZyIsInBhcmFtZXRlcnMiLCJSRVFVRVNUX0VNQUlMX1ZFUklGWSIsInBhcm1hIiwiUkVHSVNURVIiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiTE9HSU4iLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInRoZW4iLCJyZXMiLCJzYXZlIiwiY2F0Y2giLCJlcnIiLCJjbGVhciIsIlVTRVJTIiwiZSIsInNlbGYiLCJpIiwiaXYiLCJkZXRhaWwiLCJkIiwiZW5jcnlwdGVkRGF0YSIsImN1cnJlbnQiLCJzIiwidHQiLCJhdXRoRGF0YSIsInRvdXRpYW8iLCJzZXNzaW9uX2tleSIsInFxIiwicXFhcHAiLCJ3ZWFwcCIsImRhdGEiLCJERUNSWVBUSU9OIiwibW9iaWxlUGhvbmVOdW1iZXIiLCJzbXNDb2RlIiwiY29kZSIsImEiLCJXRUNIQVRfQVBQIiwic3RyIiwicmVxdWVzdE9wZW5JZCIsInciLCJlcnJvciIsImVycmNvZGUiLCJlcnJtc2ciLCJyZXN1bHQiLCJsaW5rV2l0aCIsInVzZXJJbmZvIiwibmlja05hbWUiLCJhdmF0YXJVcmwiLCJjdXJyZW50VXNlciIsIm9wZW5pZCIsImZldGNoIiwiZ2V0Iiwib2JqZWN0SWQiLCJzZXQiLCJhdXRoIiwidGhhdCIsImxvZ2luIiwid3giLCJzdWNjZXNzIiwiYW5vbnltb3VzQ29kZSIsImxvZ2luV2l0aFdlYXBwIiwiUXVlcnkiLCJkZXN0cm95IiwiY2hlY2tTZXNz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UixvQkFBTSxDQUFDUSxDQUFELENBQU47QUFDRDtBQUNEVCxtQkFBTyxDQUFDMkQsQ0FBRCxDQUFQO0FBQ0FSLGlCQUFLO0FBQ04sV0FUYTtBQVVkUyxjQUFJLEVBQUUsZ0JBQU07QUFDVlQsaUJBQUs7QUFDTixXQVphLEVBQWhCOztBQWNELE9BdkRNLENBQVA7QUF3REQsS0ExTk8sbUJBQXNCN0UsS0FBdEIsQ0FBVjs7O0FBNk5BdUYsTUFBTSxDQUFDQyxPQUFQLEdBQWlCbEYsSUFBakIsQyIsImZpbGUiOiI2Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHJlcXVlc3QgPSByZXF1aXJlKCcuL3JlcXVlc3QnKVxyXG5jb25zdCBzdG9yYWdlID0gcmVxdWlyZSgnLi9zdG9yYWdlJylcclxuY29uc3QgcXVlcnkgPSByZXF1aXJlKCcuL3F1ZXJ5JylcclxuY29uc3QgQm1vYiA9IHJlcXVpcmUoJy4vYm1vYicpXHJcbmNvbnN0IEVycm9yID0gcmVxdWlyZSgnLi9lcnJvcicpXHJcbmNvbnN0IHsgaXNPYmplY3QsIGlzU3RyaW5nLCBpc051bWJlciB9ID0gcmVxdWlyZSgnLi9kYXRhVHlwZScpXHJcblxyXG5jb25zdCB1c2VyID0gY2xhc3MgdXNlciBleHRlbmRzIHF1ZXJ5IHtcclxuICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICBjb25zdCB0YWJsZU5hbWUgPSAnX1VzZXInXHJcbiAgICBzdXBlcih0YWJsZU5hbWUpXHJcbiAgfVxyXG4gIHNldCAoa2V5LCB2YWwgPSAnJykge1xyXG4gICAgaWYgKGlzU3RyaW5nKGtleSkpIHtcclxuICAgICAgdGhpcy5zZXREYXRhW2tleV0gPSB2YWxcclxuICAgIH1cclxuICB9XHJcbiAgcmVxdWVzdEVtYWlsVmVyaWZ5IChlbWFpbCkge1xyXG4gICAgaWYgKCFpc1N0cmluZyhlbWFpbCkpIHtcclxuICAgICAgLy8g5byC5bi4XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcig0MTUpXHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zZXREYXRhID0gT2JqZWN0LmFzc2lnbih7fSwgeyBlbWFpbCB9KVxyXG4gICAgY29uc29sZS5sb2codGhpcy5zZXREYXRhKVxyXG4gICAgY29uc3Qgcm91dGUgPSBCbW9iLl9jb25maWcucGFyYW1ldGVycy5SRVFVRVNUX0VNQUlMX1ZFUklGWVxyXG4gICAgcmV0dXJuIHJlcXVlc3Qocm91dGUsICdwb3N0JywgdGhpcy5zZXREYXRhKVxyXG4gIH1cclxuICByZWdpc3RlciAocGFybWEpIHtcclxuICAgIGlmICghaXNPYmplY3QocGFybWEpKSB7XHJcbiAgICAgIC8vIOW8guW4uFxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoNDE1KVxyXG4gICAgfVxyXG4gICAgdGhpcy5zZXREYXRhID0gT2JqZWN0LmFzc2lnbih7fSwgcGFybWEpXHJcbiAgICBjb25zdCByb3V0ZSA9IEJtb2IuX2NvbmZpZy5wYXJhbWV0ZXJzLlJFR0lTVEVSXHJcbiAgICByZXR1cm4gcmVxdWVzdChyb3V0ZSwgJ3Bvc3QnLCB0aGlzLnNldERhdGEpXHJcbiAgfVxyXG5cclxuICBsb2dpbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XHJcbiAgICBpZiAoIWlzU3RyaW5nKHVzZXJuYW1lKSB8fCAhaXNTdHJpbmcocGFzc3dvcmQpKSB7XHJcbiAgICAgIC8vIOW8guW4uFxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoNDE1KVxyXG4gICAgfVxyXG4gICAgdGhpcy5zZXREYXRhID0gT2JqZWN0LmFzc2lnbih7fSwgeyB1c2VybmFtZSwgcGFzc3dvcmQgfSlcclxuICAgIGNvbnN0IHJvdXRlID0gQm1vYi5fY29uZmlnLnBhcmFtZXRlcnMuTE9HSU5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIHJlcXVlc3Qocm91dGUsICdnZXQnLCB0aGlzLnNldERhdGEpLnRoZW4ocmVzID0+IHtcclxuICAgICAgICBzdG9yYWdlLnNhdmUoJ2Jtb2InLCByZXMpXHJcbiAgICAgICAgcmVzb2x2ZShyZXMpXHJcbiAgICAgIH0pLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgcmVqZWN0KGVycilcclxuICAgICAgfSlcclxuICAgIH0pXHJcbiAgfVxyXG4gIGxvZ291dCAoKSB7XHJcbiAgICBzdG9yYWdlLmNsZWFyKClcclxuICB9XHJcbiAgdXNlcnMgKCkge1xyXG4gICAgY29uc3Qgcm91dGUgPSBCbW9iLl9jb25maWcucGFyYW1ldGVycy5VU0VSU1xyXG4gICAgcmV0dXJuIHJlcXVlc3Qocm91dGUsICdnZXQnKVxyXG4gIH1cclxuICBkZWNyeXB0aW9uIChlKSB7XHJcbiAgICBsZXQgc2VsZiA9IHRoaXNcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGNvbnN0IGkgPSBlLml2ID8gZS5pdiA6IGUuZGV0YWlsLml2XHJcbiAgICAgIGNvbnN0IGQgPSBlLmVuY3J5cHRlZERhdGEgPyBlLmVuY3J5cHRlZERhdGEgOiBlLmRldGFpbC5lbmNyeXB0ZWREYXRhXHJcblxyXG4gICAgICAvLyDosIPnlKjkupHlh73mlbDop6Plr4ZcclxuICAgICAgY29uc3QgY3VycmVudCA9IHNlbGYuY3VycmVudCgpXHJcbiAgICAgIGxldCBzXHJcbiAgICAgIGlmICh0eXBlb2YgKHR0KSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICBzID0gY3VycmVudC5hdXRoRGF0YS50b3V0aWFvLnNlc3Npb25fa2V5XHJcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIChxcSkgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcyA9IGN1cnJlbnQuYXV0aERhdGEucXFhcHAuc2Vzc2lvbl9rZXlcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzID0gY3VycmVudC5hdXRoRGF0YS53ZWFwcC5zZXNzaW9uX2tleVxyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IGRhdGEgPSB7XHJcbiAgICAgICAgJ3Nlc3Npb25LZXknOiBzLFxyXG4gICAgICAgICdlbmNyeXB0ZWREYXRhJzogZCxcclxuICAgICAgICAnaXYnOiBpXHJcbiAgICAgIH1cclxuICAgICAgY29uc3Qgcm91dGUgPSBCbW9iLl9jb25maWcucGFyYW1ldGVycy5ERUNSWVBUSU9OXHJcbiAgICAgIHJlcXVlc3Qocm91dGUsICdQT1NUJywgZGF0YSlcclxuICAgICAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgICAgICByZXNvbHZlKHJlcylcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgcmVqZWN0KGVycilcclxuICAgICAgICB9KVxyXG4gICAgfSlcclxuICB9XHJcbiAgc2lnbk9yTG9naW5CeU1vYmlsZVBob25lIChtb2JpbGVQaG9uZU51bWJlciwgc21zQ29kZSkge1xyXG4gICAgLy8g5omL5py65Y+355m76ZmGXHJcbiAgICBpZiAoIWlzTnVtYmVyKG1vYmlsZVBob25lTnVtYmVyKSB8fCAhaXNOdW1iZXIoc21zQ29kZSkpIHtcclxuICAgICAgLy8g5byC5bi4XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcig0MTUpXHJcbiAgICB9XHJcbiAgICB0aGlzLnNldERhdGEgPSBPYmplY3QuYXNzaWduKHt9LCB7IG1vYmlsZVBob25lTnVtYmVyLCBzbXNDb2RlIH0pXHJcbiAgICBjb25zdCByb3V0ZSA9IEJtb2IuX2NvbmZpZy5wYXJhbWV0ZXJzLkxPR0lOXHJcbiAgICByZXR1cm4gcmVxdWVzdChyb3V0ZSwgJ2dldCcsIHRoaXMuc2V0RGF0YSlcclxuICB9XHJcbiAgcmVxdWVzdE9wZW5JZCAoY29kZSwgYSA9ICcnKSB7XHJcbiAgICBjb25zdCByb3V0ZSA9IEJtb2IuX2NvbmZpZy5wYXJhbWV0ZXJzLldFQ0hBVF9BUFBcclxuICAgIHJldHVybiByZXF1ZXN0KHJvdXRlICsgY29kZSwgJ1BPU1QnLCB7J2Fub255bW91c19jb2RlJzogYX0pXHJcbiAgfVxyXG4gIGxpbmtXaXRoIChkYXRhKSB7XHJcbiAgICAvLyDnrKzkuInmlrnnmbvpmYZcclxuICAgIGxldCBhdXRoRGF0YSA9IHsgJ2F1dGhEYXRhJzogZGF0YSB9XHJcbiAgICBjb25zdCByb3V0ZSA9IEJtb2IuX2NvbmZpZy5wYXJhbWV0ZXJzLlVTRVJTXHJcbiAgICByZXR1cm4gcmVxdWVzdChyb3V0ZSwgJ1BPU1QnLCBhdXRoRGF0YSlcclxuICB9XHJcbiAgbG9naW5XaXRoV2VhcHAgKGNvZGUsIGEgPSAnJywgc3RyKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICB0aGlzLnJlcXVlc3RPcGVuSWQoY29kZSwgYSkudGhlbihyZXMgPT4ge1xyXG4gICAgICAgIGxldCB3ID0geyAnd2VhcHAnOiByZXMgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgKHR0KSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgIGRlbGV0ZSByZXMuZXJyb3JcclxuICAgICAgICAgIHcgPSB7ICd0b3V0aWFvJzogcmVzIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiAocXEpICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgZGVsZXRlIHJlcy5lcnJjb2RlXHJcbiAgICAgICAgICBkZWxldGUgcmVzLmVycm1zZ1xyXG4gICAgICAgICAgdyA9IHsgJ3FxYXBwJzogcmVzIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHN0ciA9PT0gJ29wZW5pZCcpIHtcclxuICAgICAgICAgIHJlc29sdmUocmVzKVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmxpbmtXaXRoKHcpXHJcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdClcclxuICAgICAgICB9XHJcbiAgICAgIH0pLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgcmVqZWN0KGVycilcclxuICAgICAgfSlcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICB1cEluZm8gKHVzZXJJbmZvKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBsZXQgbmlja05hbWUgPSB1c2VySW5mby5uaWNrTmFtZVxyXG4gICAgICBsZXQgYXZhdGFyVXJsID0gdXNlckluZm8uYXZhdGFyVXJsXHJcblxyXG4gICAgICBsZXQgY3VycmVudFVzZXIgPSB0aGlzLmN1cnJlbnQoKVxyXG4gICAgICBpZiAoIWN1cnJlbnRVc2VyKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKDQxNSlcclxuICAgICAgfVxyXG4gICAgICBsZXQgb3BlbmlkID0gc3RvcmFnZS5mZXRjaCgnb3BlbmlkJylcclxuICAgICAgdGhpcy5nZXQoY3VycmVudFVzZXIub2JqZWN0SWQpLnRoZW4ocmVzID0+IHtcclxuICAgICAgICByZXMuc2V0KCduaWNrTmFtZScsIG5pY2tOYW1lKVxyXG4gICAgICAgIHJlcy5zZXQoJ3VzZXJQaWMnLCBhdmF0YXJVcmwpXHJcbiAgICAgICAgcmVzLnNldCgnb3BlbmlkJywgb3BlbmlkKVxyXG4gICAgICAgIHJlcy5zYXZlKCkudGhlbihyZXN1bHQgPT4ge1xyXG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpXHJcbiAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGVycilcclxuICAgICAgICAgIHJlamVjdChlcnIpXHJcbiAgICAgICAgfSlcclxuICAgICAgfSkuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlcnIpXHJcbiAgICAgICAgcmVqZWN0KGVycilcclxuICAgICAgfSlcclxuICAgIH0pXHJcbiAgfVxyXG4gIG9wZW5JZCAoKSB7XHJcbiAgICBjb25zb2xlLmxvZygnZmZmJylcclxuICAgIHRoaXMuYXV0aCgnb3BlbmlkJylcclxuICB9XHJcbiAgYXV0aCAoc3RyID0gJycpIHtcclxuICAgIGxldCB0aGF0ID0gdGhpc1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgY29uc3QgbG9naW4gPSAoKSA9PiB7XHJcbiAgICAgICAgd3gubG9naW4oe1xyXG4gICAgICAgICAgc3VjY2VzczogcmVzID0+IHtcclxuICAgICAgICAgICAgbGV0IGFub255bW91c0NvZGUgPSAnJ1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mICh0dCkgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgYW5vbnltb3VzQ29kZSA9IHJlcy5hbm9ueW1vdXNDb2RlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhhdC5sb2dpbldpdGhXZWFwcChyZXMuY29kZSwgYW5vbnltb3VzQ29kZSwgc3RyKS50aGVuKFxyXG4gICAgICAgICAgICAgIHVzZXIgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHVzZXIuZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKDQxNSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxldCBvcGVuaWRcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKHR0KSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgb3BlbmlkID0gdXNlci5hdXRoRGF0YS50b3V0aWFvLm9wZW5pZFxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgKHFxKSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgb3BlbmlkID0gdXNlci5hdXRoRGF0YS5xcWFwcC5vcGVuaWRcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIG9wZW5pZCA9IHVzZXIuYXV0aERhdGEud2VhcHAub3BlbmlkXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzdG9yYWdlLnNhdmUoJ29wZW5pZCcsIG9wZW5pZClcclxuICAgICAgICAgICAgICAgIHN0b3JhZ2Uuc2F2ZSgnYm1vYicsIHVzZXIpXHJcbiAgICAgICAgICAgICAgICAvLyDkv53lrZjnlKjmiLflhbbku5bkv6Hmga/liLDnlKjmiLfooahcclxuICAgICAgICAgICAgICAgIHJlc29sdmUodXNlcilcclxuXHRcdFx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHRcdFx0Y29uc3QgcXVlcnkgPSBCbW9iLlF1ZXJ5KCdfVXNlcicpO1xyXG5cdFx0XHRcdFx0XHRcdFx0cXVlcnkuZGVzdHJveSh1c2VyLm9iamVjdElkKS50aGVuKHJlcyA9PiB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKHJlcylcclxuXHRcdFx0XHRcdFx0XHRcdH0pLmNhdGNoKGVyciA9PiB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKGVycilcclxuXHRcdFx0XHRcdFx0XHRcdH0pXHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHd4LmNoZWNrU2Vzc2lvbih7XHJcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgbGV0IGMgPSB0aGF0LmN1cnJlbnQoKVxyXG4gICAgICAgICAgaWYgKGMgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgY29uc3QgZSA9ICfnmbvpmYbplJnor6/vvIzor7flnKhCbW9i5ZCO5Y+w5aGr5YaZ5bCP56iL5bqPQXBwU2VjcmV044CCJ1xyXG4gICAgICAgICAgICByZWplY3QoZSlcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJlc29sdmUoYylcclxuICAgICAgICAgIGxvZ2luKClcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZhaWw6ICgpID0+IHtcclxuICAgICAgICAgIGxvZ2luKClcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9KVxyXG4gIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB1c2VyXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///62\n");

/***/ }),

/***/ 63:
/*!****************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/file.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}var request = __webpack_require__(/*! ./request */ 27);\nvar Bmob = __webpack_require__(/*! ./bmob */ 15);\nvar Error = __webpack_require__(/*! ./error */ 24);\nvar utils = __webpack_require__(/*! ./utils */ 16);\nvar md5 = __webpack_require__(/*! ./md5 */ 54);\nvar requestHap = \"xxrequire('@system.request')xx\";var _require =\n__webpack_require__(/*! ./dataType */ 23),isString = _require.isString,isArray = _require.isArray;\nvar list = [];var\n\nfile = /*#__PURE__*/function () {\n  function file(name, parma) {_classCallCheck(this, file);\n    if (name && parma) {\n      if (!isString(name)) {\n        throw new Error(415);\n      }\n      var ext = name.substring(name.lastIndexOf('.') + 1);\n      list.push({ name: name, route: \"\".concat(Bmob._config.parameters.FILES, \"/\").concat(Bmob._config.secretKey, \".\").concat(ext), data: parma });\n    }\n  }_createClass(file, [{ key: \"save\", value: function save()\n    {\n      if (!list.length) {\n        throw new Error(417);\n      }\n      var fileObj;\n      // //获取当前应用类型\n      var type = utils.getAppType();\n\n      // h5\n      if (type === 'h5' || type === 'nodejs') {\n        fileObj = new Promise(function (resolve, reject) {\n          var data = [];\n          for (var _i = 0; _i < list.length; _i++) {var item = list[_i];\n            request(item.route, 'post', item.data).then(function (url) {\n              data.push(url);\n              if (data.length === list.length) {\n                list = [];\n                resolve(data);\n                reject(data);\n              }\n            }).catch(function (err) {\n              data.push(err);\n            });\n          }\n        });\n      } else if (type === 'wx') {\n        // 小程序\n        fileObj = new Promise(function (resolve, reject) {\n          if (undefined === Bmob.User) {\n            Bmob = __webpack_require__(/*! ./bmob */ 15);\n          }\n\n          var sessionToken = 'bmob';\n          var current = Bmob.User.current();\n          if (current) {\n            sessionToken = current.sessionToken;\n          }\n\n          var data = [];\n\n          var t = Math.round(new Date().getTime() / 1000);\n          var rand = Bmob.utils.randomString();\n          var route = list[0].route;\n          console.log(__f__('rand', rand, Bmob, route, \" at node_modules\\\\hydrogen-js-sdk\\\\src\\\\lib\\\\file.js:63\"));\n\n          var sign = md5.hexMD5(route + t + Bmob._config.securityCode + rand);\n          var key = {\n            'content-type': 'application/json',\n            'X-Bmob-SDK-Type': 'wechatApp',\n            'X-Bmob-Safe-Sign': sign,\n            'X-Bmob-Safe-Timestamp': t,\n            'X-Bmob-Noncestr-Key': rand,\n            'X-Bmob-Session-Token': sessionToken,\n            'X-Bmob-Secret-Key': Bmob._config.secretKey };\n\n          var formData = Object.assign({ '_ContentType': 'text/plain', 'mime_type': 'text/plain', 'category': 'wechatApp', '_ClientVersion': 'js3.6.1', '_InstallationId': 'bmob' }, key);\n          for (var _i2 = 0; _i2 < list.length; _i2++) {var item = list[_i2];\n            wx.uploadFile({\n              url: Bmob._config.host + item.route, // 仅为示例，非真实的接口地址\n              filePath: item.data,\n              name: 'file',\n              header: key,\n              formData: formData,\n              success: function success(res) {\n                var url = JSON.parse(res.data);\n                data.push(url);\n                if (data.length === list.length) {\n                  list = [];\n                  resolve(data);\n                  reject(data);\n                }\n              },\n              fail: function fail(err) {\n                data.push(err);\n              } });\n\n          }\n        });\n      } else if (type === 'hap') {\n        // 快应用功能\n        fileObj = new Promise(function (resolve, reject) {\n          if (undefined === Bmob.User) {\n            Bmob = __webpack_require__(/*! ./bmob */ 15);\n          }\n          var sessionToken = 'bmob';\n          var current = Bmob.User.current();\n          if (current) {\n            sessionToken = current.sessionToken;\n          }\n\n          var data = [];\n          var t = Math.round(new Date().getTime() / 1000);\n          var rand = Bmob.utils.randomString();\n          var route = list[0].route;\n          console.log(__f__('rand', rand, Bmob, route, \" at node_modules\\\\hydrogen-js-sdk\\\\src\\\\lib\\\\file.js:114\"));\n\n          var sign = md5.hexMD5(route + t + Bmob._config.securityCode + rand);\n          var key = {\n            'content-type': 'application/json',\n            'X-Bmob-SDK-Type': 'wechatApp',\n            'X-Bmob-Safe-Sign': sign,\n            'X-Bmob-Safe-Timestamp': t,\n            'X-Bmob-Noncestr-Key': rand,\n            'X-Bmob-Session-Token': sessionToken,\n            'X-Bmob-Secret-Key': Bmob._config.secretKey };\n\n          var formData = Object.assign({ '_ContentType': 'text/plain', 'mime_type': 'text/plain', 'category': 'wechatApp', '_ClientVersion': 'js3.6.1', '_InstallationId': 'bmob' }, key);\n          for (var _i3 = 0; _i3 < list.length; _i3++) {var item = list[_i3];\n            requestHap.upload({\n              url: Bmob._config.host + item.route,\n              files: [\n              {\n                uri: item.data,\n                name: 'file',\n                filename: item.name }],\n\n\n              header: {\n                'X-Bmob-SDK-Type': 'wechatApp' },\n\n              data: formData,\n              success: function success(res) {\n                console.log(__f__('handling success' + data, \" at node_modules\\\\hydrogen-js-sdk\\\\src\\\\lib\\\\file.js:142\"));\n                var url = res.data;\n                data.push(url);\n                if (data.length === list.length) {\n                  list = [];\n                  resolve(data);\n                  reject(data);\n                }\n              },\n              fail: function fail(data, code) {\n                console.log(__f__(\"handling fail, code = \".concat(code), \" at node_modules\\\\hydrogen-js-sdk\\\\src\\\\lib\\\\file.js:152\"));\n              } });\n\n          }\n        });\n      }\n      return fileObj;\n    } }, { key: \"destroy\", value: function destroy(\n    parma) {\n      if (isString(parma)) {\n        return request(\"\".concat(Bmob._config.parameters.FILES, \"/upyun/\").concat(parma.split('.com/')[1]), 'delete');\n      } else if (isArray(parma)) {\n        var data = [];\n        parma.map(function (item) {\n          data.push(item.split('.com/')[1]);\n        });\n        return request(Bmob._config.parameters.DELFILES, 'post', { 'upyun': data });\n      } else {\n        throw new Error(415);\n      }\n    } }]);return file;}();\n\n\nmodule.exports = file;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///63\n");

/***/ }),

/***/ 64:
/*!***************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/pay.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}var request = __webpack_require__(/*! ./request */ 27);\nvar Bmob = __webpack_require__(/*! ./bmob */ 15);\nvar Error = __webpack_require__(/*! ./error */ 24);var\n\npay = /*#__PURE__*/function () {function pay() {_classCallCheck(this, pay);}_createClass(pay, [{ key: \"weApp\", value: function weApp(\n    price, productName, body) {\n      var openid = wx.getStorageSync('openid');\n      if (!price || !productName || !body || !openid) {\n        throw new Error(416);\n      }\n      // 传参数金额，名称，描述,openid\n      var data = { 'order_price': price, 'product_name': productName, 'body': body, 'open_id': openid, 'pay_type': 4 };\n\n      var route = Bmob._config.parameters.PAY;\n      return request(route, 'post', data);\n    } }]);return pay;}();\n\n\nmodule.exports = pay;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL3BheS5qcyJdLCJuYW1lcyI6WyJyZXF1ZXN0IiwicmVxdWlyZSIsIkJtb2IiLCJFcnJvciIsInBheSIsInByaWNlIiwicHJvZHVjdE5hbWUiLCJib2R5Iiwib3BlbmlkIiwid3giLCJnZXRTdG9yYWdlU3luYyIsImRhdGEiLCJyb3V0ZSIsIl9jb25maWciLCJwYXJhbWV0ZXJzIiwiUEFZIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjZwQkFBQSxJQUFNQSxPQUFPLEdBQUdDLG1CQUFPLENBQUMsbUJBQUQsQ0FBdkI7QUFDQSxJQUFNQyxJQUFJLEdBQUdELG1CQUFPLENBQUMsZ0JBQUQsQ0FBcEI7QUFDQSxJQUFNRSxLQUFLLEdBQUdGLG1CQUFPLENBQUMsaUJBQUQsQ0FBckIsQzs7QUFFTUcsRztBQUNHQyxTLEVBQU9DLFcsRUFBYUMsSSxFQUFNO0FBQy9CLFVBQUlDLE1BQU0sR0FBR0MsRUFBRSxDQUFDQyxjQUFILENBQWtCLFFBQWxCLENBQWI7QUFDQSxVQUFJLENBQUNMLEtBQUQsSUFBVSxDQUFDQyxXQUFYLElBQTBCLENBQUNDLElBQTNCLElBQW1DLENBQUNDLE1BQXhDLEVBQWdEO0FBQzlDLGNBQU0sSUFBSUwsS0FBSixDQUFVLEdBQVYsQ0FBTjtBQUNEO0FBQ0Q7QUFDQSxVQUFJUSxJQUFJLEdBQUcsRUFBRSxlQUFlTixLQUFqQixFQUF3QixnQkFBZ0JDLFdBQXhDLEVBQXFELFFBQVFDLElBQTdELEVBQW1FLFdBQVdDLE1BQTlFLEVBQXNGLFlBQVksQ0FBbEcsRUFBWDs7QUFFQSxVQUFJSSxLQUFLLEdBQUdWLElBQUksQ0FBQ1csT0FBTCxDQUFhQyxVQUFiLENBQXdCQyxHQUFwQztBQUNBLGFBQU9mLE9BQU8sQ0FBQ1ksS0FBRCxFQUFRLE1BQVIsRUFBZ0JELElBQWhCLENBQWQ7QUFDRCxLOzs7QUFHSEssTUFBTSxDQUFDQyxPQUFQLEdBQWlCYixHQUFqQiIsImZpbGUiOiI2NC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHJlcXVlc3QgPSByZXF1aXJlKCcuL3JlcXVlc3QnKVxuY29uc3QgQm1vYiA9IHJlcXVpcmUoJy4vYm1vYicpXG5jb25zdCBFcnJvciA9IHJlcXVpcmUoJy4vZXJyb3InKVxuXG5jbGFzcyBwYXkge1xuICB3ZUFwcCAocHJpY2UsIHByb2R1Y3ROYW1lLCBib2R5KSB7XG4gICAgbGV0IG9wZW5pZCA9IHd4LmdldFN0b3JhZ2VTeW5jKCdvcGVuaWQnKVxuICAgIGlmICghcHJpY2UgfHwgIXByb2R1Y3ROYW1lIHx8ICFib2R5IHx8ICFvcGVuaWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcig0MTYpXG4gICAgfVxuICAgIC8vIOS8oOWPguaVsOmHkemine+8jOWQjeensO+8jOaPj+i/sCxvcGVuaWRcbiAgICBsZXQgZGF0YSA9IHsgJ29yZGVyX3ByaWNlJzogcHJpY2UsICdwcm9kdWN0X25hbWUnOiBwcm9kdWN0TmFtZSwgJ2JvZHknOiBib2R5LCAnb3Blbl9pZCc6IG9wZW5pZCwgJ3BheV90eXBlJzogNCB9XG5cbiAgICBsZXQgcm91dGUgPSBCbW9iLl9jb25maWcucGFyYW1ldGVycy5QQVlcbiAgICByZXR1cm4gcmVxdWVzdChyb3V0ZSwgJ3Bvc3QnLCBkYXRhKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGF5XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///64\n");

/***/ }),

/***/ 65:
/*!******************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/socket.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");}function _iterableToArrayLimit(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i[\"return\"] != null) _i[\"return\"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;} // const Bmob = require('./bmob')\nvar Error = __webpack_require__(/*! ./error */ 24);\nvar Emitter = {\n  setup: function setup(target) {\n    var listeners = [];\n\n    Object.assign(target, {\n      on: function on(type, handle) {\n        if (typeof handle === 'function') {\n          listeners.push([type, handle]);\n        }\n      },\n      emit: function emit(type) {for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {params[_key - 1] = arguments[_key];}\n        listeners.forEach(\n        function (_ref) {var _ref2 = _slicedToArray(_ref, 2),listenType = _ref2[0],handle = _ref2[1];return type === listenType && handle.apply(void 0, params);});\n\n      },\n      removeAllListeners: function removeAllListeners() {\n        listeners = [];\n      } });\n\n  } };\n\n\n/**\n        * 基于小程序 WebSocket 接口封装信道\n        */\nmodule.exports = /*#__PURE__*/function () {\n  function socket() {var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';_classCallCheck(this, socket);\n    console.log(__f__('id', id, \" at node_modules\\\\hydrogen-js-sdk\\\\src\\\\lib\\\\socket.js:30\"));\n\n    if (id === '') {\n      throw new Error(415);\n    }\n    this.config = {\n      host: 'wss.bmobcloud.com' };\n\n    Emitter.setup(this.emitter = {});\n    this.applicationId = id;\n    this.initialize();\n  }_createClass(socket, [{ key: \"handshake\", value: function handshake()\n    {\n      function complete(data) {\n        if (data instanceof Error) {\n          self.connecting = false;\n          self.onError(data.message);\n        } else {\n          return data.split(':')[0];\n        }\n      }\n\n      var url = 'https://' + this.config.host + '/socket.io/1/?t=' + new Date().getTime();\n      var dataObject = {};\n      var data = JSON.stringify(dataObject);\n\n      var method = 'GET';\n\n      return new Promise(function (resolve, reject) {\n        wx.request({\n          method: method,\n          url: url,\n          data: data,\n          header: {\n            'content-type': 'text/plain' },\n\n          success: function success(res) {\n            if (res.data && res.data.statusCode) {\n              return resolve('request error', e);\n            } else if (res.statusCode !== 200) {\n              return resolve('request error', e);\n            } else {\n              return resolve(complete(res.data));\n            }\n          },\n          fail: function fail(e) {\n            return resolve('request error', e);\n          } });\n\n      });\n    } }, { key: \"initialize\", value: function initialize()\n    {var _this = this;\n      this.handshake().then(function (protocol) {\n        try {\n          _this.connect(\n          \"wss://\".concat(_this.config.host, \"/socket.io/1/websocket/\") + protocol,\n          {});\n\n        } catch (connectError) {\n          console.error(__f__({ connectError: connectError }, \" at node_modules\\\\hydrogen-js-sdk\\\\src\\\\lib\\\\socket.js:89\"));\n          throw connectError;\n        }\n      });\n      this.on('close', function () {\n        console.log(__f__('连接已中断', \" at node_modules\\\\hydrogen-js-sdk\\\\src\\\\lib\\\\socket.js:94\"));\n      });\n\n      return new Promise(function (resolve, reject) {\n        _this.on('server_pub', function (data) {\n          switch (data.action) {\n            case 'updateTable':\n              _this.onUpdateTable(data.tableName, data.data);\n              break;\n            case 'updateRow':\n              _this.onUpdateRow(data.tableName, data.objectId, data.data);\n              break;\n            case 'deleteTable':\n              _this.onDeleteTable(data.tableName, data.data);\n              break;\n            case 'deleteRow':\n              _this.onDeleteRow(data.tableName, data.objectId, data.data);\n              break;}\n\n        });\n\n        // 连接上socket.io服务器后触发的事件\n        _this.on('client_send_data', function (resp) {\n          _this.onInitListen();\n        });\n      });\n    } }, { key: \"onInitListen\", value: function onInitListen()\n\n    {} }, { key: \"connect\", value: function connect(\n\n    url, header) {var _this2 = this;\n      // 小程序 wx.connectSocket() API header 参数无效，把会话信息附加在 URL 上\n      var query = Object.keys(header).\n      map(function (key) {return \"\".concat(key, \"=\").concat(encodeURIComponent(header[key]));}).\n      join('&');\n      var seperator = url.indexOf('?') > -1 ? '&' : '?';\n      url = [url, query].join(seperator);\n\n      return new Promise(function (resolve, reject) {\n        wx.onSocketOpen(resolve);\n        wx.onSocketError(reject);\n        wx.onSocketMessage(function (packet) {\n          try {\n            var filter = function filter(str) {var _JSON$parse =\n              JSON.parse(str),name = _JSON$parse.name,args = _JSON$parse.args;\n              return { name: name, args: args };\n            };\n            var str = packet.data;\n            var startStr = str.slice(0, 4);\n            // 检测心跳\n            if (startStr === '2:::') {\n              _this2.emit(false, true);\n            }\n            str = str.slice(4);\n\n            // 截取后不能为空\n            if (str === null || str === '') {\n              return;\n            }var _filter =\n            filter(str),name = _filter.name,args = _filter.args;\n            var data = args == null ? '' : JSON.parse(args[0]);\n            _this2.emitter.emit(name, data);\n          } catch (e) {\n            console.log(__f__('Handle packet failed: ' + packet.data, e, \" at node_modules\\\\hydrogen-js-sdk\\\\src\\\\lib\\\\socket.js:157\"));\n          }\n        });\n        wx.onSocketClose(function () {return _this2.emitter.emit('close');});\n        wx.connectSocket({ url: url, header: header });\n      });\n    } }, { key: \"on\", value: function on(\n\n    message, handle) {\n      this.emitter.on(message, handle);\n    } }, { key: \"emit\", value: function emit(\n\n    message, data) {\n      data = data === undefined ? '5:::' : '2:::';\n      message = message ? JSON.stringify(message) : '';\n      wx.sendSocketMessage({\n        data: data + message });\n\n    } }, { key: \"emitData\", value: function emitData(\n\n    name, data) {\n      data = JSON.stringify(data);\n      return { name: name, args: [data] };\n    } }, { key: \"updateTable\", value: function updateTable(\n\n    tablename) {\n      var data = {\n        appKey: this.applicationId,\n        tableName: tablename,\n        objectId: '',\n        action: 'updateTable' };\n\n      data = this.emitData('client_sub', data);\n      this.emit(data);\n    }\n\n    // 取消订阅更新数据表的数据\n  }, { key: \"unsubUpdateTable\", value: function unsubUpdateTable(tablename) {\n      var data = {\n        appKey: this.applicationId,\n        tableName: tablename,\n        objectId: '',\n        action: 'unsub_updateTable' };\n\n      data = this.emitData('client_sub', data);\n      this.emit(data);\n    }\n\n    // 订阅行更新的数据\n  }, { key: \"updateRow\", value: function updateRow(tablename, objectId) {\n      var data = {\n        appKey: this.applicationId,\n        tableName: tablename,\n        objectId: objectId,\n        action: 'updateRow' };\n\n      data = this.emitData('client_sub', data);\n      this.emit(data);\n    }\n\n    // 取消订阅行更新的数据\n  }, { key: \"unsubUpdateRow\", value: function unsubUpdateRow(tablename, objectId) {\n      var data = {\n        appKey: this.applicationId,\n        tableName: tablename,\n        objectId: objectId,\n        action: 'unsub_updateRow' };\n\n      data = this.emitData('client_sub', data);\n      this.emit(data);\n    }\n\n    // 订阅表删除的数据\n  }, { key: \"deleteTable\", value: function deleteTable(tablename) {\n      var data = {\n        appKey: this.applicationId,\n        tableName: tablename,\n        objectId: '',\n        action: 'deleteTable' };\n\n      data = this.emitData('client_sub', data);\n      this.emit(data);\n    }\n\n    // 取消订阅表删除的数据\n  }, { key: \"unsubDeleteTable\", value: function unsubDeleteTable(tablename) {\n      var data = {\n        appKey: this.applicationId,\n        tableName: tablename,\n        objectId: '',\n        action: 'unsub_deleteTable' };\n\n      data = this.emitData('client_sub', data);\n      this.emit(data);\n    }\n\n    // 订阅更新数据表的数据\n  }, { key: \"deleteRow\", value: function deleteRow(tablename, objectId) {\n      var data = {\n        appKey: this.applicationId,\n        tableName: tablename,\n        objectId: objectId,\n        action: 'deleteRow' };\n\n      data = this.emitData('client_sub', data);\n      this.emit(data);\n    }\n\n    // 订阅更新数据表的数据\n  }, { key: \"unsubDeleteRow\", value: function unsubDeleteRow(tablename, objectId) {\n      var data = {\n        appKey: this.applicationId,\n        tableName: tablename,\n        objectId: objectId,\n        action: 'unsub_deleteRow' };\n\n      data = this.emitData('client_sub', data);\n      this.emit(data);\n    }\n\n    // 监听服务器返回的更新数据表的数据，需要用户重写\n  }, { key: \"onUpdateTable\", value: function onUpdateTable(tablename, data) {}\n\n    // 监听服务器返回的更新数据表的数据，需要用户重写\n  }, { key: \"onUpdateRow\", value: function onUpdateRow(tablename, objectId, data) {}\n\n    // 监听服务器返回的更新数据表的数据，需要用户重写\n  }, { key: \"onDeleteTable\", value: function onDeleteTable(tablename, data) {}\n\n    // 监听服务器返回的更新数据表的数据，需要用户重写\n  }, { key: \"onDeleteRow\", value: function onDeleteRow(tablename, objectId, data) {} }]);return socket;}();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///65\n");

/***/ }),

/***/ 66:
/*!******************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/common.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var request = __webpack_require__(/*! ./request */ 27);\nvar Bmob = __webpack_require__(/*! ./bmob */ 15);\nvar Error = __webpack_require__(/*! ./error */ 24);var _require =\n__webpack_require__(/*! ./dataType */ 23),isObject = _require.isObject,isString = _require.isString;\n\n// --------------小程序SDK-------------------\n\n/**\n * 生成小程序二维码\n * @return {Object}\n */\nvar generateCode = function generateCode(data) {\n  if (!isObject(data)) {\n    // 参数异常\n    throw new Error(415);\n  }\n  var route = Bmob._config.parameters.GENERATECODE;\n  return request(route, 'post', data);\n};\n\n/**\n    * 获取access_token\n    * @return {Object}\n    */\nvar getAccessToken = function getAccessToken(data) {\n  var route = Bmob._config.parameters.GETACCESSTOKEN;\n  return request(route, 'get');\n};\n\n/**\n    * 小程序模版信息\n    * @return {Object}\n    */\nvar sendWeAppMessage = function sendWeAppMessage(data) {\n  if (!isObject(data)) {\n    // 参数异常\n    throw new Error(415);\n  }\n  var route = Bmob._config.parameters.SENDWEAPPMESSAGE;\n  return request(route, 'post', data);\n};\n\nvar sendMessage = function sendMessage(data) {\n  //       let request = Bmob._request(\"wechatApp/SendWeAppMessage\", null, null, 'POST', Bmob._encode(data, null, true));\n  return 1;\n};\n\n/**\n    * 小程序图片上传\n    * @return {Object}\n    */\n\n/**\n        * 微信退款\n        * @return {Object}\n        */\nvar refund = function refund(data) {\n  if (!isObject(data)) {\n    // 参数异常\n    throw new Error(415);\n  }\n  var route = Bmob._config.parameters.REFUND;\n  return request(route, 'post', data);\n};\n\n/**\n    * 微信主人通知(主人信息推送)\n    * @return {Object}\n    */\nvar notifyMsg = function notifyMsg(data) {\n  if (!isObject(data)) {\n    // 参数异常\n    throw new Error(415);\n  }\n  var route = Bmob._config.parameters.NOTIFYMSG;\n  return request(route, 'post', data);\n};\n\n// --------------RESTful SDK-------------------\n\n/**\n * 密码重置\n * @return {Object}\n */\n\n// Email 重置\nvar requestPasswordReset = function requestPasswordReset(data) {\n  if (!isObject(data)) {\n    // 参数异常\n    throw new Error(415);\n  }\n  var route = Bmob._config.parameters.REQUESTPASSWORDRESET;\n  return request(route, 'post', data);\n};\n\n// 短信验证码重置\nvar resetPasswordBySmsCode = function resetPasswordBySmsCode(smsCode, data) {\n  if (!isString(smsCode)) {\n    // 参数异常\n    throw new Error(415);\n  }\n  var route = \"\".concat(Bmob._config.parameters.RESETPASSWORDBYSMSCODE, \"/\").concat(smsCode);\n  return request(route, 'put', data);\n};\n\n// 提供旧密码方式安全修改用户密码\nvar updateUserPassword = function updateUserPassword(objectId, data) {\n  if (!isObject(data) || !isString(objectId)) {\n    // 参数异常\n    throw new Error(415);\n  }\n  var route = \"\".concat(Bmob._config.parameters.UPDATEUSERPASSWORD, \"/\").concat(objectId);\n  return request(route, 'put', data);\n};\n\n// 检测小程序文本是否违法\nvar checkMsg = function checkMsg(content) {\n  if (!isString(content)) {\n    // 参数异常\n    throw new Error(415);\n  }\n  var route = \"\".concat(Bmob._config.parameters.CHECK_MSG);\n  var data = { 'content': content };\n  return request(route, 'post', data);\n};\n\n/**\n    * 获取服务器时间\n    * @return {Object}\n    */\n\nvar timestamp = function timestamp() {\n  var route = Bmob._config.parameters.TIMESTAMP;\n  return request(route, 'get');\n};\n\n/**\n    * 推送消息\n    * @return {Object}\n    */\nvar push = function push(data) {\n  if (!isObject(data)) {\n    // 参数异常\n    throw new Error(415);\n  }\n  var route = Bmob._config.parameters.PUSH;\n  return request(route, 'post', data);\n};\n\n// ---------------云函数------------------------\n/**\n * 云函数\n * @return {Object}\n */\nvar functions = function functions(funName, data) {\n  // 如果运行的云函数不需要传入参数，注意，\"{}\"是不能缺的\n  if (!data) {\n    data = {};\n  }\n  if (!isString(funName)) {\n    // 参数异常\n    throw new Error(415);\n  }\n  var route = \"\".concat(Bmob._config.parameters.FUNCTIONS, \"/\").concat(funName);\n  return new Promise(function (resolve, reject) {\n    request(route, 'post', data).\n    then(function (_ref) {var result = _ref.result;\n      try {\n        resolve(JSON.parse(result));\n      } catch (error) {\n        resolve(result);\n      }\n    }).\n    catch(function (err) {\n      reject(err);\n    });\n  });\n};\n\nvar geoPoint = function geoPoint(_ref2) {var latitude = _ref2.latitude,longitude = _ref2.longitude;\n  var validate = function validate(latitude, longitude) {\n    if (latitude < -90.0) {\n      throw new Error(419);\n    }\n    if (latitude > 90.0) {\n      throw new Error(419);\n    }\n    if (longitude < -180.0) {\n      throw new Error(419);\n    }\n    if (longitude > 180.0) {\n      throw new Error(419);\n    }\n    return { latitude: latitude, longitude: longitude };\n  };\n  validate(latitude, longitude);\n  return {\n    '__type': 'GeoPoint',\n    'latitude': latitude,\n    'longitude': longitude };\n\n};\n\nmodule.exports = {\n  generateCode: generateCode,\n  sendMessage: sendMessage,\n  getAccessToken: getAccessToken,\n  sendWeAppMessage: sendWeAppMessage,\n  refund: refund,\n  notifyMsg: notifyMsg,\n  functions: functions,\n  timestamp: timestamp,\n  requestPasswordReset: requestPasswordReset,\n  resetPasswordBySmsCode: resetPasswordBySmsCode,\n  updateUserPassword: updateUserPassword,\n  geoPoint: geoPoint,\n  checkMsg: checkMsg,\n  push: push };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL2NvbW1vbi5qcyJdLCJuYW1lcyI6WyJyZXF1ZXN0IiwicmVxdWlyZSIsIkJtb2IiLCJFcnJvciIsImlzT2JqZWN0IiwiaXNTdHJpbmciLCJnZW5lcmF0ZUNvZGUiLCJkYXRhIiwicm91dGUiLCJfY29uZmlnIiwicGFyYW1ldGVycyIsIkdFTkVSQVRFQ09ERSIsImdldEFjY2Vzc1Rva2VuIiwiR0VUQUNDRVNTVE9LRU4iLCJzZW5kV2VBcHBNZXNzYWdlIiwiU0VORFdFQVBQTUVTU0FHRSIsInNlbmRNZXNzYWdlIiwicmVmdW5kIiwiUkVGVU5EIiwibm90aWZ5TXNnIiwiTk9USUZZTVNHIiwicmVxdWVzdFBhc3N3b3JkUmVzZXQiLCJSRVFVRVNUUEFTU1dPUkRSRVNFVCIsInJlc2V0UGFzc3dvcmRCeVNtc0NvZGUiLCJzbXNDb2RlIiwiUkVTRVRQQVNTV09SREJZU01TQ09ERSIsInVwZGF0ZVVzZXJQYXNzd29yZCIsIm9iamVjdElkIiwiVVBEQVRFVVNFUlBBU1NXT1JEIiwiY2hlY2tNc2ciLCJjb250ZW50IiwiQ0hFQ0tfTVNHIiwidGltZXN0YW1wIiwiVElNRVNUQU1QIiwicHVzaCIsIlBVU0giLCJmdW5jdGlvbnMiLCJmdW5OYW1lIiwiRlVOQ1RJT05TIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJ0aGVuIiwicmVzdWx0IiwiSlNPTiIsInBhcnNlIiwiZXJyb3IiLCJjYXRjaCIsImVyciIsImdlb1BvaW50IiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJ2YWxpZGF0ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQU1BLE9BQU8sR0FBR0MsbUJBQU8sQ0FBQyxtQkFBRCxDQUF2QjtBQUNBLElBQU1DLElBQUksR0FBR0QsbUJBQU8sQ0FBQyxnQkFBRCxDQUFwQjtBQUNBLElBQU1FLEtBQUssR0FBR0YsbUJBQU8sQ0FBQyxpQkFBRCxD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O0FBS0QsQ0F0QkQ7O0FBd0JBRSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZmhELGNBQVksRUFBWkEsWUFEZTtBQUVmVSxhQUFXLEVBQVhBLFdBRmU7QUFHZkosZ0JBQWMsRUFBZEEsY0FIZTtBQUlmRSxrQkFBZ0IsRUFBaEJBLGdCQUplO0FBS2ZHLFFBQU0sRUFBTkEsTUFMZTtBQU1mRSxXQUFTLEVBQVRBLFNBTmU7QUFPZmlCLFdBQVMsRUFBVEEsU0FQZTtBQVFmSixXQUFTLEVBQVRBLFNBUmU7QUFTZlgsc0JBQW9CLEVBQXBCQSxvQkFUZTtBQVVmRSx3QkFBc0IsRUFBdEJBLHNCQVZlO0FBV2ZHLG9CQUFrQixFQUFsQkEsa0JBWGU7QUFZZnVCLFVBQVEsRUFBUkEsUUFaZTtBQWFmcEIsVUFBUSxFQUFSQSxRQWJlO0FBY2ZLLE1BQUksRUFBSkEsSUFkZSxFQUFqQiIsImZpbGUiOiI2Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHJlcXVlc3QgPSByZXF1aXJlKCcuL3JlcXVlc3QnKVxuY29uc3QgQm1vYiA9IHJlcXVpcmUoJy4vYm1vYicpXG5jb25zdCBFcnJvciA9IHJlcXVpcmUoJy4vZXJyb3InKVxuY29uc3QgeyBpc09iamVjdCwgaXNTdHJpbmcgfSA9IHJlcXVpcmUoJy4vZGF0YVR5cGUnKVxuXG4vLyAtLS0tLS0tLS0tLS0tLeWwj+eoi+W6j1NESy0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiDnlJ/miJDlsI/nqIvluo/kuoznu7TnoIFcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuY29uc3QgZ2VuZXJhdGVDb2RlID0gKGRhdGEpID0+IHtcbiAgaWYgKCFpc09iamVjdChkYXRhKSkge1xuICAgIC8vIOWPguaVsOW8guW4uFxuICAgIHRocm93IG5ldyBFcnJvcig0MTUpXG4gIH1cbiAgbGV0IHJvdXRlID0gQm1vYi5fY29uZmlnLnBhcmFtZXRlcnMuR0VORVJBVEVDT0RFXG4gIHJldHVybiByZXF1ZXN0KHJvdXRlLCAncG9zdCcsIGRhdGEpXG59XG5cbi8qKlxuICog6I635Y+WYWNjZXNzX3Rva2VuXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmNvbnN0IGdldEFjY2Vzc1Rva2VuID0gKGRhdGEpID0+IHtcbiAgbGV0IHJvdXRlID0gQm1vYi5fY29uZmlnLnBhcmFtZXRlcnMuR0VUQUNDRVNTVE9LRU5cbiAgcmV0dXJuIHJlcXVlc3Qocm91dGUsICdnZXQnKVxufVxuXG4vKipcbiAqIOWwj+eoi+W6j+aooeeJiOS/oeaBr1xuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5jb25zdCBzZW5kV2VBcHBNZXNzYWdlID0gKGRhdGEpID0+IHtcbiAgaWYgKCFpc09iamVjdChkYXRhKSkge1xuICAgIC8vIOWPguaVsOW8guW4uFxuICAgIHRocm93IG5ldyBFcnJvcig0MTUpXG4gIH1cbiAgbGV0IHJvdXRlID0gQm1vYi5fY29uZmlnLnBhcmFtZXRlcnMuU0VORFdFQVBQTUVTU0FHRVxuICByZXR1cm4gcmVxdWVzdChyb3V0ZSwgJ3Bvc3QnLCBkYXRhKVxufVxuXG5jb25zdCBzZW5kTWVzc2FnZSA9IChkYXRhKSA9PiB7XG4gIC8vICAgICAgIGxldCByZXF1ZXN0ID0gQm1vYi5fcmVxdWVzdChcIndlY2hhdEFwcC9TZW5kV2VBcHBNZXNzYWdlXCIsIG51bGwsIG51bGwsICdQT1NUJywgQm1vYi5fZW5jb2RlKGRhdGEsIG51bGwsIHRydWUpKTtcbiAgcmV0dXJuIDFcbn1cblxuLyoqXG4gKiDlsI/nqIvluo/lm77niYfkuIrkvKBcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuXG4vKipcbiAqIOW+ruS/oemAgOasvlxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5jb25zdCByZWZ1bmQgPSAoZGF0YSkgPT4ge1xuICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XG4gICAgLy8g5Y+C5pWw5byC5bi4XG4gICAgdGhyb3cgbmV3IEVycm9yKDQxNSlcbiAgfVxuICBsZXQgcm91dGUgPSBCbW9iLl9jb25maWcucGFyYW1ldGVycy5SRUZVTkRcbiAgcmV0dXJuIHJlcXVlc3Qocm91dGUsICdwb3N0JywgZGF0YSlcbn1cblxuLyoqXG4gKiDlvq7kv6HkuLvkurrpgJrnn6Uo5Li75Lq65L+h5oGv5o6o6YCBKVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5jb25zdCBub3RpZnlNc2cgPSAoZGF0YSkgPT4ge1xuICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XG4gICAgLy8g5Y+C5pWw5byC5bi4XG4gICAgdGhyb3cgbmV3IEVycm9yKDQxNSlcbiAgfVxuICBsZXQgcm91dGUgPSBCbW9iLl9jb25maWcucGFyYW1ldGVycy5OT1RJRllNU0dcbiAgcmV0dXJuIHJlcXVlc3Qocm91dGUsICdwb3N0JywgZGF0YSlcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS1SRVNUZnVsIFNESy0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLyoqXG4gKiDlr4bnoIHph43nva5cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuXG4vLyBFbWFpbCDph43nva5cbmNvbnN0IHJlcXVlc3RQYXNzd29yZFJlc2V0ID0gKGRhdGEpID0+IHtcbiAgaWYgKCFpc09iamVjdChkYXRhKSkge1xuICAgIC8vIOWPguaVsOW8guW4uFxuICAgIHRocm93IG5ldyBFcnJvcig0MTUpXG4gIH1cbiAgbGV0IHJvdXRlID0gQm1vYi5fY29uZmlnLnBhcmFtZXRlcnMuUkVRVUVTVFBBU1NXT1JEUkVTRVRcbiAgcmV0dXJuIHJlcXVlc3Qocm91dGUsICdwb3N0JywgZGF0YSlcbn1cblxuLy8g55+t5L+h6aqM6K+B56CB6YeN572uXG5jb25zdCByZXNldFBhc3N3b3JkQnlTbXNDb2RlID0gKHNtc0NvZGUsIGRhdGEpID0+IHtcbiAgaWYgKCFpc1N0cmluZyhzbXNDb2RlKSkge1xuICAgIC8vIOWPguaVsOW8guW4uFxuICAgIHRocm93IG5ldyBFcnJvcig0MTUpXG4gIH1cbiAgbGV0IHJvdXRlID0gYCR7Qm1vYi5fY29uZmlnLnBhcmFtZXRlcnMuUkVTRVRQQVNTV09SREJZU01TQ09ERX0vJHtzbXNDb2RlfWBcbiAgcmV0dXJuIHJlcXVlc3Qocm91dGUsICdwdXQnLCBkYXRhKVxufVxuXG4vLyDmj5Dkvpvml6flr4bnoIHmlrnlvI/lronlhajkv67mlLnnlKjmiLflr4bnoIFcbmNvbnN0IHVwZGF0ZVVzZXJQYXNzd29yZCA9IChvYmplY3RJZCwgZGF0YSkgPT4ge1xuICBpZiAoIWlzT2JqZWN0KGRhdGEpIHx8ICFpc1N0cmluZyhvYmplY3RJZCkpIHtcbiAgICAvLyDlj4LmlbDlvILluLhcbiAgICB0aHJvdyBuZXcgRXJyb3IoNDE1KVxuICB9XG4gIGxldCByb3V0ZSA9IGAke0Jtb2IuX2NvbmZpZy5wYXJhbWV0ZXJzLlVQREFURVVTRVJQQVNTV09SRH0vJHtvYmplY3RJZH1gXG4gIHJldHVybiByZXF1ZXN0KHJvdXRlLCAncHV0JywgZGF0YSlcbn1cblxuLy8g5qOA5rWL5bCP56iL5bqP5paH5pys5piv5ZCm6L+d5rOVXG5jb25zdCBjaGVja01zZyA9IChjb250ZW50KSA9PiB7XG4gIGlmICghaXNTdHJpbmcoY29udGVudCkpIHtcbiAgICAvLyDlj4LmlbDlvILluLhcbiAgICB0aHJvdyBuZXcgRXJyb3IoNDE1KVxuICB9XG4gIGxldCByb3V0ZSA9IGAke0Jtb2IuX2NvbmZpZy5wYXJhbWV0ZXJzLkNIRUNLX01TR31gXG4gIGNvbnN0IGRhdGEgPSB7J2NvbnRlbnQnOiBjb250ZW50fVxuICByZXR1cm4gcmVxdWVzdChyb3V0ZSwgJ3Bvc3QnLCBkYXRhKVxufVxuXG4vKipcbiAqIOiOt+WPluacjeWKoeWZqOaXtumXtFxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5cbmNvbnN0IHRpbWVzdGFtcCA9ICgpID0+IHtcbiAgbGV0IHJvdXRlID0gQm1vYi5fY29uZmlnLnBhcmFtZXRlcnMuVElNRVNUQU1QXG4gIHJldHVybiByZXF1ZXN0KHJvdXRlLCAnZ2V0Jylcbn1cblxuLyoqXG4gKiDmjqjpgIHmtojmga9cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuY29uc3QgcHVzaCA9IChkYXRhKSA9PiB7XG4gIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICAvLyDlj4LmlbDlvILluLhcbiAgICB0aHJvdyBuZXcgRXJyb3IoNDE1KVxuICB9XG4gIGxldCByb3V0ZSA9IEJtb2IuX2NvbmZpZy5wYXJhbWV0ZXJzLlBVU0hcbiAgcmV0dXJuIHJlcXVlc3Qocm91dGUsICdwb3N0JywgZGF0YSlcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0t5LqR5Ye95pWwLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vKipcbiAqIOS6keWHveaVsFxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5jb25zdCBmdW5jdGlvbnMgPSAoZnVuTmFtZSwgZGF0YSkgPT4ge1xuICAvLyDlpoLmnpzov5DooYznmoTkupHlh73mlbDkuI3pnIDopoHkvKDlhaXlj4LmlbDvvIzms6jmhI/vvIxcInt9XCLmmK/kuI3og73nvLrnmoRcbiAgaWYgKCFkYXRhKSB7XG4gICAgZGF0YSA9IHt9XG4gIH1cbiAgaWYgKCFpc1N0cmluZyhmdW5OYW1lKSkge1xuICAgIC8vIOWPguaVsOW8guW4uFxuICAgIHRocm93IG5ldyBFcnJvcig0MTUpXG4gIH1cbiAgY29uc3Qgcm91dGUgPSBgJHtCbW9iLl9jb25maWcucGFyYW1ldGVycy5GVU5DVElPTlN9LyR7ZnVuTmFtZX1gXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgcmVxdWVzdChyb3V0ZSwgJ3Bvc3QnLCBkYXRhKVxuICAgICAgLnRoZW4oKHtyZXN1bHR9KSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmVzb2x2ZShKU09OLnBhcnNlKHJlc3VsdCkpXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgcmVqZWN0KGVycilcbiAgICAgIH0pXG4gIH0pXG59XG5cbmNvbnN0IGdlb1BvaW50ID0gKHsgbGF0aXR1ZGUsIGxvbmdpdHVkZSB9KSA9PiB7XG4gIGNvbnN0IHZhbGlkYXRlID0gKGxhdGl0dWRlLCBsb25naXR1ZGUpID0+IHtcbiAgICBpZiAobGF0aXR1ZGUgPCAtOTAuMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKDQxOSlcbiAgICB9XG4gICAgaWYgKGxhdGl0dWRlID4gOTAuMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKDQxOSlcbiAgICB9XG4gICAgaWYgKGxvbmdpdHVkZSA8IC0xODAuMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKDQxOSlcbiAgICB9XG4gICAgaWYgKGxvbmdpdHVkZSA+IDE4MC4wKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoNDE5KVxuICAgIH1cbiAgICByZXR1cm4geyBsYXRpdHVkZSwgbG9uZ2l0dWRlIH1cbiAgfVxuICB2YWxpZGF0ZShsYXRpdHVkZSwgbG9uZ2l0dWRlKVxuICByZXR1cm4ge1xuICAgICdfX3R5cGUnOiAnR2VvUG9pbnQnLFxuICAgICdsYXRpdHVkZSc6IGxhdGl0dWRlLFxuICAgICdsb25naXR1ZGUnOiBsb25naXR1ZGVcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2VuZXJhdGVDb2RlLFxuICBzZW5kTWVzc2FnZSxcbiAgZ2V0QWNjZXNzVG9rZW4sXG4gIHNlbmRXZUFwcE1lc3NhZ2UsXG4gIHJlZnVuZCxcbiAgbm90aWZ5TXNnLFxuICBmdW5jdGlvbnMsXG4gIHRpbWVzdGFtcCxcbiAgcmVxdWVzdFBhc3N3b3JkUmVzZXQsXG4gIHJlc2V0UGFzc3dvcmRCeVNtc0NvZGUsXG4gIHVwZGF0ZVVzZXJQYXNzd29yZCxcbiAgZ2VvUG9pbnQsXG4gIGNoZWNrTXNnLFxuICBwdXNoXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///66\n");

/***/ }),

/***/ 67:
/*!***************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/hydrogen-js-sdk/src/lib/sms.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar request = __webpack_require__(/*! ./request */ 27);\nvar Bmob = __webpack_require__(/*! ./bmob */ 15);\nvar Error = __webpack_require__(/*! ./error */ 24);var _require =\n__webpack_require__(/*! ./dataType */ 23),isObject = _require.isObject,isString = _require.isString;\n\n//   /**\n// * 请求短信验证码\n// * @param {Object} 相应的参数\n// * @param {Object} Backbone-style options 对象。 options.success, 如果设置了，将会处理云端代码调用成功的情况。 options.error 如果设置了，将会处理云端代码调用失败的情况。 两个函数都是可选的。两个函数都只有一个参数。\n// * @return {Bmob.Promise}\n// */\n\nvar requestSmsCode = function requestSmsCode(data, options) {\n  if (!isObject(data)) {\n    throw new Error(415);\n  }\n  var route = Bmob._config.parameters.REQUESTSMSCODE;\n  return request(route, 'post', data);\n};\n//   /**\n// * 验证短信验证码\n// * @param {Object} 相应的参数\n// * @param {Object} Backbone-style options 对象。 options.success, 如果设置了，将会处理云端代码调用成功的情况。 options.error 如果设置了，将会处理云端代码调用失败的情况。 两个函数都是可选的。两个函数都只有一个参数。\n// * @return {Bmob.Promise}\n// */\nvar verifySmsCode = function verifySmsCode(smscode, data, options) {\n  if (!isString(smscode)) {\n    // 参数异常\n    throw new Error(415);\n  }\n  if (!isObject(data)) {\n    // 参数异常\n    throw new Error(415);\n  }\n  var route = \"\".concat(Bmob._config.parameters.VERIFYSMSCODE, \"/\").concat(smscode);\n  return request(route, 'post', data);\n};\n\nmodule.exports = { requestSmsCode: requestSmsCode, verifySmsCode: verifySmsCode };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbm9kZV9tb2R1bGVzL2h5ZHJvZ2VuLWpzLXNkay9zcmMvbGliL3Ntcy5qcyJdLCJuYW1lcyI6WyJyZXF1ZXN0IiwicmVxdWlyZSIsIkJtb2IiLCJFcnJvciIsImlzT2JqZWN0IiwiaXNTdHJpbmciLCJyZXF1ZXN0U21zQ29kZSIsImRhdGEiLCJvcHRpb25zIiwicm91dGUiLCJfY29uZmlnIiwicGFyYW1ldGVycyIsIlJFUVVFU1RTTVNDT0RFIiwidmVyaWZ5U21zQ29kZSIsInNtc2NvZGUiLCJWRVJJRllTTVNDT0RFIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjtBQUNBLElBQU1BLE9BQU8sR0FBR0MsbUJBQU8sQ0FBQyxtQkFBRCxDQUF2QjtBQUNBLElBQU1DLElBQUksR0FBR0QsbUJBQU8sQ0FBQyxnQkFBRCxDQUFwQjtBQUNBLElBQU1FLEtBQUssR0FBR0YsbUJBQU8sQ0FBQyxpQkFBRCxDQUFyQixDO0FBQytCQSxtQkFBTyxDQUFDLG9CQUFELEMsQ0FBOUJHLFEsWUFBQUEsUSxDQUFVQyxRLFlBQUFBLFE7O0FBRWxCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFNQyxjQUFjLEdBQUcsU0FBakJBLGNBQWlCLENBQUNDLElBQUQsRUFBT0MsT0FBUCxFQUFtQjtBQUN4QyxNQUFJLENBQUNKLFFBQVEsQ0FBQ0csSUFBRCxDQUFiLEVBQXFCO0FBQ25CLFVBQU0sSUFBSUosS0FBSixDQUFVLEdBQVYsQ0FBTjtBQUNEO0FBQ0QsTUFBSU0sS0FBSyxHQUFHUCxJQUFJLENBQUNRLE9BQUwsQ0FBYUMsVUFBYixDQUF3QkMsY0FBcEM7QUFDQSxTQUFPWixPQUFPLENBQUNTLEtBQUQsRUFBUSxNQUFSLEVBQWdCRixJQUFoQixDQUFkO0FBQ0QsQ0FORDtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQU1NLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsQ0FBQ0MsT0FBRCxFQUFVUCxJQUFWLEVBQWdCQyxPQUFoQixFQUE0QjtBQUNoRCxNQUFJLENBQUNILFFBQVEsQ0FBQ1MsT0FBRCxDQUFiLEVBQXdCO0FBQ3RCO0FBQ0EsVUFBTSxJQUFJWCxLQUFKLENBQVUsR0FBVixDQUFOO0FBQ0Q7QUFDRCxNQUFJLENBQUNDLFFBQVEsQ0FBQ0csSUFBRCxDQUFiLEVBQXFCO0FBQ25CO0FBQ0EsVUFBTSxJQUFJSixLQUFKLENBQVUsR0FBVixDQUFOO0FBQ0Q7QUFDRCxNQUFJTSxLQUFLLGFBQU1QLElBQUksQ0FBQ1EsT0FBTCxDQUFhQyxVQUFiLENBQXdCSSxhQUE5QixjQUErQ0QsT0FBL0MsQ0FBVDtBQUNBLFNBQU9kLE9BQU8sQ0FBQ1MsS0FBRCxFQUFRLE1BQVIsRUFBZ0JGLElBQWhCLENBQWQ7QUFDRCxDQVhEOztBQWFBUyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsRUFBRVgsY0FBYyxFQUFkQSxjQUFGLEVBQWtCTyxhQUFhLEVBQWJBLGFBQWxCLEVBQWpCIiwiZmlsZSI6IjY3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5jb25zdCByZXF1ZXN0ID0gcmVxdWlyZSgnLi9yZXF1ZXN0JylcbmNvbnN0IEJtb2IgPSByZXF1aXJlKCcuL2Jtb2InKVxuY29uc3QgRXJyb3IgPSByZXF1aXJlKCcuL2Vycm9yJylcbmNvbnN0IHsgaXNPYmplY3QsIGlzU3RyaW5nIH0gPSByZXF1aXJlKCcuL2RhdGFUeXBlJylcblxuLy8gICAvKipcbi8vICog6K+35rGC55+t5L+h6aqM6K+B56CBXG4vLyAqIEBwYXJhbSB7T2JqZWN0fSDnm7jlupTnmoTlj4LmlbBcbi8vICogQHBhcmFtIHtPYmplY3R9IEJhY2tib25lLXN0eWxlIG9wdGlvbnMg5a+56LGh44CCIG9wdGlvbnMuc3VjY2Vzcywg5aaC5p6c6K6+572u5LqG77yM5bCG5Lya5aSE55CG5LqR56uv5Luj56CB6LCD55So5oiQ5Yqf55qE5oOF5Ya144CCIG9wdGlvbnMuZXJyb3Ig5aaC5p6c6K6+572u5LqG77yM5bCG5Lya5aSE55CG5LqR56uv5Luj56CB6LCD55So5aSx6LSl55qE5oOF5Ya144CCIOS4pOS4quWHveaVsOmDveaYr+WPr+mAieeahOOAguS4pOS4quWHveaVsOmDveWPquacieS4gOS4quWPguaVsOOAglxuLy8gKiBAcmV0dXJuIHtCbW9iLlByb21pc2V9XG4vLyAqL1xuXG5jb25zdCByZXF1ZXN0U21zQ29kZSA9IChkYXRhLCBvcHRpb25zKSA9PiB7XG4gIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoNDE1KVxuICB9XG4gIGxldCByb3V0ZSA9IEJtb2IuX2NvbmZpZy5wYXJhbWV0ZXJzLlJFUVVFU1RTTVNDT0RFXG4gIHJldHVybiByZXF1ZXN0KHJvdXRlLCAncG9zdCcsIGRhdGEpXG59XG4vLyAgIC8qKlxuLy8gKiDpqozor4Hnn63kv6Hpqozor4HnoIFcbi8vICogQHBhcmFtIHtPYmplY3R9IOebuOW6lOeahOWPguaVsFxuLy8gKiBAcGFyYW0ge09iamVjdH0gQmFja2JvbmUtc3R5bGUgb3B0aW9ucyDlr7nosaHjgIIgb3B0aW9ucy5zdWNjZXNzLCDlpoLmnpzorr7nva7kuobvvIzlsIbkvJrlpITnkIbkupHnq6/ku6PnoIHosIPnlKjmiJDlip/nmoTmg4XlhrXjgIIgb3B0aW9ucy5lcnJvciDlpoLmnpzorr7nva7kuobvvIzlsIbkvJrlpITnkIbkupHnq6/ku6PnoIHosIPnlKjlpLHotKXnmoTmg4XlhrXjgIIg5Lik5Liq5Ye95pWw6YO95piv5Y+v6YCJ55qE44CC5Lik5Liq5Ye95pWw6YO95Y+q5pyJ5LiA5Liq5Y+C5pWw44CCXG4vLyAqIEByZXR1cm4ge0Jtb2IuUHJvbWlzZX1cbi8vICovXG5jb25zdCB2ZXJpZnlTbXNDb2RlID0gKHNtc2NvZGUsIGRhdGEsIG9wdGlvbnMpID0+IHtcbiAgaWYgKCFpc1N0cmluZyhzbXNjb2RlKSkge1xuICAgIC8vIOWPguaVsOW8guW4uFxuICAgIHRocm93IG5ldyBFcnJvcig0MTUpXG4gIH1cbiAgaWYgKCFpc09iamVjdChkYXRhKSkge1xuICAgIC8vIOWPguaVsOW8guW4uFxuICAgIHRocm93IG5ldyBFcnJvcig0MTUpXG4gIH1cbiAgbGV0IHJvdXRlID0gYCR7Qm1vYi5fY29uZmlnLnBhcmFtZXRlcnMuVkVSSUZZU01TQ09ERX0vJHtzbXNjb2RlfWBcbiAgcmV0dXJuIHJlcXVlc3Qocm91dGUsICdwb3N0JywgZGF0YSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IHJlcXVlc3RTbXNDb2RlLCB2ZXJpZnlTbXNDb2RlIH1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///67\n");

/***/ }),

/***/ 68:
/*!*********************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/utils/mine.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni, __f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _hydrogenJsSdk = _interopRequireDefault(__webpack_require__(/*! hydrogen-js-sdk */ 14));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var _default =\n{\n\n  //修改配置信息\n  modify_setting: function modify_setting(params) {var _this = this;\n    var uid = uni.getStorageSync(\"uid\");\n    var setting = uni.getStorageSync(\"setting\") || {};\n\n    return new Promise(function (resolve, reject) {\n      uni.showLoading({\n        title: \"上传中\" });\n\n      var query = _hydrogenJsSdk.default.Query(\"setting\");\n      var pointer = _hydrogenJsSdk.default.Pointer('_User');\n      var poiID = pointer.set(uid);\n\n      if (setting.objectId) query.set(\"id\", setting.objectId);\n      query.set(\"show_float\", Number(params.show_float));\n      query.set(\"USER\", params.USER);\n      query.set(\"UKEY\", params.UKEY);\n      query.set(\"number\", params.number);\n      query.set(\"wx_openid\", params.wx_openid);\n      query.set(\"auto_print\", params.auto_print);\n      query.set(\"parent\", poiID);\n      //query.set(\"beizhu\", \"Bmob\")\n      query.save().then(function (res) {\n        console.log(__f__(res, \" at utils\\\\mine.js:27\"));\n        uni.hideLoading();\n        uni.showToast({\n          title: \"保存成功\" });\n\n        _this.query_setting();\n\n      }).catch(function (err) {\n        console.log(__f__(err, \" at utils\\\\mine.js:35\"));\n      });\n    });\n\n  },\n\n\n  //查询当前用户的设置\n  query_setting: function query_setting() {\n    var uid = uni.getStorageSync(\"uid\");\n    return new Promise(function (resolve, reject) {\n      var query = _hydrogenJsSdk.default.Query(\"setting\");\n      query.equalTo(\"parent\", \"==\", uid);\n      query.find().then(function (res) {\n        //console.log(res)\n        uni.setStorageSync(\"setting\", res[0]);\n        resolve(res);\n      });\n    });\n  },\n\n  //得到用户信息\n  getUserInfo: function getUserInfo() {\n    var uid = uni.getStorageSync(\"uid\");\n    return new Promise(function (resolve, reject) {\n      var query = _hydrogenJsSdk.default.Query('_User');\n      query.get(uid).then(function (res) {\n        uni.setStorageSync(\"user\", res);\n        resolve(true, res);\n      }).catch(function (err) {\n        resolve(false, err);\n      });\n    });\n  },\n  //修改用户信息\n  update_user: function update_user(user) {\n    var uid = uni.getStorageSync(\"uid\");\n    return new Promise(function (resolve, reject) {\n      var query = _hydrogenJsSdk.default.Query('_User');\n      query.get(uid).then(function (res) {\n        res.set('avatarUrl', user.avatarUrl);\n        res.set('nickName', user.nickName);\n        res.set('sex', Number(user.sex) ? Number(user.sex) : 0);\n        res.save();\n        resolve(true, res);\n      }).catch(function (err) {\n        resolve(false, err);\n      });\n    });\n  } };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vdXRpbHMvbWluZS5qcyJdLCJuYW1lcyI6WyJtb2RpZnlfc2V0dGluZyIsInBhcmFtcyIsInVpZCIsInVuaSIsImdldFN0b3JhZ2VTeW5jIiwic2V0dGluZyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwic2hvd0xvYWRpbmciLCJ0aXRsZSIsInF1ZXJ5IiwiQm1vYiIsIlF1ZXJ5IiwicG9pbnRlciIsIlBvaW50ZXIiLCJwb2lJRCIsInNldCIsIm9iamVjdElkIiwiTnVtYmVyIiwic2hvd19mbG9hdCIsIlVTRVIiLCJVS0VZIiwibnVtYmVyIiwid3hfb3BlbmlkIiwiYXV0b19wcmludCIsInNhdmUiLCJ0aGVuIiwicmVzIiwiY29uc29sZSIsImxvZyIsImhpZGVMb2FkaW5nIiwic2hvd1RvYXN0IiwicXVlcnlfc2V0dGluZyIsImNhdGNoIiwiZXJyIiwiZXF1YWxUbyIsImZpbmQiLCJzZXRTdG9yYWdlU3luYyIsImdldFVzZXJJbmZvIiwiZ2V0IiwidXBkYXRlX3VzZXIiLCJ1c2VyIiwiYXZhdGFyVXJsIiwibmlja05hbWUiLCJzZXgiXSwibWFwcGluZ3MiOiJ5SUFBQSw0RjtBQUNlOztBQUVkO0FBQ0FBLGdCQUhjLDBCQUdDQyxNQUhELEVBR1M7QUFDdEIsUUFBSUMsR0FBRyxHQUFHQyxHQUFHLENBQUNDLGNBQUosQ0FBbUIsS0FBbkIsQ0FBVjtBQUNBLFFBQUlDLE9BQU8sR0FBR0YsR0FBRyxDQUFDQyxjQUFKLENBQW1CLFNBQW5CLEtBQWlDLEVBQS9DOztBQUVBLFdBQU8sSUFBSUUsT0FBSixDQUFZLFVBQUNDLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUN2Q0wsU0FBRyxDQUFDTSxXQUFKLENBQWdCO0FBQ2ZDLGFBQUssRUFBRSxLQURRLEVBQWhCOztBQUdBLFVBQU1DLEtBQUssR0FBR0MsdUJBQUtDLEtBQUwsQ0FBVyxTQUFYLENBQWQ7QUFDQSxVQUFNQyxPQUFPLEdBQUdGLHVCQUFLRyxPQUFMLENBQWEsT0FBYixDQUFo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QUNqQixRQUFJeEMsR0FBRyxHQUFHQyxHQUFHLENBQUNDLGNBQUosQ0FBbUIsS0FBbkIsQ0FBVjtBQUNBLFdBQU8sSUFBSUUsT0FBSixDQUFZLFVBQUNDLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUN2QyxVQUFNRyxLQUFLLEdBQUdDLHVCQUFLQyxLQUFMLENBQVcsT0FBWCxDQUFkO0FBQ0FGLFdBQUssQ0FBQzZCLEdBQU4sQ0FBVXRDLEdBQVYsRUFBZXlCLElBQWYsQ0FBb0IsVUFBQUMsR0FBRyxFQUFJO0FBQ3pCQSxXQUFHLENBQUNYLEdBQUosQ0FBUSxXQUFSLEVBQXFCeUIsSUFBSSxDQUFDQyxTQUExQjtBQUNBZixXQUFHLENBQUNYLEdBQUosQ0FBUSxVQUFSLEVBQW9CeUIsSUFBSSxDQUFDRSxRQUF6QjtBQUNBaEIsV0FBRyxDQUFDWCxHQUFKLENBQVEsS0FBUixFQUFlRSxNQUFNLENBQUN1QixJQUFJLENBQUNHLEdBQU4sQ0FBTixHQUFpQjFCLE1BQU0sQ0FBQ3VCLElBQUksQ0FBQ0csR0FBTixDQUF2QixHQUFrQyxDQUFqRDtBQUNBakIsV0FBRyxDQUFDRixJQUFKO0FBQ0RuQixlQUFPLENBQUMsSUFBRCxFQUFNcUIsR0FBTixDQUFQO0FBQ0EsT0FORCxFQU1HTSxLQU5ILENBTVMsVUFBQUMsR0FBRyxFQUFJO0FBQ2Q1QixlQUFPLENBQUMsS0FBRCxFQUFPNEIsR0FBUCxDQUFQO0FBQ0QsT0FSRDtBQVNBLEtBWE0sQ0FBUDtBQVlBLEdBbEZhLEUiLCJmaWxlIjoiNjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQm1vYiBmcm9tIFwiaHlkcm9nZW4tanMtc2RrXCI7XHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuXHJcblx0Ly/kv67mlLnphY3nva7kv6Hmga9cclxuXHRtb2RpZnlfc2V0dGluZyhwYXJhbXMpIHtcclxuXHRcdGxldCB1aWQgPSB1bmkuZ2V0U3RvcmFnZVN5bmMoXCJ1aWRcIik7XHJcblx0XHRsZXQgc2V0dGluZyA9IHVuaS5nZXRTdG9yYWdlU3luYyhcInNldHRpbmdcIikgfHwge307XHJcblxyXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHRcdFx0dW5pLnNob3dMb2FkaW5nKHtcclxuXHRcdFx0XHR0aXRsZTogXCLkuIrkvKDkuK1cIlxyXG5cdFx0XHR9KTtcclxuXHRcdFx0Y29uc3QgcXVlcnkgPSBCbW9iLlF1ZXJ5KFwic2V0dGluZ1wiKTtcclxuXHRcdFx0Y29uc3QgcG9pbnRlciA9IEJtb2IuUG9pbnRlcignX1VzZXInKVxyXG5cdFx0XHRjb25zdCBwb2lJRCA9IHBvaW50ZXIuc2V0KHVpZClcclxuXHJcblx0XHRcdGlmIChzZXR0aW5nLm9iamVjdElkKSBxdWVyeS5zZXQoXCJpZFwiLCBzZXR0aW5nLm9iamVjdElkKVxyXG5cdFx0XHRxdWVyeS5zZXQoXCJzaG93X2Zsb2F0XCIsIE51bWJlcihwYXJhbXMuc2hvd19mbG9hdCkpXHJcblx0XHRcdHF1ZXJ5LnNldChcIlVTRVJcIiwgcGFyYW1zLlVTRVIpXHJcblx0XHRcdHF1ZXJ5LnNldChcIlVLRVlcIiwgcGFyYW1zLlVLRVkpXHJcblx0XHRcdHF1ZXJ5LnNldChcIm51bWJlclwiLCBwYXJhbXMubnVtYmVyKVxyXG5cdFx0XHRxdWVyeS5zZXQoXCJ3eF9vcGVuaWRcIiwgcGFyYW1zLnd4X29wZW5pZClcclxuXHRcdFx0cXVlcnkuc2V0KFwiYXV0b19wcmludFwiLCBwYXJhbXMuYXV0b19wcmludClcclxuXHRcdFx0cXVlcnkuc2V0KFwicGFyZW50XCIsIHBvaUlEKVxyXG5cdFx0XHQvL3F1ZXJ5LnNldChcImJlaXpodVwiLCBcIkJtb2JcIilcclxuXHRcdFx0cXVlcnkuc2F2ZSgpLnRoZW4ocmVzID0+IHtcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhyZXMpXHJcblx0XHRcdFx0dW5pLmhpZGVMb2FkaW5nKCk7XHJcblx0XHRcdFx0dW5pLnNob3dUb2FzdCh7XHJcblx0XHRcdFx0XHR0aXRsZTogXCLkv53lrZjmiJDlip9cIixcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHRcdHRoaXMucXVlcnlfc2V0dGluZygpXHJcblxyXG5cdFx0XHR9KS5jYXRjaChlcnIgPT4ge1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKGVycilcclxuXHRcdFx0fSlcclxuXHRcdH0pXHJcblxyXG5cdH0sXHJcblxyXG5cclxuXHQvL+afpeivouW9k+WJjeeUqOaIt+eahOiuvue9rlxyXG5cdHF1ZXJ5X3NldHRpbmcoKSB7XHJcblx0XHRsZXQgdWlkID0gdW5pLmdldFN0b3JhZ2VTeW5jKFwidWlkXCIpO1xyXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHRcdFx0Y29uc3QgcXVlcnkgPSBCbW9iLlF1ZXJ5KFwic2V0dGluZ1wiKTtcclxuXHRcdFx0cXVlcnkuZXF1YWxUbyhcInBhcmVudFwiLCBcIj09XCIsIHVpZCk7XHJcblx0XHRcdHF1ZXJ5LmZpbmQoKS50aGVuKHJlcyA9PiB7XHJcblx0XHRcdFx0Ly9jb25zb2xlLmxvZyhyZXMpXHJcblx0XHRcdFx0dW5pLnNldFN0b3JhZ2VTeW5jKFwic2V0dGluZ1wiLCByZXNbMF0pXHJcblx0XHRcdFx0cmVzb2x2ZShyZXMpXHJcblx0XHRcdH0pO1xyXG5cdFx0fSlcclxuXHR9LFxyXG5cdFxyXG5cdC8v5b6X5Yiw55So5oi35L+h5oGvXHJcblx0Z2V0VXNlckluZm8oKXtcclxuXHRcdGxldCB1aWQgPSB1bmkuZ2V0U3RvcmFnZVN5bmMoXCJ1aWRcIik7XHJcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cdFx0XHRjb25zdCBxdWVyeSA9IEJtb2IuUXVlcnkoJ19Vc2VyJyk7XHJcblx0XHRcdHF1ZXJ5LmdldCh1aWQpLnRoZW4ocmVzID0+IHtcclxuXHRcdFx0XHR1bmkuc2V0U3RvcmFnZVN5bmMoXCJ1c2VyXCIscmVzKVxyXG5cdFx0XHRcdHJlc29sdmUodHJ1ZSxyZXMpXHJcblx0XHRcdH0pLmNhdGNoKGVyciA9PiB7XHJcblx0XHRcdCAgcmVzb2x2ZShmYWxzZSxlcnIpXHJcblx0XHRcdH0pXHJcblx0XHR9KVxyXG5cdH0sXHJcblx0Ly/kv67mlLnnlKjmiLfkv6Hmga9cclxuXHR1cGRhdGVfdXNlcih1c2VyKSB7XHJcblx0XHRsZXQgdWlkID0gdW5pLmdldFN0b3JhZ2VTeW5jKFwidWlkXCIpO1xyXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHRcdFx0Y29uc3QgcXVlcnkgPSBCbW9iLlF1ZXJ5KCdfVXNlcicpO1xyXG5cdFx0XHRxdWVyeS5nZXQodWlkKS50aGVuKHJlcyA9PiB7XHJcblx0XHRcdCAgcmVzLnNldCgnYXZhdGFyVXJsJywgdXNlci5hdmF0YXJVcmwpXHJcblx0XHRcdCAgcmVzLnNldCgnbmlja05hbWUnLCB1c2VyLm5pY2tOYW1lKVxyXG5cdFx0XHQgIHJlcy5zZXQoJ3NleCcsIE51bWJlcih1c2VyLnNleCk/TnVtYmVyKHVzZXIuc2V4KTowKVxyXG5cdFx0XHQgIHJlcy5zYXZlKClcclxuXHRcdFx0XHRyZXNvbHZlKHRydWUscmVzKVxyXG5cdFx0XHR9KS5jYXRjaChlcnIgPT4ge1xyXG5cdFx0XHQgIHJlc29sdmUoZmFsc2UsZXJyKVxyXG5cdFx0XHR9KVxyXG5cdFx0fSlcclxuXHR9LFxyXG5cclxuXHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///68\n");

/***/ }),

/***/ 681:
/*!***************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/u-charts/u-charts.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__, uni) {/*\r\n * uCharts v1.9.3.20190922\r\n * uni-app平台高性能跨全端图表，支持H5、APP、小程序（微信/支付宝/百度/头条/QQ/360）\r\n * Copyright (c) 2019 QIUN秋云 https://www.ucharts.cn All rights reserved.\r\n * Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )\r\n * \r\n * uCharts官方网站\r\n * https://www.uCharts.cn\r\n * \r\n * 开源地址:\r\n * https://gitee.com/uCharts/uCharts\r\n * \r\n * uni-app插件市场地址：\r\n * http://ext.dcloud.net.cn/plugin?id=271\r\n * \r\n */\n\n\n\nvar config = {\n  yAxisWidth: 15,\n  yAxisSplit: 5,\n  xAxisHeight: 15,\n  xAxisLineHeight: 15,\n  legendHeight: 15,\n  yAxisTitleWidth: 15,\n  padding: [10, 10, 10, 10],\n  pixelRatio: 1,\n  rotate: false,\n  columePadding: 3,\n  fontSize: 13,\n  //dataPointShape: ['diamond', 'circle', 'triangle', 'rect'],\n  dataPointShape: ['circle', 'circle', 'circle', 'circle'],\n  colors: ['#1890ff', '#2fc25b', '#facc14', '#f04864', '#8543e0', '#90ed7d'],\n  pieChartLinePadding: 15,\n  pieChartTextPadding: 5,\n  xAxisTextPadding: 3,\n  titleColor: '#333333',\n  titleFontSize: 20,\n  subtitleColor: '#999999',\n  subtitleFontSize: 15,\n  toolTipPadding: 3,\n  toolTipBackground: '#000000',\n  toolTipOpacity: 0.7,\n  toolTipLineHeight: 20,\n  radarLabelTextMargin: 15,\n  gaugeLabelTextMargin: 15 };\n\n\nvar assign = function assign(target) {for (var _len2 = arguments.length, varArgs = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {varArgs[_key2 - 1] = arguments[_key2];}\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n  if (!varArgs || varArgs.length <= 0) {\n    return target;\n  }\n  // 深度合并对象\n  function deepAssign(obj1, obj2) {\n    for (var key in obj2) {\n      obj1[key] = obj1[key] && obj1[key].toString() === \"[object Object]\" ?\n      deepAssign(obj1[key], obj2[key]) : obj1[key] = obj2[key];\n    }\n    return obj1;\n  }\n\n  varArgs.forEach(function (val) {\n    target = deepAssign(target, val);\n  });\n  return target;\n};\n\nvar util = {\n  toFixed: function toFixed(num, limit) {\n    limit = limit || 2;\n    if (this.isFloat(num)) {\n      num = num.toFixed(limit);\n    }\n    return num;\n  },\n  isFloat: function isFloat(num) {\n    return num % 1 !== 0;\n  },\n  approximatelyEqual: function approximatelyEqual(num1, num2) {\n    return Math.abs(num1 - num2) < 1e-10;\n  },\n  isSameSign: function isSameSign(num1, num2) {\n    return Math.abs(num1) === num1 && Math.abs(num2) === num2 || Math.abs(num1) !== num1 && Math.abs(num2) !== num2;\n  },\n  isSameXCoordinateArea: function isSameXCoordinateArea(p1, p2) {\n    return this.isSameSign(p1.x, p2.x);\n  },\n  isCollision: function isCollision(obj1, obj2) {\n    obj1.end = {};\n    obj1.end.x = obj1.start.x + obj1.width;\n    obj1.end.y = obj1.start.y - obj1.height;\n    obj2.end = {};\n    obj2.end.x = obj2.start.x + obj2.width;\n    obj2.end.y = obj2.start.y - obj2.height;\n    var flag = obj2.start.x > obj1.end.x || obj2.end.x < obj1.start.x || obj2.end.y > obj1.start.y || obj2.start.y < obj1.end.y;\n    return !flag;\n  } };\n\n\n//兼容H5点击事件\nfunction getH5Offset(e) {\n  e.mp = {\n    changedTouches: [] };\n\n  e.mp.changedTouches.push({\n    x: e.offsetX,\n    y: e.offsetY });\n\n  return e;\n}\n\n// hex 转 rgba\nfunction hexToRgb(hexValue, opc) {\n  var rgx = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  var hex = hexValue.replace(rgx, function (m, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n  var rgb = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  var r = parseInt(rgb[1], 16);\n  var g = parseInt(rgb[2], 16);\n  var b = parseInt(rgb[3], 16);\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + opc + ')';\n}\n\nfunction findRange(num, type, limit) {\n  if (isNaN(num)) {\n    throw new Error('[uCharts] unvalid series data!');\n  }\n  limit = limit || 10;\n  type = type ? type : 'upper';\n  var multiple = 1;\n  while (limit < 1) {\n    limit *= 10;\n    multiple *= 10;\n  }\n  if (type === 'upper') {\n    num = Math.ceil(num * multiple);\n  } else {\n    num = Math.floor(num * multiple);\n  }\n  while (num % limit !== 0) {\n    if (type === 'upper') {\n      num++;\n    } else {\n      num--;\n    }\n  }\n  return num / multiple;\n}\n\nfunction calCandleMA(dayArr, nameArr, colorArr, kdata) {\n  var seriesTemp = [];\n  for (var k = 0; k < dayArr.length; k++) {\n    var seriesItem = {\n      data: [],\n      name: nameArr[k],\n      color: colorArr[k] };\n\n    for (var i = 0, len = kdata.length; i < len; i++) {\n      if (i < dayArr[k]) {\n        seriesItem.data.push(null);\n        continue;\n      }\n      var sum = 0;\n      for (var j = 0; j < dayArr[k]; j++) {\n        sum += kdata[i - j][1];\n      }\n      seriesItem.data.push(+(sum / dayArr[k]).toFixed(3));\n    }\n    seriesTemp.push(seriesItem);\n  }\n  return seriesTemp;\n}\n\nfunction calValidDistance(self, distance, chartData, config, opts) {\n  var dataChartAreaWidth = opts.width - opts.area[1] - opts.area[3];\n  var dataChartWidth = chartData.eachSpacing * (opts.chartData.xAxisData.xAxisPoints.length - 1);\n  var validDistance = distance;\n  if (distance >= 0) {\n    validDistance = 0;\n    self.event.trigger('scrollLeft');\n  } else if (Math.abs(distance) >= dataChartWidth - dataChartAreaWidth) {\n    validDistance = dataChartAreaWidth - dataChartWidth;\n    self.event.trigger('scrollRight');\n  }\n  return validDistance;\n}\n\nfunction isInAngleRange(angle, startAngle, endAngle) {\n  function adjust(angle) {\n    while (angle < 0) {\n      angle += 2 * Math.PI;\n    }\n    while (angle > 2 * Math.PI) {\n      angle -= 2 * Math.PI;\n    }\n    return angle;\n  }\n  angle = adjust(angle);\n  startAngle = adjust(startAngle);\n  endAngle = adjust(endAngle);\n  if (startAngle > endAngle) {\n    endAngle += 2 * Math.PI;\n    if (angle < startAngle) {\n      angle += 2 * Math.PI;\n    }\n  }\n  return angle >= startAngle && angle <= endAngle;\n}\n\nfunction calRotateTranslate(x, y, h) {\n  var xv = x;\n  var yv = h - y;\n  var transX = xv + (h - yv - xv) / Math.sqrt(2);\n  transX *= -1;\n  var transY = (h - yv) * (Math.sqrt(2) - 1) - (h - yv - xv) / Math.sqrt(2);\n  return {\n    transX: transX,\n    transY: transY };\n\n}\n\nfunction createCurveControlPoints(points, i) {\n\n  function isNotMiddlePoint(points, i) {\n    if (points[i - 1] && points[i + 1]) {\n      return points[i].y >= Math.max(points[i - 1].y, points[i + 1].y) || points[i].y <= Math.min(points[i - 1].y,\n      points[\n      i + 1].y);\n    } else {\n      return false;\n    }\n  }\n  var a = 0.2;\n  var b = 0.2;\n  var pAx = null;\n  var pAy = null;\n  var pBx = null;\n  var pBy = null;\n  if (i < 1) {\n    pAx = points[0].x + (points[1].x - points[0].x) * a;\n    pAy = points[0].y + (points[1].y - points[0].y) * a;\n  } else {\n    pAx = points[i].x + (points[i + 1].x - points[i - 1].x) * a;\n    pAy = points[i].y + (points[i + 1].y - points[i - 1].y) * a;\n  }\n\n  if (i > points.length - 3) {\n    var last = points.length - 1;\n    pBx = points[last].x - (points[last].x - points[last - 1].x) * b;\n    pBy = points[last].y - (points[last].y - points[last - 1].y) * b;\n  } else {\n    pBx = points[i + 1].x - (points[i + 2].x - points[i].x) * b;\n    pBy = points[i + 1].y - (points[i + 2].y - points[i].y) * b;\n  }\n  if (isNotMiddlePoint(points, i + 1)) {\n    pBy = points[i + 1].y;\n  }\n  if (isNotMiddlePoint(points, i)) {\n    pAy = points[i].y;\n  }\n  if (pAy >= Math.max(points[i].y, points[i + 1].y) || pAy <= Math.min(points[i].y, points[i + 1].y)) {\n    pAy = points[i].y;\n  }\n  if (pBy >= Math.max(points[i].y, points[i + 1].y) || pBy <= Math.min(points[i].y, points[i + 1].y)) {\n    pBy = points[i + 1].y;\n  }\n  return {\n    ctrA: {\n      x: pAx,\n      y: pAy },\n\n    ctrB: {\n      x: pBx,\n      y: pBy } };\n\n\n}\n\nfunction convertCoordinateOrigin(x, y, center) {\n  return {\n    x: center.x + x,\n    y: center.y - y };\n\n}\n\nfunction avoidCollision(obj, target) {\n  if (target) {\n    // is collision test\n    while (util.isCollision(obj, target)) {\n      if (obj.start.x > 0) {\n        obj.start.y--;\n      } else if (obj.start.x < 0) {\n        obj.start.y++;\n      } else {\n        if (obj.start.y > 0) {\n          obj.start.y++;\n        } else {\n          obj.start.y--;\n        }\n      }\n    }\n  }\n  return obj;\n}\n\nfunction fillSeries(series, opts, config) {\n  var index = 0;\n  return series.map(function (item) {\n    if (!item.color) {\n      item.color = config.colors[index];\n      index = (index + 1) % config.colors.length;\n    }\n    if (!item.index) {\n      item.index = 0;\n    }\n    if (!item.type) {\n      item.type = opts.type;\n    }\n    if (typeof item.show == \"undefined\") {\n      item.show = true;\n    }\n    if (!item.type) {\n      item.type = opts.type;\n    }\n    if (!item.pointShape) {\n      item.pointShape = \"circle\";\n    }\n    if (!item.legendShape) {\n      switch (item.type) {\n        case 'line':\n          item.legendShape = \"line\";\n          break;\n        case 'column':\n          item.legendShape = \"rect\";\n          break;\n        case 'area':\n          item.legendShape = \"triangle\";\n          break;\n        default:\n          item.legendShape = \"circle\";}\n\n    }\n    return item;\n  });\n}\n\nfunction getDataRange(minData, maxData) {\n  var limit = 0;\n  var range = maxData - minData;\n  if (range >= 10000) {\n    limit = 1000;\n  } else if (range >= 1000) {\n    limit = 100;\n  } else if (range >= 100) {\n    limit = 10;\n  } else if (range >= 10) {\n    limit = 5;\n  } else if (range >= 1) {\n    limit = 1;\n  } else if (range >= 0.1) {\n    limit = 0.1;\n  } else if (range >= 0.01) {\n    limit = 0.01;\n  } else if (range >= 0.001) {\n    limit = 0.001;\n  } else if (range >= 0.0001) {\n    limit = 0.0001;\n  } else if (range >= 0.00001) {\n    limit = 0.00001;\n  } else {\n    limit = 0.000001;\n  }\n  return {\n    minRange: findRange(minData, 'lower', limit),\n    maxRange: findRange(maxData, 'upper', limit) };\n\n}\n\nfunction measureText(text) {\n  var fontSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : config.fontSize;\n  text = String(text);\n  var text = text.split('');\n  var width = 0;\n  for (var i = 0; i < text.length; i++) {\n    var item = text[i];\n    if (/[a-zA-Z]/.test(item)) {\n      width += 7;\n    } else if (/[0-9]/.test(item)) {\n      width += 5.5;\n    } else if (/\\./.test(item)) {\n      width += 2.7;\n    } else if (/-/.test(item)) {\n      width += 3.25;\n    } else if (/[\\u4e00-\\u9fa5]/.test(item)) {\n      width += 10;\n    } else if (/\\(|\\)/.test(item)) {\n      width += 3.73;\n    } else if (/\\s/.test(item)) {\n      width += 2.5;\n    } else if (/%/.test(item)) {\n      width += 8;\n    } else {\n      width += 10;\n    }\n  }\n  return width * fontSize / 10;\n}\n\nfunction dataCombine(series) {\n  return series.reduce(function (a, b) {\n    return (a.data ? a.data : a).concat(b.data);\n  }, []);\n}\n\nfunction dataCombineStack(series, len) {\n  var sum = new Array(len);\n  for (var j = 0; j < sum.length; j++) {\n    sum[j] = 0;\n  }\n  for (var i = 0; i < series.length; i++) {\n    for (var j = 0; j < sum.length; j++) {\n      sum[j] += series[i].data[j];\n    }\n  }\n  return series.reduce(function (a, b) {\n    return (a.data ? a.data : a).concat(b.data).concat(sum);\n  }, []);\n}\n\nfunction getTouches(touches, opts, e) {\n  var x, y;\n  if (touches.clientX) {\n    if (opts.rotate) {\n      y = opts.height - touches.clientX * opts.pixelRatio;\n      x = (touches.pageY - e.currentTarget.offsetTop - opts.height / opts.pixelRatio / 2 * (opts.pixelRatio - 1)) *\n      opts.pixelRatio;\n    } else {\n      x = touches.clientX * opts.pixelRatio;\n      y = (touches.pageY - e.currentTarget.offsetTop - opts.height / opts.pixelRatio / 2 * (opts.pixelRatio - 1)) *\n      opts.pixelRatio;\n    }\n  } else {\n    if (opts.rotate) {\n      y = opts.height - touches.x * opts.pixelRatio;\n      x = touches.y * opts.pixelRatio;\n    } else {\n      x = touches.x * opts.pixelRatio;\n      y = touches.y * opts.pixelRatio;\n    }\n  }\n  return {\n    x: x,\n    y: y };\n\n}\n\nfunction getSeriesDataItem(series, index) {\n  var data = [];\n  for (var i = 0; i < series.length; i++) {\n    var item = series[i];\n    if (item.data[index] !== null && typeof item.data[index] !== 'undefined' && item.show) {\n      var seriesItem = {};\n      seriesItem.color = item.color;\n      seriesItem.type = item.type;\n      seriesItem.style = item.style;\n      seriesItem.pointShape = item.pointShape;\n      seriesItem.disableLegend = item.disableLegend;\n      seriesItem.name = item.name;\n      seriesItem.show = item.show;\n      seriesItem.data = item.format ? item.format(item.data[index]) : item.data[index];\n      data.push(seriesItem);\n    }\n  }\n  return data;\n}\n\nfunction getMaxTextListLength(list) {\n  var lengthList = list.map(function (item) {\n    return measureText(item);\n  });\n  return Math.max.apply(null, lengthList);\n}\n\nfunction getRadarCoordinateSeries(length) {\n  var eachAngle = 2 * Math.PI / length;\n  var CoordinateSeries = [];\n  for (var i = 0; i < length; i++) {\n    CoordinateSeries.push(eachAngle * i);\n  }\n\n  return CoordinateSeries.map(function (item) {\n    return -1 * item + Math.PI / 2;\n  });\n}\n\nfunction getToolTipData(seriesData, calPoints, index, categories) {\n  var option = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n  var textList = seriesData.map(function (item) {\n    var titleText = [];\n    if (categories) {\n      titleText = categories;\n    } else {\n      titleText = item.data;\n    }\n    return {\n      text: option.format ? option.format(item, titleText[index]) : item.name + ': ' + item.data,\n      color: item.color };\n\n  });\n  var validCalPoints = [];\n  var offset = {\n    x: 0,\n    y: 0 };\n\n  for (var i = 0; i < calPoints.length; i++) {\n    var points = calPoints[i];\n    if (typeof points[index] !== 'undefined' && points[index] !== null) {\n      validCalPoints.push(points[index]);\n    }\n  }\n  for (var _i = 0; _i < validCalPoints.length; _i++) {\n    var item = validCalPoints[_i];\n    offset.x = Math.round(item.x);\n    offset.y += item.y;\n  }\n  offset.y /= validCalPoints.length;\n  return {\n    textList: textList,\n    offset: offset };\n\n}\n\nfunction getMixToolTipData(seriesData, calPoints, index, categories) {\n  var option = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  var textList = seriesData.map(function (item) {\n    return {\n      text: option.format ? option.format(item, categories[index]) : item.name + ': ' + item.data,\n      color: item.color,\n      disableLegend: item.disableLegend ? true : false };\n\n  });\n  textList = textList.filter(function (item) {\n    if (item.disableLegend !== true) {\n      return item;\n    }\n  });\n  var validCalPoints = [];\n  var offset = {\n    x: 0,\n    y: 0 };\n\n  for (var i = 0; i < calPoints.length; i++) {\n    var points = calPoints[i];\n    if (typeof points[index] !== 'undefined' && points[index] !== null) {\n      validCalPoints.push(points[index]);\n    }\n  }\n  for (var _i2 = 0; _i2 < validCalPoints.length; _i2++) {\n    var item = validCalPoints[_i2];\n    offset.x = Math.round(item.x);\n    offset.y += item.y;\n  }\n  offset.y /= validCalPoints.length;\n  return {\n    textList: textList,\n    offset: offset };\n\n}\n\nfunction getCandleToolTipData(series, seriesData, calPoints, index, categories, extra) {\n  var option = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n  var upColor = extra.color.upFill;\n  var downColor = extra.color.downFill;\n  //颜色顺序为开盘，收盘，最低，最高\n  var color = [upColor, upColor, downColor, upColor];\n  var textList = [];\n  var text0 = {\n    text: categories[index],\n    color: null };\n\n  textList.push(text0);\n  seriesData.map(function (item) {\n    if (index == 0 && item.data[1] - item.data[0] < 0) {\n      color[1] = downColor;\n    } else {\n      if (item.data[0] < series[index - 1][1]) {\n        color[0] = downColor;\n      }\n      if (item.data[1] < item.data[0]) {\n        color[1] = downColor;\n      }\n      if (item.data[2] > series[index - 1][1]) {\n        color[2] = upColor;\n      }\n      if (item.data[3] < series[index - 1][1]) {\n        color[3] = downColor;\n      }\n    }\n    var text1 = {\n      text: '开盘：' + item.data[0],\n      color: color[0] };\n\n    var text2 = {\n      text: '收盘：' + item.data[1],\n      color: color[1] };\n\n    var text3 = {\n      text: '最低：' + item.data[2],\n      color: color[2] };\n\n    var text4 = {\n      text: '最高：' + item.data[3],\n      color: color[3] };\n\n    textList.push(text1, text2, text3, text4);\n  });\n  var validCalPoints = [];\n  var offset = {\n    x: 0,\n    y: 0 };\n\n  for (var i = 0; i < calPoints.length; i++) {\n    var points = calPoints[i];\n    if (typeof points[index] !== 'undefined' && points[index] !== null) {\n      validCalPoints.push(points[index]);\n    }\n  }\n  offset.x = Math.round(validCalPoints[0][0].x);\n  return {\n    textList: textList,\n    offset: offset };\n\n}\n\nfunction filterSeries(series) {\n  var tempSeries = [];\n  for (var i = 0; i < series.length; i++) {\n    if (series[i].show == true) {\n      tempSeries.push(series[i]);\n    }\n  }\n  return tempSeries;\n}\n\nfunction findCurrentIndex(currentPoints, calPoints, opts, config) {\n  var offset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  var currentIndex = -1;\n  var spacing = 0;\n  var xAxisPoints = [];\n  for (var i = 0; i < calPoints[0].length; i++) {\n    xAxisPoints.push(calPoints[0][i].x);\n  }\n  if ((opts.type == 'line' || opts.type == 'area') && opts.xAxis.boundaryGap == 'justify') {\n    spacing = opts.chartData.eachSpacing / 2;\n  }\n  if (!opts.categories) {\n    spacing = 0;\n  }\n  if (isInExactChartArea(currentPoints, opts, config)) {\n    xAxisPoints.forEach(function (item, index) {\n      if (currentPoints.x + offset + spacing > item) {\n        currentIndex = index;\n      }\n    });\n  }\n  return currentIndex;\n}\n\nfunction findLegendIndex(currentPoints, legendData, opts) {\n  var currentIndex = -1;\n  if (isInExactLegendArea(currentPoints, legendData.area)) {\n    var points = legendData.points;\n    var index = -1;\n    for (var i = 0, len = points.length; i < len; i++) {\n      var item = points[i];\n      for (var j = 0; j < item.length; j++) {\n        index += 1;\n        var area = item[j]['area'];\n        if (currentPoints.x > area[0] && currentPoints.x < area[2] && currentPoints.y > area[1] && currentPoints.y < area[3]) {\n          currentIndex = index;\n          break;\n        }\n      }\n    }\n    return currentIndex;\n  }\n  return currentIndex;\n}\n\nfunction isInExactLegendArea(currentPoints, area) {\n  return currentPoints.x > area.start.x && currentPoints.x < area.end.x && currentPoints.y > area.start.y &&\n  currentPoints.y < area.end.y;\n}\n\nfunction isInExactChartArea(currentPoints, opts, config) {\n  return currentPoints.x <= opts.width - opts.area[1] + 10 && currentPoints.x >= opts.area[3] - 10 && currentPoints.y >= opts.area[0] && currentPoints.y <= opts.height - opts.area[2];\n}\n\nfunction findRadarChartCurrentIndex(currentPoints, radarData, count) {\n  var eachAngleArea = 2 * Math.PI / count;\n  var currentIndex = -1;\n  if (isInExactPieChartArea(currentPoints, radarData.center, radarData.radius)) {\n    var fixAngle = function fixAngle(angle) {\n      if (angle < 0) {\n        angle += 2 * Math.PI;\n      }\n      if (angle > 2 * Math.PI) {\n        angle -= 2 * Math.PI;\n      }\n      return angle;\n    };\n\n    var angle = Math.atan2(radarData.center.y - currentPoints.y, currentPoints.x - radarData.center.x);\n    angle = -1 * angle;\n    if (angle < 0) {\n      angle += 2 * Math.PI;\n    }\n\n    var angleList = radarData.angleList.map(function (item) {\n      item = fixAngle(-1 * item);\n\n      return item;\n    });\n\n    angleList.forEach(function (item, index) {\n      var rangeStart = fixAngle(item - eachAngleArea / 2);\n      var rangeEnd = fixAngle(item + eachAngleArea / 2);\n      if (rangeEnd < rangeStart) {\n        rangeEnd += 2 * Math.PI;\n      }\n      if (angle >= rangeStart && angle <= rangeEnd || angle + 2 * Math.PI >= rangeStart && angle + 2 * Math.PI <=\n      rangeEnd) {\n        currentIndex = index;\n      }\n    });\n  }\n\n  return currentIndex;\n}\n\nfunction findFunnelChartCurrentIndex(currentPoints, funnelData) {\n  var currentIndex = -1;\n  for (var i = 0, len = funnelData.series.length; i < len; i++) {\n    var item = funnelData.series[i];\n    if (currentPoints.x > item.funnelArea[0] && currentPoints.x < item.funnelArea[2] && currentPoints.y > item.funnelArea[1] && currentPoints.y < item.funnelArea[3]) {\n      currentIndex = i;\n      break;\n    }\n  }\n  return currentIndex;\n}\n\nfunction findWordChartCurrentIndex(currentPoints, wordData) {\n  var currentIndex = -1;\n  for (var i = 0, len = wordData.length; i < len; i++) {\n    var item = wordData[i];\n    if (currentPoints.x > item.area[0] && currentPoints.x < item.area[2] && currentPoints.y > item.area[1] && currentPoints.y < item.area[3]) {\n      currentIndex = i;\n      break;\n    }\n  }\n  return currentIndex;\n}\n\nfunction findMapChartCurrentIndex(currentPoints, opts) {\n  var currentIndex = -1;\n  var cData = opts.chartData.mapData;\n  var data = opts.series;\n  var tmp = pointToCoordinate(currentPoints.y, currentPoints.x, cData.bounds, cData.scale, cData.xoffset, cData.yoffset);\n  var poi = [tmp.x, tmp.y];\n  for (var i = 0, len = data.length; i < len; i++) {\n    var item = data[i].geometry.coordinates;\n    if (isPoiWithinPoly(poi, item)) {\n      currentIndex = i;\n      break;\n    }\n  }\n  return currentIndex;\n}\n\nfunction findPieChartCurrentIndex(currentPoints, pieData) {\n  var currentIndex = -1;\n  if (isInExactPieChartArea(currentPoints, pieData.center, pieData.radius)) {\n    var angle = Math.atan2(pieData.center.y - currentPoints.y, currentPoints.x - pieData.center.x);\n    angle = -angle;\n    for (var i = 0, len = pieData.series.length; i < len; i++) {\n      var item = pieData.series[i];\n      if (isInAngleRange(angle, item._start_, item._start_ + item._proportion_ * 2 * Math.PI)) {\n        currentIndex = i;\n        break;\n      }\n    }\n  }\n\n  return currentIndex;\n}\n\nfunction isInExactPieChartArea(currentPoints, center, radius) {\n  return Math.pow(currentPoints.x - center.x, 2) + Math.pow(currentPoints.y - center.y, 2) <= Math.pow(radius, 2);\n}\n\nfunction splitPoints(points) {\n  var newPoints = [];\n  var items = [];\n  points.forEach(function (item, index) {\n    if (item !== null) {\n      items.push(item);\n    } else {\n      if (items.length) {\n        newPoints.push(items);\n      }\n      items = [];\n    }\n  });\n  if (items.length) {\n    newPoints.push(items);\n  }\n\n  return newPoints;\n}\n\nfunction calLegendData(series, opts, config, chartData) {\n  var legendData = {\n    area: {\n      start: {\n        x: 0,\n        y: 0 },\n\n      end: {\n        x: 0,\n        y: 0 },\n\n      width: 0,\n      height: 0,\n      wholeWidth: 0,\n      wholeHeight: 0 },\n\n    points: [],\n    widthArr: [],\n    heightArr: [] };\n\n  if (opts.legend.show === false) {\n    chartData.legendData = legendData;\n    return legendData;\n  }\n\n  var padding = opts.legend.padding;\n  var margin = opts.legend.margin;\n  var fontSize = opts.legend.fontSize;\n  var shapeWidth = 15 * opts.pixelRatio;\n  var shapeRight = 5 * opts.pixelRatio;\n  var lineHeight = Math.max(opts.legend.lineHeight * opts.pixelRatio, fontSize);\n  if (opts.legend.position == 'top' || opts.legend.position == 'bottom') {\n    var legendList = [];\n    var widthCount = 0;\n    var widthCountArr = [];\n    var currentRow = [];\n    for (var i = 0; i < series.length; i++) {\n      var item = series[i];\n      var itemWidth = shapeWidth + shapeRight + measureText(item.name || 'undefined', fontSize) + opts.legend.itemGap;\n      if (widthCount + itemWidth > opts.width - opts.padding[1] - opts.padding[3]) {\n        legendList.push(currentRow);\n        widthCountArr.push(widthCount - opts.legend.itemGap);\n        widthCount = itemWidth;\n        currentRow = [item];\n      } else {\n        widthCount += itemWidth;\n        currentRow.push(item);\n      }\n    }\n    if (currentRow.length) {\n      legendList.push(currentRow);\n      widthCountArr.push(widthCount - opts.legend.itemGap);\n      legendData.widthArr = widthCountArr;\n      var legendWidth = Math.max.apply(null, widthCountArr);\n      switch (opts.legend.float) {\n        case 'left':\n          legendData.area.start.x = opts.padding[3];\n          legendData.area.end.x = opts.padding[3] + 2 * padding;\n          break;\n        case 'right':\n          legendData.area.start.x = opts.width - opts.padding[1] - legendWidth - 2 * padding;\n          legendData.area.end.x = opts.width - opts.padding[1];\n          break;\n        default:\n          legendData.area.start.x = (opts.width - legendWidth) / 2 - padding;\n          legendData.area.end.x = (opts.width + legendWidth) / 2 + padding;}\n\n      legendData.area.width = legendWidth + 2 * padding;\n      legendData.area.wholeWidth = legendWidth + 2 * padding;\n      legendData.area.height = legendList.length * lineHeight + 2 * padding;\n      legendData.area.wholeHeight = legendList.length * lineHeight + 2 * padding + 2 * margin;\n      legendData.points = legendList;\n    }\n  } else {\n    var len = series.length;\n    var maxHeight = opts.height - opts.padding[0] - opts.padding[2] - 2 * margin - 2 * padding;\n    var maxLength = Math.min(Math.floor(maxHeight / lineHeight), len);\n    legendData.area.height = maxLength * lineHeight + padding * 2;\n    legendData.area.wholeHeight = maxLength * lineHeight + padding * 2;\n    switch (opts.legend.float) {\n      case 'top':\n        legendData.area.start.y = opts.padding[0] + margin;\n        legendData.area.end.y = opts.padding[0] + margin + legendData.area.height;\n        break;\n      case 'bottom':\n        legendData.area.start.y = opts.height - opts.padding[2] - margin - legendData.area.height;\n        legendData.area.end.y = opts.height - opts.padding[2] - margin;\n        break;\n      default:\n        legendData.area.start.y = (opts.height - legendData.area.height) / 2;\n        legendData.area.end.y = (opts.height + legendData.area.height) / 2;}\n\n    var lineNum = len % maxLength === 0 ? len / maxLength : Math.floor(len / maxLength + 1);\n    var _currentRow = [];\n    for (var _i3 = 0; _i3 < lineNum; _i3++) {\n      var temp = series.slice(_i3 * maxLength, _i3 * maxLength + maxLength);\n      _currentRow.push(temp);\n    }\n\n    legendData.points = _currentRow;\n\n    if (_currentRow.length) {\n      for (var _i4 = 0; _i4 < _currentRow.length; _i4++) {\n        var _item = _currentRow[_i4];\n        var maxWidth = 0;\n        for (var j = 0; j < _item.length; j++) {\n          var _itemWidth = shapeWidth + shapeRight + measureText(_item[j].name || 'undefined', fontSize) + opts.legend.itemGap;\n          if (_itemWidth > maxWidth) {\n            maxWidth = _itemWidth;\n          }\n        }\n        legendData.widthArr.push(maxWidth);\n        legendData.heightArr.push(_item.length * lineHeight + padding * 2);\n      }\n      var _legendWidth = 0;\n      for (var _i5 = 0; _i5 < legendData.widthArr.length; _i5++) {\n        _legendWidth += legendData.widthArr[_i5];\n      }\n      legendData.area.width = _legendWidth - opts.legend.itemGap + 2 * padding;\n      legendData.area.wholeWidth = legendData.area.width + padding;\n    }\n  }\n\n  switch (opts.legend.position) {\n    case 'top':\n      legendData.area.start.y = opts.padding[0] + margin;\n      legendData.area.end.y = opts.padding[0] + margin + legendData.area.height;\n      break;\n    case 'bottom':\n      legendData.area.start.y = opts.height - opts.padding[2] - legendData.area.height - margin;\n      legendData.area.end.y = opts.height - opts.padding[2] - margin;\n      break;\n    case 'left':\n      legendData.area.start.x = opts.padding[3];\n      legendData.area.end.x = opts.padding[3] + legendData.area.width;\n      break;\n    case 'right':\n      legendData.area.start.x = opts.width - opts.padding[1] - legendData.area.width;\n      legendData.area.end.x = opts.width - opts.padding[1];\n      break;}\n\n  chartData.legendData = legendData;\n  return legendData;\n}\n\nfunction calCategoriesData(categories, opts, config, eachSpacing) {\n  var result = {\n    angle: 0,\n    xAxisHeight: config.xAxisHeight };\n\n  var categoriesTextLenth = categories.map(function (item) {\n    return measureText(item, opts.xAxis.fontSize || config.fontSize);\n  });\n  var maxTextLength = Math.max.apply(this, categoriesTextLenth);\n\n  if (opts.xAxis.rotateLabel == true && maxTextLength + 2 * config.xAxisTextPadding > eachSpacing) {\n    result.angle = 45 * Math.PI / 180;\n    result.xAxisHeight = 2 * config.xAxisTextPadding + maxTextLength * Math.sin(result.angle);\n  }\n  return result;\n}\n\nfunction getXAxisTextList(series, opts, config) {\n  var index = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;\n  var data = dataCombine(series);\n  var sorted = [];\n  // remove null from data\n  data = data.filter(function (item) {\n    //return item !== null;\n    if (typeof item === 'object' && item !== null) {\n      if (item.constructor == Array) {\n        return item !== null;\n      } else {\n        return item.value !== null;\n      }\n    } else {\n      return item !== null;\n    }\n  });\n  data.map(function (item) {\n    if (typeof item === 'object') {\n      if (item.constructor == Array) {\n        if (opts.type == 'candle') {\n          item.map(function (subitem) {\n            sorted.push(subitem);\n          });\n        } else {\n          sorted.push(item[0]);\n        }\n      } else {\n        sorted.push(item.value);\n      }\n    } else {\n      sorted.push(item);\n    }\n  });\n\n  var minData = 0;\n  var maxData = 0;\n  if (sorted.length > 0) {\n    minData = Math.min.apply(this, sorted);\n    maxData = Math.max.apply(this, sorted);\n  }\n  //为了兼容v1.9.0之前的项目\n  if (index > -1) {\n    if (typeof opts.xAxis.data[index].min === 'number') {\n      minData = Math.min(opts.xAxis.data[index].min, minData);\n    }\n    if (typeof opts.xAxis.data[index].max === 'number') {\n      maxData = Math.max(opts.xAxis.data[index].max, maxData);\n    }\n  } else {\n    if (typeof opts.xAxis.min === 'number') {\n      minData = Math.min(opts.xAxis.min, minData);\n    }\n    if (typeof opts.xAxis.max === 'number') {\n      maxData = Math.max(opts.xAxis.max, maxData);\n    }\n  }\n\n\n  if (minData === maxData) {\n    var rangeSpan = maxData || 10;\n    maxData += rangeSpan;\n  }\n\n  var dataRange = getDataRange(minData, maxData);\n  var minRange = dataRange.minRange;\n  var maxRange = dataRange.maxRange;\n\n  var range = [];\n  var eachRange = (maxRange - minRange) / opts.xAxis.splitNumber;\n\n  for (var i = 0; i <= opts.xAxis.splitNumber; i++) {\n    range.push(minRange + eachRange * i);\n  }\n  return range;\n}\n\nfunction calXAxisData(series, opts, config) {\n  var result = {\n    angle: 0,\n    xAxisHeight: config.xAxisHeight };\n\n\n  result.ranges = getXAxisTextList(series, opts, config);\n  result.rangesFormat = result.ranges.map(function (item) {\n    item = opts.xAxis.format ? opts.xAxis.format(item) : util.toFixed(item, 2);\n    return item;\n  });\n  var xAxisScaleValues = result.ranges.map(function (item) {\n    // 如果刻度值是浮点数,则保留两位小数\n    item = util.toFixed(item, 2);\n    // 若有自定义格式则调用自定义的格式化函数\n    item = opts.xAxis.format ? opts.xAxis.format(Number(item)) : item;\n    return item;\n  });\n\n  result = Object.assign(result, getXAxisPoints(xAxisScaleValues, opts, config));\n  // 计算X轴刻度的属性譬如每个刻度的间隔,刻度的起始点\\结束点以及总长\n  var eachSpacing = result.eachSpacing;\n\n  var textLength = xAxisScaleValues.map(function (item) {\n    return measureText(item);\n  });\n\n  // get max length of categories text\n  var maxTextLength = Math.max.apply(this, textLength);\n\n  // 如果刻度值文本内容过长,则将其逆时针旋转45°\n  if (maxTextLength + 2 * config.xAxisTextPadding > eachSpacing) {\n    result.angle = 45 * Math.PI / 180;\n    result.xAxisHeight = 2 * config.xAxisTextPadding + maxTextLength * Math.sin(result.angle);\n  }\n\n  if (opts.xAxis.disabled === true) {\n    result.xAxisHeight = 0;\n  }\n\n  return result;\n}\n\nfunction getRadarDataPoints(angleList, center, radius, series, opts) {\n  var process = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n\n  var radarOption = opts.extra.radar || {};\n  radarOption.max = radarOption.max || 0;\n  var maxData = Math.max(radarOption.max, Math.max.apply(null, dataCombine(series)));\n\n  var data = [];var _loop2 = function _loop2(\n  i) {\n    var each = series[i];\n    var listItem = {};\n    listItem.color = each.color;\n    listItem.legendShape = each.legendShape;\n    listItem.pointShape = each.pointShape;\n    listItem.data = [];\n    each.data.forEach(function (item, index) {\n      var tmp = {};\n      tmp.angle = angleList[index];\n\n      tmp.proportion = item / maxData;\n      tmp.position = convertCoordinateOrigin(radius * tmp.proportion * process * Math.cos(tmp.angle), radius * tmp.proportion *\n      process * Math.sin(tmp.angle), center);\n      listItem.data.push(tmp);\n    });\n\n    data.push(listItem);};for (var i = 0; i < series.length; i++) {_loop2(i);\n  }\n\n  return data;\n}\n\nfunction getPieDataPoints(series, radius) {\n  var process = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  var count = 0;\n  var _start_ = 0;\n  for (var i = 0; i < series.length; i++) {\n    var item = series[i];\n    item.data = item.data === null ? 0 : item.data;\n    count += item.data;\n  }\n  for (var _i6 = 0; _i6 < series.length; _i6++) {\n    var _item2 = series[_i6];\n    _item2.data = _item2.data === null ? 0 : _item2.data;\n    if (count === 0) {\n      _item2._proportion_ = 1 / series.length * process;\n    } else {\n      _item2._proportion_ = _item2.data / count * process;\n    }\n    _item2._radius_ = radius;\n  }\n  for (var _i7 = 0; _i7 < series.length; _i7++) {\n    var _item3 = series[_i7];\n    _item3._start_ = _start_;\n    _start_ += 2 * _item3._proportion_ * Math.PI;\n  }\n\n  return series;\n}\n\nfunction getFunnelDataPoints(series, radius) {\n  var process = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  series = series.sort(function (a, b) {return parseInt(b.data) - parseInt(a.data);});\n  for (var i = 0; i < series.length; i++) {\n    series[i].radius = series[i].data / series[0].data * radius * process;\n    series[i]._proportion_ = series[i].data / series[0].data;\n  }\n  return series.reverse();\n}\n\nfunction getRoseDataPoints(series, type, minRadius, radius) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var count = 0;\n  var _start_ = 0;\n\n  var dataArr = [];\n  for (var i = 0; i < series.length; i++) {\n    var item = series[i];\n    item.data = item.data === null ? 0 : item.data;\n    count += item.data;\n    dataArr.push(item.data);\n  }\n\n  var minData = Math.min.apply(null, dataArr);\n  var maxData = Math.max.apply(null, dataArr);\n  var radiusLength = radius - minRadius;\n\n  for (var _i8 = 0; _i8 < series.length; _i8++) {\n    var _item4 = series[_i8];\n    _item4.data = _item4.data === null ? 0 : _item4.data;\n    if (count === 0 || type == 'area') {\n      _item4._proportion_ = _item4.data / count * process;\n      _item4._rose_proportion_ = 1 / series.length * process;\n    } else {\n      _item4._proportion_ = _item4.data / count * process;\n      _item4._rose_proportion_ = _item4.data / count * process;\n    }\n    _item4._radius_ = minRadius + radiusLength * ((_item4.data - minData) / (maxData - minData));\n  }\n  for (var _i9 = 0; _i9 < series.length; _i9++) {\n    var _item5 = series[_i9];\n    _item5._start_ = _start_;\n    _start_ += 2 * _item5._rose_proportion_ * Math.PI;\n  }\n\n  return series;\n}\n\nfunction getArcbarDataPoints(series, arcbarOption) {\n  var process = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (process == 1) {\n    process = 0.999999;\n  }\n  for (var i = 0; i < series.length; i++) {\n    var item = series[i];\n    item.data = item.data === null ? 0 : item.data;\n    var totalAngle = void 0;\n    if (arcbarOption.type == 'circle') {\n      totalAngle = 2;\n    } else {\n      if (arcbarOption.endAngle < arcbarOption.startAngle) {\n        totalAngle = 2 + arcbarOption.endAngle - arcbarOption.startAngle;\n      } else {\n        totalAngle = arcbarOption.startAngle - arcbarOption.endAngle;\n      }\n    }\n    item._proportion_ = totalAngle * item.data * process + arcbarOption.startAngle;\n    if (item._proportion_ >= 2) {\n      item._proportion_ = item._proportion_ % 2;\n    }\n  }\n  return series;\n}\n\nfunction getGaugeAxisPoints(categories, startAngle, endAngle) {\n  var totalAngle = startAngle - endAngle + 1;\n  var tempStartAngle = startAngle;\n  for (var i = 0; i < categories.length; i++) {\n    categories[i].value = categories[i].value === null ? 0 : categories[i].value;\n    categories[i]._startAngle_ = tempStartAngle;\n    categories[i]._endAngle_ = totalAngle * categories[i].value + startAngle;\n    if (categories[i]._endAngle_ >= 2) {\n      categories[i]._endAngle_ = categories[i]._endAngle_ % 2;\n    }\n    tempStartAngle = categories[i]._endAngle_;\n  }\n  return categories;\n}\n\nfunction getGaugeDataPoints(series, categories, gaugeOption) {\n  var process = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  for (var i = 0; i < series.length; i++) {\n    var item = series[i];\n    item.data = item.data === null ? 0 : item.data;\n    if (gaugeOption.pointer.color == 'auto') {\n      for (var _i10 = 0; _i10 < categories.length; _i10++) {\n        if (item.data <= categories[_i10].value) {\n          item.color = categories[_i10].color;\n          break;\n        }\n      }\n    } else {\n      item.color = gaugeOption.pointer.color;\n    }\n    var totalAngle = gaugeOption.startAngle - gaugeOption.endAngle + 1;\n    item._endAngle_ = totalAngle * item.data + gaugeOption.startAngle;\n    item._oldAngle_ = gaugeOption.oldAngle;\n    if (gaugeOption.oldAngle < gaugeOption.endAngle) {\n      item._oldAngle_ += 2;\n    }\n    if (item.data >= gaugeOption.oldData) {\n      item._proportion_ = (item._endAngle_ - item._oldAngle_) * process + gaugeOption.oldAngle;\n    } else {\n      item._proportion_ = item._oldAngle_ - (item._oldAngle_ - item._endAngle_) * process;\n    }\n    if (item._proportion_ >= 2) {\n      item._proportion_ = item._proportion_ % 2;\n    }\n  }\n  return series;\n}\n\nfunction getPieTextMaxLength(series) {\n  series = getPieDataPoints(series);\n  var maxLength = 0;\n  for (var i = 0; i < series.length; i++) {\n    var item = series[i];\n    var text = item.format ? item.format(+item._proportion_.toFixed(2)) : util.toFixed(item._proportion_ * 100) + '%';\n    maxLength = Math.max(maxLength, measureText(text));\n  }\n\n  return maxLength;\n}\n\nfunction fixColumeData(points, eachSpacing, columnLen, index, config, opts) {\n  return points.map(function (item) {\n    if (item === null) {\n      return null;\n    }\n    item.width = Math.ceil((eachSpacing - 2 * config.columePadding) / columnLen);\n\n    if (opts.extra.column && opts.extra.column.width && +opts.extra.column.width > 0) {\n      item.width = Math.min(item.width, +opts.extra.column.width);\n    }\n    if (item.width <= 0) {\n      item.width = 1;\n    }\n    item.x += (index + 0.5 - columnLen / 2) * item.width;\n    return item;\n  });\n}\n\nfunction fixColumeMeterData(points, eachSpacing, columnLen, index, config, opts, border) {\n  return points.map(function (item) {\n    if (item === null) {\n      return null;\n    }\n    item.width = Math.ceil((eachSpacing - 2 * config.columePadding) / 2);\n\n    if (opts.extra.column && opts.extra.column.width && +opts.extra.column.width > 0) {\n      item.width = Math.min(item.width, +opts.extra.column.width);\n    }\n\n    if (index > 0) {\n      item.width -= 2 * border;\n    }\n    return item;\n  });\n}\n\nfunction fixColumeStackData(points, eachSpacing, columnLen, index, config, opts, series) {\n\n  return points.map(function (item, indexn) {\n\n    if (item === null) {\n      return null;\n    }\n    item.width = Math.ceil((eachSpacing - 2 * config.columePadding) / 2);\n\n    if (opts.extra.column && opts.extra.column.width && +opts.extra.column.width > 0) {\n      item.width = Math.min(item.width, +opts.extra.column.width);\n    }\n    return item;\n  });\n}\n\nfunction getXAxisPoints(categories, opts, config) {\n  var spacingValid = opts.width - opts.area[1] - opts.area[3];\n  var dataCount = opts.enableScroll ? Math.min(opts.xAxis.itemCount, categories.length) : categories.length;\n  if ((opts.type == 'line' || opts.type == 'area') && dataCount > 1 && opts.xAxis.boundaryGap == 'justify') {\n    dataCount -= 1;\n  }\n  var eachSpacing = spacingValid / dataCount;\n\n  var xAxisPoints = [];\n  var startX = opts.area[3];\n  var endX = opts.width - opts.area[1];\n  categories.forEach(function (item, index) {\n    xAxisPoints.push(startX + index * eachSpacing);\n  });\n  if (opts.xAxis.boundaryGap !== 'justify') {\n    if (opts.enableScroll === true) {\n      xAxisPoints.push(startX + categories.length * eachSpacing);\n    } else {\n      xAxisPoints.push(endX);\n    }\n  }\n  return {\n    xAxisPoints: xAxisPoints,\n    startX: startX,\n    endX: endX,\n    eachSpacing: eachSpacing };\n\n}\n\nfunction getCandleDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config) {\n  var process = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;\n  var points = [];\n  var validHeight = opts.height - opts.area[0] - opts.area[2];\n  data.forEach(function (item, index) {\n    if (item === null) {\n      points.push(null);\n    } else {\n      var cPoints = [];\n      item.forEach(function (items, indexs) {\n        var point = {};\n        point.x = xAxisPoints[index] + Math.round(eachSpacing / 2);\n        var value = items.value || items;\n        var height = validHeight * (value - minRange) / (maxRange - minRange);\n        height *= process;\n        point.y = opts.height - Math.round(height) - opts.area[2];\n        cPoints.push(point);\n      });\n      points.push(cPoints);\n    }\n  });\n\n  return points;\n}\n\nfunction getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config) {\n  var process = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;\n  var boundaryGap = 'center';\n  if (opts.type == 'line' || opts.type == 'area') {\n    boundaryGap = opts.xAxis.boundaryGap;\n  }\n  var points = [];\n  var validHeight = opts.height - opts.area[0] - opts.area[2];\n  var validWidth = opts.width - opts.area[1] - opts.area[3];\n  data.forEach(function (item, index) {\n    if (item === null) {\n      points.push(null);\n    } else {\n      var point = {};\n      point.color = item.color;\n      point.x = xAxisPoints[index];\n      var value = item;\n      if (typeof item === 'object' && item !== null) {\n        if (item.constructor == Array) {\n          var xranges, xminRange, xmaxRange;\n          xranges = [].concat(opts.chartData.xAxisData.ranges);\n\n          xminRange = xranges.shift();\n          xmaxRange = xranges.pop();\n          value = item[1];\n          point.x = opts.area[3] + validWidth * (item[0] - xminRange) / (xmaxRange - xminRange);\n        } else {\n          value = item.value;\n        }\n      }\n      if (boundaryGap == 'center') {\n        point.x += Math.round(eachSpacing / 2);\n      }\n      var height = validHeight * (value - minRange) / (maxRange - minRange);\n      height *= process;\n      point.y = opts.height - Math.round(height) - opts.area[2];\n      points.push(point);\n    }\n  });\n\n  return points;\n}\n\nfunction getStackDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, seriesIndex, stackSeries) {\n  var process = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 1;\n  var points = [];\n  var validHeight = opts.height - opts.area[0] - opts.area[2];\n\n  data.forEach(function (item, index) {\n    if (item === null) {\n      points.push(null);\n    } else {\n      var point = {};\n      point.color = item.color;\n      point.x = xAxisPoints[index] + Math.round(eachSpacing / 2);\n\n      if (seriesIndex > 0) {\n        var value = 0;\n        for (var i = 0; i <= seriesIndex; i++) {\n          value += stackSeries[i].data[index];\n        }\n        var value0 = value - item;\n        var height = validHeight * (value - minRange) / (maxRange - minRange);\n        var height0 = validHeight * (value0 - minRange) / (maxRange - minRange);\n      } else {\n        var value = item;\n        var height = validHeight * (value - minRange) / (maxRange - minRange);\n        var height0 = 0;\n      }\n      var heightc = height0;\n      height *= process;\n      heightc *= process;\n      point.y = opts.height - Math.round(height) - opts.area[2];\n      point.y0 = opts.height - Math.round(heightc) - opts.area[2];\n      points.push(point);\n    }\n  });\n\n  return points;\n}\n\nfunction getYAxisTextList(series, opts, config, stack) {\n  var index = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;\n  var data;\n  if (stack == 'stack') {\n    data = dataCombineStack(series, opts.categories.length);\n  } else {\n    data = dataCombine(series);\n  }\n  var sorted = [];\n  // remove null from data\n  data = data.filter(function (item) {\n    //return item !== null;\n    if (typeof item === 'object' && item !== null) {\n      if (item.constructor == Array) {\n        return item !== null;\n      } else {\n        return item.value !== null;\n      }\n    } else {\n      return item !== null;\n    }\n  });\n  data.map(function (item) {\n    if (typeof item === 'object') {\n      if (item.constructor == Array) {\n        if (opts.type == 'candle') {\n          item.map(function (subitem) {\n            sorted.push(subitem);\n          });\n        } else {\n          sorted.push(item[1]);\n        }\n      } else {\n        sorted.push(item.value);\n      }\n    } else {\n      sorted.push(item);\n    }\n  });\n\n  var minData = 0;\n  var maxData = 0;\n  if (sorted.length > 0) {\n    minData = Math.min.apply(this, sorted);\n    maxData = Math.max.apply(this, sorted);\n  }\n  //为了兼容v1.9.0之前的项目\n  if (index > -1) {\n    if (typeof opts.yAxis.data[index].min === 'number') {\n      minData = Math.min(opts.yAxis.data[index].min, minData);\n    }\n    if (typeof opts.yAxis.data[index].max === 'number') {\n      maxData = Math.max(opts.yAxis.data[index].max, maxData);\n    }\n  } else {\n    if (typeof opts.yAxis.min === 'number') {\n      minData = Math.min(opts.yAxis.min, minData);\n    }\n    if (typeof opts.yAxis.max === 'number') {\n      maxData = Math.max(opts.yAxis.max, maxData);\n    }\n  }\n\n\n  if (minData === maxData) {\n    var rangeSpan = maxData || 10;\n    maxData += rangeSpan;\n  }\n\n  var dataRange = getDataRange(minData, maxData);\n  var minRange = dataRange.minRange;\n  var maxRange = dataRange.maxRange;\n\n  var range = [];\n  var eachRange = (maxRange - minRange) / opts.yAxis.splitNumber;\n\n  for (var i = 0; i <= opts.yAxis.splitNumber; i++) {\n    range.push(minRange + eachRange * i);\n  }\n  return range.reverse();\n}\n\nfunction calYAxisData(series, opts, config) {\n  //堆叠图重算Y轴\n  var columnstyle = assign({}, {\n    type: \"\" },\n  opts.extra.column);\n  //如果是多Y轴，重新计算\n  var YLength = opts.yAxis.data.length;\n  var newSeries = new Array(YLength);\n  if (YLength > 0) {\n    for (var i = 0; i < YLength; i++) {\n      newSeries[i] = [];\n      for (var j = 0; j < series.length; j++) {\n        if (series[j].index == i) {\n          newSeries[i].push(series[j]);\n        }\n      }\n    }\n    var rangesArr = new Array(YLength);\n    var rangesFormatArr = new Array(YLength);\n    var yAxisWidthArr = new Array(YLength);var _loop3 = function _loop3(\n\n    _i11) {\n      var yData = opts.yAxis.data[_i11];\n      //如果总开关不显示，强制每个Y轴为不显示\n      if (opts.yAxis.disabled == true) {\n        yData.disabled = true;\n      }\n      rangesArr[_i11] = getYAxisTextList(newSeries[_i11], opts, config, columnstyle.type, _i11);\n      var yAxisFontSizes = yData.fontSize || config.fontSize;\n      yAxisWidthArr[_i11] = { position: yData.position ? yData.position : 'left', width: 0 };\n      rangesFormatArr[_i11] = rangesArr[_i11].map(function (items) {\n        items = util.toFixed(items, 6);\n        items = yData.format ? yData.format(Number(items)) : items;\n        yAxisWidthArr[_i11].width = Math.max(yAxisWidthArr[_i11].width, measureText(items, yAxisFontSizes) + 5);\n        return items;\n      });\n      var calibration = yData.calibration ? 4 * opts.pixelRatio : 0;\n      yAxisWidthArr[_i11].width += calibration + 3 * opts.pixelRatio;\n      if (yData.disabled === true) {\n        yAxisWidthArr[_i11].width = 0;\n      }};for (var _i11 = 0; _i11 < YLength; _i11++) {_loop3(_i11);\n    }\n\n  } else {\n    var rangesArr = new Array(1);\n    var rangesFormatArr = new Array(1);\n    var yAxisWidthArr = new Array(1);\n    rangesArr[0] = getYAxisTextList(series, opts, config, columnstyle.type);\n    yAxisWidthArr[0] = { position: 'left', width: 0 };\n    var yAxisFontSize = opts.yAxis.fontSize || config.fontSize;\n    rangesFormatArr[0] = rangesArr[0].map(function (item) {\n      item = util.toFixed(item, 6);\n      item = opts.yAxis.format ? opts.yAxis.format(Number(item)) : item;\n      yAxisWidthArr[0].width = Math.max(yAxisWidthArr[0].width, measureText(item, yAxisFontSize) + 5);\n      return item;\n    });\n    yAxisWidthArr[0].width += 3 * opts.pixelRatio;\n    if (opts.yAxis.disabled === true) {\n      yAxisWidthArr[0] = { position: 'left', width: 0 };\n      opts.yAxis.data[0] = { disabled: true };\n    } else {\n      opts.yAxis.data[0] = { disabled: false, position: 'left', max: opts.yAxis.max, min: opts.yAxis.min, format: opts.yAxis.format };\n    }\n\n  }\n\n  return {\n    rangesFormat: rangesFormatArr,\n    ranges: rangesArr,\n    yAxisWidth: yAxisWidthArr };\n\n\n}\n\nfunction calTooltipYAxisData(point, series, opts, config, eachSpacing) {\n  var ranges = [].concat(opts.chartData.yAxisData.ranges);\n  var spacingValid = opts.height - opts.area[0] - opts.area[2];\n  var minAxis = opts.area[0];\n  var items = [];\n  for (var i = 0; i < ranges.length; i++) {\n    var maxVal = ranges[i].shift();\n    var minVal = ranges[i].pop();\n    var item = maxVal - (maxVal - minVal) * (point - minAxis) / spacingValid;\n    item = opts.yAxis.data[i].format ? opts.yAxis.data[i].format(Number(item)) : item.toFixed(0);\n    items.push(String(item));\n  }\n  return items;\n}\n\nfunction calMarkLineData(points, opts) {\n  var minRange, maxRange;\n  var spacingValid = opts.height - opts.area[0] - opts.area[2];\n  for (var i = 0; i < points.length; i++) {\n    points[i].yAxisIndex = points[i].yAxisIndex ? points[i].yAxisIndex : 0;\n    var range = [].concat(opts.chartData.yAxisData.ranges[points[i].yAxisIndex]);\n    minRange = range.pop();\n    maxRange = range.shift();\n    var height = spacingValid * (points[i].value - minRange) / (maxRange - minRange);\n    points[i].y = opts.height - Math.round(height) - opts.area[2];\n  }\n  return points;\n}\n\nfunction contextRotate(context, opts) {\n  if (opts.rotateLock !== true) {\n    context.translate(opts.height, 0);\n    context.rotate(90 * Math.PI / 180);\n  } else if (opts._rotate_ !== true) {\n    context.translate(opts.height, 0);\n    context.rotate(90 * Math.PI / 180);\n    opts._rotate_ = true;\n  }\n}\n\nfunction drawPointShape(points, color, shape, context, opts) {\n  context.beginPath();\n  if (opts.dataPointShapeType == 'hollow') {\n    context.setStrokeStyle(color);\n    context.setFillStyle(opts.background);\n    context.setLineWidth(2 * opts.pixelRatio);\n  } else {\n    context.setStrokeStyle(\"#ffffff\");\n    context.setFillStyle(color);\n    context.setLineWidth(1 * opts.pixelRatio);\n  }\n  if (shape === 'diamond') {\n    points.forEach(function (item, index) {\n      if (item !== null) {\n        context.moveTo(item.x, item.y - 4.5);\n        context.lineTo(item.x - 4.5, item.y);\n        context.lineTo(item.x, item.y + 4.5);\n        context.lineTo(item.x + 4.5, item.y);\n        context.lineTo(item.x, item.y - 4.5);\n      }\n    });\n  } else if (shape === 'circle') {\n    points.forEach(function (item, index) {\n      if (item !== null) {\n        context.moveTo(item.x + 2.5 * opts.pixelRatio, item.y);\n        context.arc(item.x, item.y, 3 * opts.pixelRatio, 0, 2 * Math.PI, false);\n      }\n    });\n  } else if (shape === 'rect') {\n    points.forEach(function (item, index) {\n      if (item !== null) {\n        context.moveTo(item.x - 3.5, item.y - 3.5);\n        context.rect(item.x - 3.5, item.y - 3.5, 7, 7);\n      }\n    });\n  } else if (shape === 'triangle') {\n    points.forEach(function (item, index) {\n      if (item !== null) {\n        context.moveTo(item.x, item.y - 4.5);\n        context.lineTo(item.x - 4.5, item.y + 4.5);\n        context.lineTo(item.x + 4.5, item.y + 4.5);\n        context.lineTo(item.x, item.y - 4.5);\n      }\n    });\n  }\n  context.closePath();\n  context.fill();\n  context.stroke();\n}\n\nfunction drawRingTitle(opts, config, context, center) {\n  var titlefontSize = opts.title.fontSize || config.titleFontSize;\n  var subtitlefontSize = opts.subtitle.fontSize || config.subtitleFontSize;\n  var title = opts.title.name || '';\n  var subtitle = opts.subtitle.name || '';\n  var titleFontColor = opts.title.color || config.titleColor;\n  var subtitleFontColor = opts.subtitle.color || config.subtitleColor;\n  var titleHeight = title ? titlefontSize : 0;\n  var subtitleHeight = subtitle ? subtitlefontSize : 0;\n  var margin = 5;\n\n  if (subtitle) {\n    var textWidth = measureText(subtitle, subtitlefontSize);\n    var startX = center.x - textWidth / 2 + (opts.subtitle.offsetX || 0);\n    var startY = center.y + subtitlefontSize / 2 + (opts.subtitle.offsetY || 0);\n    if (title) {\n      startY += (titleHeight + margin) / 2;\n    }\n    context.beginPath();\n    context.setFontSize(subtitlefontSize);\n    context.setFillStyle(subtitleFontColor);\n    context.fillText(subtitle, startX, startY);\n    context.closePath();\n    context.stroke();\n  }\n  if (title) {\n    var _textWidth = measureText(title, titlefontSize);\n    var _startX = center.x - _textWidth / 2 + (opts.title.offsetX || 0);\n    var _startY = center.y + titlefontSize / 2 + (opts.title.offsetY || 0);\n    if (subtitle) {\n      _startY -= (subtitleHeight + margin) / 2;\n    }\n    context.beginPath();\n    context.setFontSize(titlefontSize);\n    context.setFillStyle(titleFontColor);\n    context.fillText(title, _startX, _startY);\n    context.closePath();\n    context.stroke();\n  }\n}\n\nfunction drawPointText(points, series, config, context) {\n  // 绘制数据文案\n  var data = series.data;\n  points.forEach(function (item, index) {\n    if (item !== null) {\n      //var formatVal = series.format ? series.format(data[index]) : data[index];\n      context.beginPath();\n      context.setFontSize(series.textSize || config.fontSize);\n      context.setFillStyle(series.textColor || '#666666');\n      var value = data[index];\n      if (typeof data[index] === 'object' && data[index] !== null) {\n        if (data[index].constructor == Array) {\n          value = data[index][1];\n        } else {\n          value = data[index].value;\n        }\n      }\n      var formatVal = series.format ? series.format(value) : value;\n      context.fillText(String(formatVal), item.x - measureText(formatVal, series.textSize || config.fontSize) / 2, item.y - 4);\n      context.closePath();\n      context.stroke();\n    }\n  });\n\n}\n\nfunction drawGaugeLabel(gaugeOption, radius, centerPosition, opts, config, context) {\n  radius -= gaugeOption.width / 2 + config.gaugeLabelTextMargin;\n\n  var totalAngle = gaugeOption.startAngle - gaugeOption.endAngle + 1;\n  var splitAngle = totalAngle / gaugeOption.splitLine.splitNumber;\n  var totalNumber = gaugeOption.endNumber - gaugeOption.startNumber;\n  var splitNumber = totalNumber / gaugeOption.splitLine.splitNumber;\n  var nowAngle = gaugeOption.startAngle;\n  var nowNumber = gaugeOption.startNumber;\n  for (var i = 0; i < gaugeOption.splitLine.splitNumber + 1; i++) {\n    var pos = {\n      x: radius * Math.cos(nowAngle * Math.PI),\n      y: radius * Math.sin(nowAngle * Math.PI) };\n\n    var labelText = gaugeOption.labelFormat ? gaugeOption.labelFormat(nowNumber) : nowNumber;\n    pos.x += centerPosition.x - measureText(labelText) / 2;\n    pos.y += centerPosition.y;\n    var startX = pos.x;\n    var startY = pos.y;\n    context.beginPath();\n    context.setFontSize(config.fontSize);\n    context.setFillStyle(gaugeOption.labelColor || '#666666');\n    context.fillText(labelText, startX, startY + config.fontSize / 2);\n    context.closePath();\n    context.stroke();\n\n    nowAngle += splitAngle;\n    if (nowAngle >= 2) {\n      nowAngle = nowAngle % 2;\n    }\n    nowNumber += splitNumber;\n  }\n\n}\n\nfunction drawRadarLabel(angleList, radius, centerPosition, opts, config, context) {\n  var radarOption = opts.extra.radar || {};\n  radius += config.radarLabelTextMargin;\n\n  angleList.forEach(function (angle, index) {\n    var pos = {\n      x: radius * Math.cos(angle),\n      y: radius * Math.sin(angle) };\n\n    var posRelativeCanvas = convertCoordinateOrigin(pos.x, pos.y, centerPosition);\n    var startX = posRelativeCanvas.x;\n    var startY = posRelativeCanvas.y;\n    if (util.approximatelyEqual(pos.x, 0)) {\n      startX -= measureText(opts.categories[index] || '') / 2;\n    } else if (pos.x < 0) {\n      startX -= measureText(opts.categories[index] || '');\n    }\n    context.beginPath();\n    context.setFontSize(config.fontSize);\n    context.setFillStyle(radarOption.labelColor || '#666666');\n    context.fillText(opts.categories[index] || '', startX, startY + config.fontSize / 2);\n    context.closePath();\n    context.stroke();\n  });\n\n}\n\nfunction drawPieText(series, opts, config, context, radius, center) {\n  var lineRadius = config.pieChartLinePadding;\n  var textObjectCollection = [];\n  var lastTextObject = null;\n\n  var seriesConvert = series.map(function (item) {\n    var text = item.format ? item.format(+item._proportion_.toFixed(2)) : util.toFixed(item._proportion_.toFixed(4) * 100) + '%';\n    if (item._rose_proportion_) item._proportion_ = item._rose_proportion_;\n    var arc = 2 * Math.PI - (item._start_ + 2 * Math.PI * item._proportion_ / 2);\n    var color = item.color;\n    var radius = item._radius_;\n    return {\n      arc: arc,\n      text: text,\n      color: color,\n      radius: radius,\n      textColor: item.textColor,\n      textSize: item.textSize };\n\n  });\n  for (var i = 0; i < seriesConvert.length; i++) {\n    var item = seriesConvert[i];\n    // line end\n    var orginX1 = Math.cos(item.arc) * (item.radius + lineRadius);\n    var orginY1 = Math.sin(item.arc) * (item.radius + lineRadius);\n\n    // line start\n    var orginX2 = Math.cos(item.arc) * item.radius;\n    var orginY2 = Math.sin(item.arc) * item.radius;\n\n    // text start\n    var orginX3 = orginX1 >= 0 ? orginX1 + config.pieChartTextPadding : orginX1 - config.pieChartTextPadding;\n    var orginY3 = orginY1;\n    var textWidth = measureText(item.text, item.textSize || config.fontSize);\n    var startY = orginY3;\n\n    if (lastTextObject && util.isSameXCoordinateArea(lastTextObject.start, {\n      x: orginX3 }))\n    {\n      if (orginX3 > 0) {\n        startY = Math.min(orginY3, lastTextObject.start.y);\n      } else if (orginX1 < 0) {\n        startY = Math.max(orginY3, lastTextObject.start.y);\n      } else {\n        if (orginY3 > 0) {\n          startY = Math.max(orginY3, lastTextObject.start.y);\n        } else {\n          startY = Math.min(orginY3, lastTextObject.start.y);\n        }\n      }\n    }\n    if (orginX3 < 0) {\n      orginX3 -= textWidth;\n    }\n\n    var textObject = {\n      lineStart: {\n        x: orginX2,\n        y: orginY2 },\n\n      lineEnd: {\n        x: orginX1,\n        y: orginY1 },\n\n      start: {\n        x: orginX3,\n        y: startY },\n\n      width: textWidth,\n      height: config.fontSize,\n      text: item.text,\n      color: item.color,\n      textColor: item.textColor,\n      textSize: item.textSize };\n\n    lastTextObject = avoidCollision(textObject, lastTextObject);\n    textObjectCollection.push(lastTextObject);\n  }\n\n  for (var _i12 = 0; _i12 < textObjectCollection.length; _i12++) {\n    var _item6 = textObjectCollection[_i12];\n    var lineStartPoistion = convertCoordinateOrigin(_item6.lineStart.x, _item6.lineStart.y, center);\n    var lineEndPoistion = convertCoordinateOrigin(_item6.lineEnd.x, _item6.lineEnd.y, center);\n    var textPosition = convertCoordinateOrigin(_item6.start.x, _item6.start.y, center);\n    context.setLineWidth(1 * opts.pixelRatio);\n    context.setFontSize(config.fontSize);\n    context.beginPath();\n    context.setStrokeStyle(_item6.color);\n    context.setFillStyle(_item6.color);\n    context.moveTo(lineStartPoistion.x, lineStartPoistion.y);\n    var curveStartX = _item6.start.x < 0 ? textPosition.x + _item6.width : textPosition.x;\n    var textStartX = _item6.start.x < 0 ? textPosition.x - 5 : textPosition.x + 5;\n    context.quadraticCurveTo(lineEndPoistion.x, lineEndPoistion.y, curveStartX, textPosition.y);\n    context.moveTo(lineStartPoistion.x, lineStartPoistion.y);\n    context.stroke();\n    context.closePath();\n    context.beginPath();\n    context.moveTo(textPosition.x + _item6.width, textPosition.y);\n    context.arc(curveStartX, textPosition.y, 2, 0, 2 * Math.PI);\n    context.closePath();\n    context.fill();\n    context.beginPath();\n    context.setFontSize(_item6.textSize || config.fontSize);\n    context.setFillStyle(_item6.textColor || '#666666');\n    context.fillText(_item6.text, textStartX, textPosition.y + 3);\n    context.closePath();\n    context.stroke();\n    context.closePath();\n  }\n}\n\nfunction drawToolTipSplitLine(offsetX, opts, config, context) {\n  var toolTipOption = opts.extra.tooltip || {};\n  toolTipOption.gridType = toolTipOption.gridType == undefined ? 'solid' : toolTipOption.gridType;\n  toolTipOption.dashLength = toolTipOption.dashLength == undefined ? 4 : toolTipOption.dashLength;\n  var startY = opts.area[0];\n  var endY = opts.height - opts.area[2];\n\n  if (toolTipOption.gridType == 'dash') {\n    context.setLineDash([toolTipOption.dashLength, toolTipOption.dashLength]);\n  }\n  context.setStrokeStyle(toolTipOption.gridColor || '#cccccc');\n  context.setLineWidth(1 * opts.pixelRatio);\n  context.beginPath();\n  context.moveTo(offsetX, startY);\n  context.lineTo(offsetX, endY);\n  context.stroke();\n  context.setLineDash([]);\n\n  if (toolTipOption.xAxisLabel) {\n    var labelText = opts.categories[opts.tooltip.index];\n    context.setFontSize(config.fontSize);\n    var textWidth = measureText(labelText, config.fontSize);\n\n    var textX = offsetX - 0.5 * textWidth;\n    var textY = endY;\n    context.beginPath();\n    context.setFillStyle(hexToRgb(toolTipOption.labelBgColor || config.toolTipBackground, toolTipOption.labelBgOpacity || config.toolTipOpacity));\n    context.setStrokeStyle(toolTipOption.labelBgColor || config.toolTipBackground);\n    context.setLineWidth(1 * opts.pixelRatio);\n    context.rect(textX - config.toolTipPadding, textY, textWidth + 2 * config.toolTipPadding, config.fontSize + 2 * config.toolTipPadding);\n    context.closePath();\n    context.stroke();\n    context.fill();\n\n    context.beginPath();\n    context.setFontSize(config.fontSize);\n    context.setFillStyle(toolTipOption.labelFontColor || config.fontColor);\n    context.fillText(String(labelText), textX, textY + config.toolTipPadding + config.fontSize);\n    context.closePath();\n    context.stroke();\n  }\n}\n\nfunction drawMarkLine(opts, config, context) {\n  var markLineOption = assign({}, {\n    type: 'solid',\n    dashLength: 4,\n    data: [] },\n  opts.extra.markLine);\n  var startX = opts.area[3];\n  var endX = opts.width - opts.area[1];\n  var points = calMarkLineData(markLineOption.data, opts);\n\n  for (var i = 0; i < points.length; i++) {\n    var item = assign({}, {\n      lineColor: '#DE4A42',\n      showLabel: false,\n      labelFontColor: '#666666',\n      labelBgColor: '#DFE8FF',\n      labelBgOpacity: 0.8,\n      yAxisIndex: 0 },\n    points[i]);\n\n    if (markLineOption.type == 'dash') {\n      context.setLineDash([markLineOption.dashLength, markLineOption.dashLength]);\n    }\n    context.setStrokeStyle(item.lineColor);\n    context.setLineWidth(1 * opts.pixelRatio);\n    context.beginPath();\n    context.moveTo(startX, item.y);\n    context.lineTo(endX, item.y);\n    context.stroke();\n    context.setLineDash([]);\n    if (item.showLabel) {\n      var labelText = opts.yAxis.format ? opts.yAxis.format(Number(item.value)) : item.value;\n      context.setFontSize(config.fontSize);\n      var textWidth = measureText(labelText, config.fontSize);\n      var bgStartX = opts.padding[3] + config.yAxisTitleWidth - config.toolTipPadding;\n      var bgEndX = Math.max(opts.area[3], textWidth + config.toolTipPadding * 2);\n      var bgWidth = bgEndX - bgStartX;\n\n      var textX = bgStartX + (bgWidth - textWidth) / 2;\n      var textY = item.y;\n      context.setFillStyle(hexToRgb(item.labelBgColor, item.labelBgOpacity));\n      context.setStrokeStyle(item.labelBgColor);\n      context.setLineWidth(1 * opts.pixelRatio);\n      context.beginPath();\n      context.rect(bgStartX, textY - 0.5 * config.fontSize - config.toolTipPadding, bgWidth, config.fontSize + 2 * config.toolTipPadding);\n      context.closePath();\n      context.stroke();\n      context.fill();\n\n      context.beginPath();\n      context.setFontSize(config.fontSize);\n      context.setFillStyle(item.labelFontColor);\n      context.fillText(String(labelText), textX, textY + 0.5 * config.fontSize);\n      context.stroke();\n    }\n  }\n}\n\nfunction drawToolTipHorizentalLine(opts, config, context, eachSpacing, xAxisPoints) {\n  var toolTipOption = assign({}, {\n    gridType: 'solid',\n    dashLength: 4 },\n  opts.extra.tooltip);\n\n  var startX = opts.area[3];\n  var endX = opts.width - opts.area[1];\n\n  if (toolTipOption.gridType == 'dash') {\n    context.setLineDash([toolTipOption.dashLength, toolTipOption.dashLength]);\n  }\n  context.setStrokeStyle(toolTipOption.gridColor || '#cccccc');\n  context.setLineWidth(1 * opts.pixelRatio);\n  context.beginPath();\n  context.moveTo(startX, opts.tooltip.offset.y);\n  context.lineTo(endX, opts.tooltip.offset.y);\n  context.stroke();\n  context.setLineDash([]);\n\n  if (toolTipOption.yAxisLabel) {\n    var labelText = calTooltipYAxisData(opts.tooltip.offset.y, opts.series, opts, config, eachSpacing);\n    var widthArr = opts.chartData.yAxisData.yAxisWidth;\n    var tStartLeft = opts.area[3];\n    var tStartRight = opts.width - opts.area[1];\n    for (var i = 0; i < labelText.length; i++) {\n      context.setFontSize(config.fontSize);\n      var textWidth = measureText(labelText[i], config.fontSize);\n      var bgStartX = void 0,bgEndX = void 0,bgWidth = void 0;\n      if (widthArr[i].position == 'left') {\n        bgStartX = tStartLeft - widthArr[i].width;\n        bgEndX = Math.max(bgStartX, bgStartX + textWidth + config.toolTipPadding * 2);\n      } else {\n        bgStartX = tStartRight;\n        bgEndX = Math.max(bgStartX + widthArr[i].width, bgStartX + textWidth + config.toolTipPadding * 2);\n      }\n      bgWidth = bgEndX - bgStartX;\n\n      var textX = bgStartX + (bgWidth - textWidth) / 2;\n      var textY = opts.tooltip.offset.y;\n      context.beginPath();\n      context.setFillStyle(hexToRgb(toolTipOption.labelBgColor || config.toolTipBackground, toolTipOption.labelBgOpacity || config.toolTipOpacity));\n      context.setStrokeStyle(toolTipOption.labelBgColor || config.toolTipBackground);\n      context.setLineWidth(1 * opts.pixelRatio);\n      context.rect(bgStartX, textY - 0.5 * config.fontSize - config.toolTipPadding, bgWidth, config.fontSize + 2 * config.toolTipPadding);\n      context.closePath();\n      context.stroke();\n      context.fill();\n\n      context.beginPath();\n      context.setFontSize(config.fontSize);\n      context.setFillStyle(toolTipOption.labelFontColor || config.fontColor);\n      context.fillText(labelText[i], textX, textY + 0.5 * config.fontSize);\n      context.closePath();\n      context.stroke();\n      if (widthArr[i].position == 'left') {\n        tStartLeft -= widthArr[i].width + opts.yAxis.padding;\n      } else {\n        tStartRight += widthArr[i].width + opts.yAxis.padding;\n      }\n    }\n  }\n}\n\nfunction drawToolTipSplitArea(offsetX, opts, config, context, eachSpacing) {\n  var toolTipOption = assign({}, {\n    activeBgColor: '#000000',\n    activeBgOpacity: 0.08 },\n  opts.extra.tooltip);\n  var startY = opts.area[0];\n  var endY = opts.height - opts.area[2];\n  context.beginPath();\n  context.setFillStyle(hexToRgb(toolTipOption.activeBgColor, toolTipOption.activeBgOpacity));\n  context.rect(offsetX - eachSpacing / 2, startY, eachSpacing, endY - startY);\n  context.closePath();\n  context.fill();\n}\n\nfunction drawToolTip(textList, offset, opts, config, context, eachSpacing, xAxisPoints) {\n  var toolTipOption = assign({}, {\n    showBox: true,\n    bgColor: '#000000',\n    bgOpacity: 0.7,\n    fontColor: '#FFFFFF' },\n  opts.extra.tooltip);\n  var legendWidth = 4 * opts.pixelRatio;\n  var legendMarginRight = 5 * opts.pixelRatio;\n  var arrowWidth = 8 * opts.pixelRatio;\n  var isOverRightBorder = false;\n  if (opts.type == 'line' || opts.type == 'area' || opts.type == 'candle' || opts.type == 'mix') {\n    drawToolTipSplitLine(opts.tooltip.offset.x, opts, config, context);\n  }\n\n  offset = assign({\n    x: 0,\n    y: 0 },\n  offset);\n  offset.y -= 8 * opts.pixelRatio;\n  var textWidth = textList.map(function (item) {\n    return measureText(item.text, config.fontSize);\n  });\n  var toolTipWidth = legendWidth + legendMarginRight + 4 * config.toolTipPadding + Math.max.apply(null, textWidth);\n  var toolTipHeight = 2 * config.toolTipPadding + textList.length * config.toolTipLineHeight;\n\n  if (toolTipOption.showBox == false) {return;}\n  // if beyond the right border\n  if (offset.x - Math.abs(opts._scrollDistance_) + arrowWidth + toolTipWidth > opts.width) {\n    isOverRightBorder = true;\n  }\n  if (toolTipHeight + offset.y > opts.height) {\n    offset.y = opts.height - toolTipHeight;\n  }\n  // draw background rect\n  context.beginPath();\n  context.setFillStyle(hexToRgb(toolTipOption.bgColor || config.toolTipBackground, toolTipOption.bgOpacity || config.toolTipOpacity));\n  if (isOverRightBorder) {\n    context.moveTo(offset.x, offset.y + 10 * opts.pixelRatio);\n    context.lineTo(offset.x - arrowWidth, offset.y + 10 * opts.pixelRatio - 5 * opts.pixelRatio);\n    context.lineTo(offset.x - arrowWidth, offset.y);\n    context.lineTo(offset.x - arrowWidth - Math.round(toolTipWidth), offset.y);\n    context.lineTo(offset.x - arrowWidth - Math.round(toolTipWidth), offset.y + toolTipHeight);\n    context.lineTo(offset.x - arrowWidth, offset.y + toolTipHeight);\n    context.lineTo(offset.x - arrowWidth, offset.y + 10 * opts.pixelRatio + 5 * opts.pixelRatio);\n    context.lineTo(offset.x, offset.y + 10 * opts.pixelRatio);\n  } else {\n    context.moveTo(offset.x, offset.y + 10 * opts.pixelRatio);\n    context.lineTo(offset.x + arrowWidth, offset.y + 10 * opts.pixelRatio - 5 * opts.pixelRatio);\n    context.lineTo(offset.x + arrowWidth, offset.y);\n    context.lineTo(offset.x + arrowWidth + Math.round(toolTipWidth), offset.y);\n    context.lineTo(offset.x + arrowWidth + Math.round(toolTipWidth), offset.y + toolTipHeight);\n    context.lineTo(offset.x + arrowWidth, offset.y + toolTipHeight);\n    context.lineTo(offset.x + arrowWidth, offset.y + 10 * opts.pixelRatio + 5 * opts.pixelRatio);\n    context.lineTo(offset.x, offset.y + 10 * opts.pixelRatio);\n  }\n\n  context.closePath();\n  context.fill();\n\n  // draw legend\n  textList.forEach(function (item, index) {\n    if (item.color !== null) {\n      context.beginPath();\n      context.setFillStyle(item.color);\n      var startX = offset.x + arrowWidth + 2 * config.toolTipPadding;\n      var startY = offset.y + (config.toolTipLineHeight - config.fontSize) / 2 + config.toolTipLineHeight * index +\n      config.toolTipPadding + 1;\n      if (isOverRightBorder) {\n        startX = offset.x - toolTipWidth - arrowWidth + 2 * config.toolTipPadding;\n      }\n      context.fillRect(startX, startY, legendWidth, config.fontSize);\n      context.closePath();\n    }\n  });\n\n  // draw text list\n\n  textList.forEach(function (item, index) {\n    var startX = offset.x + arrowWidth + 2 * config.toolTipPadding + legendWidth + legendMarginRight;\n    if (isOverRightBorder) {\n      startX = offset.x - toolTipWidth - arrowWidth + 2 * config.toolTipPadding + +legendWidth + legendMarginRight;\n    }\n    var startY = offset.y + (config.toolTipLineHeight - config.fontSize) / 2 + config.toolTipLineHeight * index +\n    config.toolTipPadding;\n    context.beginPath();\n    context.setFontSize(config.fontSize);\n    context.setFillStyle(toolTipOption.fontColor);\n    context.fillText(item.text, startX, startY + config.fontSize);\n    context.closePath();\n    context.stroke();\n  });\n}\n\nfunction drawYAxisTitle(title, opts, config, context) {\n  var startX = config.xAxisHeight + (opts.height - config.xAxisHeight - measureText(title)) / 2;\n  context.save();\n  context.beginPath();\n  context.setFontSize(config.fontSize);\n  context.setFillStyle(opts.yAxis.titleFontColor || '#333333');\n  context.translate(0, opts.height);\n  context.rotate(-90 * Math.PI / 180);\n  context.fillText(title, startX, opts.padding[3] + 0.5 * config.fontSize);\n  context.closePath();\n  context.stroke();\n  context.restore();\n}\n\nfunction drawColumnDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var xAxisData = opts.chartData.xAxisData,\n  xAxisPoints = xAxisData.xAxisPoints,\n  eachSpacing = xAxisData.eachSpacing;\n  var columnOption = assign({}, {\n    type: 'group',\n    width: eachSpacing / 2,\n    meter: {\n      border: 4,\n      fillColor: '#FFFFFF' } },\n\n  opts.extra.column);\n\n  var calPoints = [];\n  context.save();\n\n  var leftNum = -2;\n  var rightNum = xAxisPoints.length + 2;\n\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n    leftNum = Math.floor(-opts._scrollDistance_ / eachSpacing) - 2;\n    rightNum = leftNum + opts.xAxis.itemCount + 4;\n  }\n  if (opts.tooltip && opts.tooltip.textList && opts.tooltip.textList.length && process === 1) {\n    drawToolTipSplitArea(opts.tooltip.offset.x, opts, config, context, eachSpacing);\n  }\n\n  series.forEach(function (eachSeries, seriesIndex) {\n    var ranges, minRange, maxRange;\n    ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\n    minRange = ranges.pop();\n    maxRange = ranges.shift();\n\n    var data = eachSeries.data;\n    switch (columnOption.type) {\n      case 'group':\n        var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n        var tooltipPoints = getStackDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, seriesIndex, series, process);\n        calPoints.push(tooltipPoints);\n        points = fixColumeData(points, eachSpacing, series.length, seriesIndex, config, opts);\n        for (var i = 0; i < points.length; i++) {\n          var item = points[i];\n          if (item !== null && i > leftNum && i < rightNum) {\n            context.beginPath();\n            context.setStrokeStyle(item.color || eachSeries.color);\n            context.setLineWidth(1);\n            context.setFillStyle(item.color || eachSeries.color);\n            var startX = item.x - item.width / 2;\n            var height = opts.height - item.y - opts.area[2];\n            context.moveTo(startX - 1, item.y);\n            context.lineTo(startX + item.width - 2, item.y);\n            context.lineTo(startX + item.width - 2, opts.height - opts.area[2]);\n            context.lineTo(startX, opts.height - opts.area[2]);\n            context.lineTo(startX, item.y);\n            context.closePath();\n            context.stroke();\n            context.fill();\n          }\n        };\n        break;\n      case 'stack':\n        // 绘制堆叠数据图\n        var points = getStackDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, seriesIndex, series, process);\n        calPoints.push(points);\n        points = fixColumeStackData(points, eachSpacing, series.length, seriesIndex, config, opts, series);\n\n        for (var _i13 = 0; _i13 < points.length; _i13++) {\n          var _item7 = points[_i13];\n          if (_item7 !== null && _i13 > leftNum && _i13 < rightNum) {\n            context.beginPath();\n            context.setFillStyle(_item7.color || eachSeries.color);\n            var startX = _item7.x - _item7.width / 2 + 1;\n            var height = opts.height - _item7.y - opts.area[2];\n            var height0 = opts.height - _item7.y0 - opts.area[2];\n            if (seriesIndex > 0) {\n              height -= height0;\n            }\n            context.moveTo(startX, _item7.y);\n            context.fillRect(startX, _item7.y, _item7.width - 2, height);\n            context.closePath();\n            context.fill();\n          }\n        };\n        break;\n      case 'meter':\n        // 绘制温度计数据图\n        var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n        calPoints.push(points);\n        points = fixColumeMeterData(points, eachSpacing, series.length, seriesIndex, config, opts, columnOption.meter.border);\n        if (seriesIndex == 0) {\n          for (var _i14 = 0; _i14 < points.length; _i14++) {\n            var _item8 = points[_i14];\n            if (_item8 !== null && _i14 > leftNum && _i14 < rightNum) {\n              //画背景颜色\n              context.beginPath();\n              context.setFillStyle(columnOption.meter.fillColor);\n              var startX = _item8.x - _item8.width / 2;\n              var height = opts.height - _item8.y - opts.area[2];\n              context.moveTo(startX, _item8.y);\n              context.fillRect(startX, _item8.y, _item8.width, height);\n              context.closePath();\n              context.fill();\n              //画边框线\n              if (columnOption.meter.border > 0) {\n                context.beginPath();\n                context.setStrokeStyle(eachSeries.color);\n                context.setLineWidth(columnOption.meter.border * opts.pixelRatio);\n                context.moveTo(startX + columnOption.meter.border * 0.5, _item8.y + height);\n                context.lineTo(startX + columnOption.meter.border * 0.5, _item8.y + columnOption.meter.border * 0.5);\n                context.lineTo(startX + _item8.width - columnOption.meter.border * 0.5, _item8.y + columnOption.meter.border * 0.5);\n                context.lineTo(startX + _item8.width - columnOption.meter.border * 0.5, _item8.y + height);\n                context.stroke();\n              }\n            }\n          };\n        } else {\n          for (var _i15 = 0; _i15 < points.length; _i15++) {\n            var _item9 = points[_i15];\n            if (_item9 !== null && _i15 > leftNum && _i15 < rightNum) {\n              context.beginPath();\n              context.setFillStyle(_item9.color || eachSeries.color);\n              var startX = _item9.x - _item9.width / 2;\n              var height = opts.height - _item9.y - opts.area[2];\n              context.moveTo(startX, _item9.y);\n              context.fillRect(startX, _item9.y, _item9.width, height);\n              context.closePath();\n              context.fill();\n            }\n          };\n        }\n        break;}\n\n  });\n\n  if (opts.dataLabel !== false && process === 1) {\n    series.forEach(function (eachSeries, seriesIndex) {\n      var ranges, minRange, maxRange;\n      ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\n      minRange = ranges.pop();\n      maxRange = ranges.shift();\n      var data = eachSeries.data;\n      switch (columnOption.type) {\n        case 'group':\n          var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n          points = fixColumeData(points, eachSpacing, series.length, seriesIndex, config, opts);\n          drawPointText(points, eachSeries, config, context);\n          break;\n        case 'stack':\n          var points = getStackDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, seriesIndex, series, process);\n          drawPointText(points, eachSeries, config, context);\n          break;\n        case 'meter':\n          var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n          drawPointText(points, eachSeries, config, context);\n          break;}\n\n    });\n  }\n\n  context.restore();\n\n  return {\n    xAxisPoints: xAxisPoints,\n    calPoints: calPoints,\n    eachSpacing: eachSpacing };\n\n}\n\nfunction drawCandleDataPoints(series, seriesMA, opts, config, context) {\n  var process = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  var candleOption = assign({}, {\n    color: {},\n    average: {} },\n  opts.extra.candle);\n  candleOption.color = assign({}, {\n    upLine: '#f04864',\n    upFill: '#f04864',\n    downLine: '#2fc25b',\n    downFill: '#2fc25b' },\n  candleOption.color);\n  candleOption.average = assign({}, {\n    show: false,\n    name: [],\n    day: [],\n    color: config.colors },\n  candleOption.average);\n  opts.extra.candle = candleOption;\n\n  var xAxisData = opts.chartData.xAxisData,\n  xAxisPoints = xAxisData.xAxisPoints,\n  eachSpacing = xAxisData.eachSpacing;\n\n  var calPoints = [];\n\n  context.save();\n\n  var leftNum = -2;\n  var rightNum = xAxisPoints.length + 2;\n  var leftSpace = 0;\n  var rightSpace = opts.width + eachSpacing;\n\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n    leftNum = Math.floor(-opts._scrollDistance_ / eachSpacing) - 2;\n    rightNum = leftNum + opts.xAxis.itemCount + 4;\n    leftSpace = -opts._scrollDistance_ - eachSpacing + opts.area[3];\n    rightSpace = leftSpace + (opts.xAxis.itemCount + 4) * eachSpacing;\n  }\n\n  //画均线\n  if (candleOption.average.show) {\n    seriesMA.forEach(function (eachSeries, seriesIndex) {\n      var ranges, minRange, maxRange;\n      ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\n      minRange = ranges.pop();\n      maxRange = ranges.shift();\n\n      var data = eachSeries.data;\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n      var splitPointList = splitPoints(points);\n\n      for (var i = 0; i < splitPointList.length; i++) {\n        var _points = splitPointList[i];\n        context.beginPath();\n        context.setStrokeStyle(eachSeries.color);\n        context.setLineWidth(1);\n        if (_points.length === 1) {\n          context.moveTo(_points[0].x, _points[0].y);\n          context.arc(_points[0].x, _points[0].y, 1, 0, 2 * Math.PI);\n        } else {\n          context.moveTo(_points[0].x, _points[0].y);\n          var startPoint = 0;\n          for (var j = 0; j < _points.length; j++) {\n            var item = _points[j];\n            if (startPoint == 0 && item.x > leftSpace) {\n              context.moveTo(item.x, item.y);\n              startPoint = 1;\n            }\n            if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\n              var ctrlPoint = createCurveControlPoints(_points, j - 1);\n              context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, item.x, item.y);\n            }\n          }\n          context.moveTo(_points[0].x, _points[0].y);\n        }\n        context.closePath();\n        context.stroke();\n      }\n    });\n  }\n  //画K线\n  series.forEach(function (eachSeries, seriesIndex) {\n    var ranges, minRange, maxRange;\n    ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\n    minRange = ranges.pop();\n    maxRange = ranges.shift();\n    var data = eachSeries.data;\n    var points = getCandleDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n    calPoints.push(points);\n    var splitPointList = splitPoints(points);\n\n    for (var i = 0; i < splitPointList[0].length; i++) {\n      if (i > leftNum && i < rightNum) {\n        var item = splitPointList[0][i];\n        context.beginPath();\n        //如果上涨\n        if (data[i][1] - data[i][0] > 0) {\n          context.setStrokeStyle(candleOption.color.upLine);\n          context.setFillStyle(candleOption.color.upFill);\n          context.setLineWidth(1 * opts.pixelRatio);\n          context.moveTo(item[3].x, item[3].y); //顶点\n          context.lineTo(item[1].x, item[1].y); //收盘中间点\n          context.lineTo(item[1].x - eachSpacing / 4, item[1].y); //收盘左侧点\n          context.lineTo(item[0].x - eachSpacing / 4, item[0].y); //开盘左侧点\n          context.lineTo(item[0].x, item[0].y); //开盘中间点\n          context.lineTo(item[2].x, item[2].y); //底点\n          context.lineTo(item[0].x, item[0].y); //开盘中间点\n          context.lineTo(item[0].x + eachSpacing / 4, item[0].y); //开盘右侧点\n          context.lineTo(item[1].x + eachSpacing / 4, item[1].y); //收盘右侧点\n          context.lineTo(item[1].x, item[1].y); //收盘中间点\n          context.moveTo(item[3].x, item[3].y); //顶点\n        } else {\n          context.setStrokeStyle(candleOption.color.downLine);\n          context.setFillStyle(candleOption.color.downFill);\n          context.setLineWidth(1 * opts.pixelRatio);\n          context.moveTo(item[3].x, item[3].y); //顶点\n          context.lineTo(item[0].x, item[0].y); //开盘中间点\n          context.lineTo(item[0].x - eachSpacing / 4, item[0].y); //开盘左侧点\n          context.lineTo(item[1].x - eachSpacing / 4, item[1].y); //收盘左侧点\n          context.lineTo(item[1].x, item[1].y); //收盘中间点\n          context.lineTo(item[2].x, item[2].y); //底点\n          context.lineTo(item[1].x, item[1].y); //收盘中间点\n          context.lineTo(item[1].x + eachSpacing / 4, item[1].y); //收盘右侧点\n          context.lineTo(item[0].x + eachSpacing / 4, item[0].y); //开盘右侧点\n          context.lineTo(item[0].x, item[0].y); //开盘中间点\n          context.moveTo(item[3].x, item[3].y); //顶点\n        }\n        context.closePath();\n        context.fill();\n        context.stroke();\n      }\n    }\n  });\n\n  context.restore();\n\n  return {\n    xAxisPoints: xAxisPoints,\n    calPoints: calPoints,\n    eachSpacing: eachSpacing };\n\n}\n\nfunction drawAreaDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var areaOption = assign({}, {\n    type: 'straight',\n    opacity: 0.2,\n    addLine: false,\n    width: 2,\n    gradient: false },\n  opts.extra.area);\n\n  var xAxisData = opts.chartData.xAxisData,\n  xAxisPoints = xAxisData.xAxisPoints,\n  eachSpacing = xAxisData.eachSpacing;\n\n  var endY = opts.height - opts.area[2];\n  var calPoints = [];\n\n  context.save();\n  var leftSpace = 0;\n  var rightSpace = opts.width + eachSpacing;\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n    leftSpace = -opts._scrollDistance_ - eachSpacing + opts.area[3];\n    rightSpace = leftSpace + (opts.xAxis.itemCount + 4) * eachSpacing;\n  }\n\n  series.forEach(function (eachSeries, seriesIndex) {\n    var ranges, minRange, maxRange;\n    ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\n    minRange = ranges.pop();\n    maxRange = ranges.shift();\n    var data = eachSeries.data;\n    var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n    calPoints.push(points);\n\n    var splitPointList = splitPoints(points);\n    for (var i = 0; i < splitPointList.length; i++) {\n      var _points2 = splitPointList[i];\n      // 绘制区域数\n      context.beginPath();\n      context.setStrokeStyle(hexToRgb(eachSeries.color, areaOption.opacity));\n      if (areaOption.gradient) {\n        var gradient = context.createLinearGradient(0, opts.area[0], 0, opts.height - opts.area[2]);\n        gradient.addColorStop('0', hexToRgb(eachSeries.color, areaOption.opacity));\n        gradient.addColorStop('1.0', hexToRgb(\"#FFFFFF\", 0.1));\n        context.setFillStyle(gradient);\n      } else {\n        context.setFillStyle(hexToRgb(eachSeries.color, areaOption.opacity));\n      }\n      context.setLineWidth(areaOption.width * opts.pixelRatio);\n      if (_points2.length > 1) {\n        var firstPoint = _points2[0];\n        var lastPoint = _points2[_points2.length - 1];\n        context.moveTo(firstPoint.x, firstPoint.y);\n        var startPoint = 0;\n        if (areaOption.type === 'curve') {\n          for (var j = 0; j < _points2.length; j++) {\n            var item = _points2[j];\n            if (startPoint == 0 && item.x > leftSpace) {\n              context.moveTo(item.x, item.y);\n              startPoint = 1;\n            }\n            if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\n              var ctrlPoint = createCurveControlPoints(_points2, j - 1);\n              context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, item.x, item.y);\n            }\n          };\n        } else {\n          for (var _j = 0; _j < _points2.length; _j++) {\n            var _item10 = _points2[_j];\n            if (startPoint == 0 && _item10.x > leftSpace) {\n              context.moveTo(_item10.x, _item10.y);\n              startPoint = 1;\n            }\n            if (_j > 0 && _item10.x > leftSpace && _item10.x < rightSpace) {\n              context.lineTo(_item10.x, _item10.y);\n            }\n          };\n        }\n\n        context.lineTo(lastPoint.x, endY);\n        context.lineTo(firstPoint.x, endY);\n        context.lineTo(firstPoint.x, firstPoint.y);\n      } else {\n        var _item11 = _points2[0];\n        context.moveTo(_item11.x - eachSpacing / 2, _item11.y);\n        context.lineTo(_item11.x + eachSpacing / 2, _item11.y);\n        context.lineTo(_item11.x + eachSpacing / 2, endY);\n        context.lineTo(_item11.x - eachSpacing / 2, endY);\n        context.moveTo(_item11.x - eachSpacing / 2, _item11.y);\n      }\n      context.closePath();\n      context.fill();\n\n      //画连线\n      if (areaOption.addLine) {\n        if (eachSeries.lineType == 'dash') {\n          var dashLength = eachSeries.dashLength ? eachSeries.dashLength : 8;\n          dashLength *= opts.pixelRatio;\n          context.setLineDash([dashLength, dashLength]);\n        }\n        context.beginPath();\n        context.setStrokeStyle(eachSeries.color);\n        context.setLineWidth(areaOption.width * opts.pixelRatio);\n        if (_points2.length === 1) {\n          context.moveTo(_points2[0].x, _points2[0].y);\n          context.arc(_points2[0].x, _points2[0].y, 1, 0, 2 * Math.PI);\n        } else {\n          context.moveTo(_points2[0].x, _points2[0].y);\n          var _startPoint = 0;\n          if (areaOption.type === 'curve') {\n            for (var _j2 = 0; _j2 < _points2.length; _j2++) {\n              var _item12 = _points2[_j2];\n              if (_startPoint == 0 && _item12.x > leftSpace) {\n                context.moveTo(_item12.x, _item12.y);\n                _startPoint = 1;\n              }\n              if (_j2 > 0 && _item12.x > leftSpace && _item12.x < rightSpace) {\n                var _ctrlPoint = createCurveControlPoints(_points2, _j2 - 1);\n                context.bezierCurveTo(_ctrlPoint.ctrA.x, _ctrlPoint.ctrA.y, _ctrlPoint.ctrB.x, _ctrlPoint.ctrB.y, _item12.x, _item12.y);\n              }\n            };\n          } else {\n            for (var _j3 = 0; _j3 < _points2.length; _j3++) {\n              var _item13 = _points2[_j3];\n              if (_startPoint == 0 && _item13.x > leftSpace) {\n                context.moveTo(_item13.x, _item13.y);\n                _startPoint = 1;\n              }\n              if (_j3 > 0 && _item13.x > leftSpace && _item13.x < rightSpace) {\n                context.lineTo(_item13.x, _item13.y);\n              }\n            };\n          }\n          context.moveTo(_points2[0].x, _points2[0].y);\n        }\n        context.stroke();\n        context.setLineDash([]);\n      }\n    }\n\n    //画点\n    if (opts.dataPointShape !== false) {\n      drawPointShape(points, eachSeries.color, eachSeries.pointShape, context, opts);\n    }\n\n  });\n\n  if (opts.dataLabel !== false && process === 1) {\n    series.forEach(function (eachSeries, seriesIndex) {\n      var ranges, minRange, maxRange;\n      ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\n      minRange = ranges.pop();\n      maxRange = ranges.shift();\n      var data = eachSeries.data;\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n      drawPointText(points, eachSeries, config, context);\n    });\n  }\n\n  context.restore();\n\n  return {\n    xAxisPoints: xAxisPoints,\n    calPoints: calPoints,\n    eachSpacing: eachSpacing };\n\n}\n\nfunction drawLineDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var lineOption = assign({}, {\n    type: 'straight',\n    width: 2 },\n  opts.extra.line);\n  lineOption.width *= opts.pixelRatio;\n\n  var xAxisData = opts.chartData.xAxisData,\n  xAxisPoints = xAxisData.xAxisPoints,\n  eachSpacing = xAxisData.eachSpacing;\n  var calPoints = [];\n\n  context.save();\n  var leftSpace = 0;\n  var rightSpace = opts.width + eachSpacing;\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n    leftSpace = -opts._scrollDistance_ - eachSpacing + opts.area[3];\n    rightSpace = leftSpace + (opts.xAxis.itemCount + 4) * eachSpacing;\n  }\n\n  series.forEach(function (eachSeries, seriesIndex) {\n    var ranges, minRange, maxRange;\n    ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\n    minRange = ranges.pop();\n    maxRange = ranges.shift();\n    var data = eachSeries.data;\n    var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n    calPoints.push(points);\n    var splitPointList = splitPoints(points);\n\n    if (eachSeries.lineType == 'dash') {\n      var dashLength = eachSeries.dashLength ? eachSeries.dashLength : 8;\n      dashLength *= opts.pixelRatio;\n      context.setLineDash([dashLength, dashLength]);\n    }\n    context.beginPath();\n    context.setStrokeStyle(eachSeries.color);\n    context.setLineWidth(lineOption.width);\n\n    splitPointList.forEach(function (points, index) {\n\n      if (points.length === 1) {\n        context.moveTo(points[0].x, points[0].y);\n        context.arc(points[0].x, points[0].y, 1, 0, 2 * Math.PI);\n      } else {\n        context.moveTo(points[0].x, points[0].y);\n        var startPoint = 0;\n        if (lineOption.type === 'curve') {\n          for (var j = 0; j < points.length; j++) {\n            var item = points[j];\n            if (startPoint == 0 && item.x > leftSpace) {\n              context.moveTo(item.x, item.y);\n              startPoint = 1;\n            }\n            if (j > 0 && item.x > leftSpace && item.x < rightSpace) {\n              var ctrlPoint = createCurveControlPoints(points, j - 1);\n              context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, item.x, item.y);\n            }\n          };\n        } else {\n          for (var _j4 = 0; _j4 < points.length; _j4++) {\n            var _item14 = points[_j4];\n            if (startPoint == 0 && _item14.x > leftSpace) {\n              context.moveTo(_item14.x, _item14.y);\n              startPoint = 1;\n            }\n            if (_j4 > 0 && _item14.x > leftSpace && _item14.x < rightSpace) {\n              context.lineTo(_item14.x, _item14.y);\n            }\n          };\n        }\n        context.moveTo(points[0].x, points[0].y);\n      }\n\n    });\n\n    context.stroke();\n    context.setLineDash([]);\n\n    if (opts.dataPointShape !== false) {\n      drawPointShape(points, eachSeries.color, eachSeries.pointShape, context, opts);\n    }\n  });\n\n  if (opts.dataLabel !== false && process === 1) {\n    series.forEach(function (eachSeries, seriesIndex) {\n      var ranges, minRange, maxRange;\n      ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\n      minRange = ranges.pop();\n      maxRange = ranges.shift();\n      var data = eachSeries.data;\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n      drawPointText(points, eachSeries, config, context);\n    });\n  }\n\n  context.restore();\n\n  return {\n    xAxisPoints: xAxisPoints,\n    calPoints: calPoints,\n    eachSpacing: eachSpacing };\n\n}\n\nfunction drawMixDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n\n  var xAxisData = opts.chartData.xAxisData,\n  xAxisPoints = xAxisData.xAxisPoints,\n  eachSpacing = xAxisData.eachSpacing;\n\n  var endY = opts.height - opts.area[2];\n  var calPoints = [];\n\n  var columnIndex = 0;\n  var columnLength = 0;\n  series.forEach(function (eachSeries, seriesIndex) {\n    if (eachSeries.type == 'column') {\n      columnLength += 1;\n    }\n  });\n  context.save();\n  var leftNum = -2;\n  var rightNum = xAxisPoints.length + 2;\n  var leftSpace = 0;\n  var rightSpace = opts.width + eachSpacing;\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n    leftNum = Math.floor(-opts._scrollDistance_ / eachSpacing) - 2;\n    rightNum = leftNum + opts.xAxis.itemCount + 4;\n    leftSpace = -opts._scrollDistance_ - eachSpacing + opts.area[3];\n    rightSpace = leftSpace + (opts.xAxis.itemCount + 4) * eachSpacing;\n  }\n\n  series.forEach(function (eachSeries, seriesIndex) {\n    var ranges, minRange, maxRange;\n\n    ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\n    minRange = ranges.pop();\n    maxRange = ranges.shift();\n\n    var data = eachSeries.data;\n    var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n    calPoints.push(points);\n\n    // 绘制柱状数据图\n    if (eachSeries.type == 'column') {\n      points = fixColumeData(points, eachSpacing, columnLength, columnIndex, config, opts);\n      for (var i = 0; i < points.length; i++) {\n        var item = points[i];\n        if (item !== null && i > leftNum && i < rightNum) {\n          context.beginPath();\n          context.setStrokeStyle(item.color || eachSeries.color);\n          context.setLineWidth(1);\n          context.setFillStyle(item.color || eachSeries.color);\n          var startX = item.x - item.width / 2;\n          var height = opts.height - item.y - opts.area[2];\n          context.moveTo(startX, item.y);\n          context.moveTo(startX - 1, item.y);\n          context.lineTo(startX + item.width - 2, item.y);\n          context.lineTo(startX + item.width - 2, opts.height - opts.area[2]);\n          context.lineTo(startX, opts.height - opts.area[2]);\n          context.lineTo(startX, item.y);\n          context.closePath();\n          context.stroke();\n          context.fill();\n          context.closePath();\n          context.fill();\n        }\n      }\n      columnIndex += 1;\n    }\n\n    //绘制区域图数据\n\n    if (eachSeries.type == 'area') {\n      var _splitPointList = splitPoints(points);\n      for (var _i16 = 0; _i16 < _splitPointList.length; _i16++) {\n        var _points3 = _splitPointList[_i16];\n        // 绘制区域数据\n        context.beginPath();\n        context.setStrokeStyle(eachSeries.color);\n        context.setFillStyle(hexToRgb(eachSeries.color, 0.2));\n        context.setLineWidth(2 * opts.pixelRatio);\n        if (_points3.length > 1) {\n          var firstPoint = _points3[0];\n          var lastPoint = _points3[_points3.length - 1];\n          context.moveTo(firstPoint.x, firstPoint.y);\n          var startPoint = 0;\n          if (eachSeries.style === 'curve') {\n            for (var j = 0; j < _points3.length; j++) {\n              var _item15 = _points3[j];\n              if (startPoint == 0 && _item15.x > leftSpace) {\n                context.moveTo(_item15.x, _item15.y);\n                startPoint = 1;\n              }\n              if (j > 0 && _item15.x > leftSpace && _item15.x < rightSpace) {\n                var ctrlPoint = createCurveControlPoints(_points3, j - 1);\n                context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, _item15.x, _item15.y);\n              }\n            };\n          } else {\n            for (var _j5 = 0; _j5 < _points3.length; _j5++) {\n              var _item16 = _points3[_j5];\n              if (startPoint == 0 && _item16.x > leftSpace) {\n                context.moveTo(_item16.x, _item16.y);\n                startPoint = 1;\n              }\n              if (_j5 > 0 && _item16.x > leftSpace && _item16.x < rightSpace) {\n                context.lineTo(_item16.x, _item16.y);\n              }\n            };\n          }\n          context.lineTo(lastPoint.x, endY);\n          context.lineTo(firstPoint.x, endY);\n          context.lineTo(firstPoint.x, firstPoint.y);\n        } else {\n          var _item17 = _points3[0];\n          context.moveTo(_item17.x - eachSpacing / 2, _item17.y);\n          context.lineTo(_item17.x + eachSpacing / 2, _item17.y);\n          context.lineTo(_item17.x + eachSpacing / 2, endY);\n          context.lineTo(_item17.x - eachSpacing / 2, endY);\n          context.moveTo(_item17.x - eachSpacing / 2, _item17.y);\n        }\n        context.closePath();\n        context.fill();\n      }\n    }\n\n    // 绘制折线数据图\n    if (eachSeries.type == 'line') {\n      var splitPointList = splitPoints(points);\n      splitPointList.forEach(function (points, index) {\n        if (eachSeries.lineType == 'dash') {\n          var dashLength = eachSeries.dashLength ? eachSeries.dashLength : 8;\n          dashLength *= opts.pixelRatio;\n          context.setLineDash([dashLength, dashLength]);\n        }\n        context.beginPath();\n        context.setStrokeStyle(eachSeries.color);\n        context.setLineWidth(2 * opts.pixelRatio);\n        if (points.length === 1) {\n          context.moveTo(points[0].x, points[0].y);\n          context.arc(points[0].x, points[0].y, 1, 0, 2 * Math.PI);\n        } else {\n          context.moveTo(points[0].x, points[0].y);\n          var _startPoint2 = 0;\n          if (eachSeries.style == 'curve') {\n            for (var _j6 = 0; _j6 < points.length; _j6++) {\n              var _item18 = points[_j6];\n              if (_startPoint2 == 0 && _item18.x > leftSpace) {\n                context.moveTo(_item18.x, _item18.y);\n                _startPoint2 = 1;\n              }\n              if (_j6 > 0 && _item18.x > leftSpace && _item18.x < rightSpace) {\n                var ctrlPoint = createCurveControlPoints(points, _j6 - 1);\n                context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, _item18.x, _item18.y);\n              }\n            }\n          } else {\n            for (var _j7 = 0; _j7 < points.length; _j7++) {\n              var _item19 = points[_j7];\n              if (_startPoint2 == 0 && _item19.x > leftSpace) {\n                context.moveTo(_item19.x, _item19.y);\n                _startPoint2 = 1;\n              }\n              if (_j7 > 0 && _item19.x > leftSpace && _item19.x < rightSpace) {\n                context.lineTo(_item19.x, _item19.y);\n              }\n            }\n          }\n          context.moveTo(points[0].x, points[0].y);\n        }\n        context.stroke();\n        context.setLineDash([]);\n      });\n    }\n\n    // 绘制点数据图\n    if (eachSeries.type == 'point') {\n      eachSeries.addPoint = true;\n    }\n\n    if (eachSeries.addPoint == true && eachSeries.type !== 'column') {\n      drawPointShape(points, eachSeries.color, eachSeries.pointShape, context, opts);\n    }\n  });\n  if (opts.dataLabel !== false && process === 1) {\n    var columnIndex = 0;\n    series.forEach(function (eachSeries, seriesIndex) {\n      var ranges, minRange, maxRange;\n\n      ranges = [].concat(opts.chartData.yAxisData.ranges[eachSeries.index]);\n      minRange = ranges.pop();\n      maxRange = ranges.shift();\n\n      var data = eachSeries.data;\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n      if (eachSeries.type !== 'column') {\n        drawPointText(points, eachSeries, config, context);\n      } else {\n        points = fixColumeData(points, eachSpacing, columnLength, columnIndex, config, opts);\n        drawPointText(points, eachSeries, config, context);\n        columnIndex += 1;\n      }\n\n    });\n  }\n\n  context.restore();\n\n  return {\n    xAxisPoints: xAxisPoints,\n    calPoints: calPoints,\n    eachSpacing: eachSpacing };\n\n}\n\nfunction drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints) {\n  var toolTipOption = opts.extra.tooltip || {};\n  if (toolTipOption.horizentalLine && opts.tooltip && process === 1 && (opts.type == 'line' || opts.type == 'area' || opts.type == 'column' || opts.type == 'candle' || opts.type == 'mix')) {\n    drawToolTipHorizentalLine(opts, config, context, eachSpacing, xAxisPoints);\n  }\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n  if (opts.tooltip && opts.tooltip.textList && opts.tooltip.textList.length && process === 1) {\n    drawToolTip(opts.tooltip.textList, opts.tooltip.offset, opts, config, context, eachSpacing, xAxisPoints);\n  }\n  context.restore();\n\n}\n\nfunction drawXAxis(categories, opts, config, context) {\n\n  var xAxisData = opts.chartData.xAxisData,\n  xAxisPoints = xAxisData.xAxisPoints,\n  startX = xAxisData.startX,\n  endX = xAxisData.endX,\n  eachSpacing = xAxisData.eachSpacing;\n  var boundaryGap = 'center';\n  if (opts.type == 'line' || opts.type == 'area') {\n    boundaryGap = opts.xAxis.boundaryGap;\n  }\n  var startY = opts.height - opts.area[2];\n  var endY = opts.area[0];\n\n  //绘制滚动条\n  if (opts.enableScroll && opts.xAxis.scrollShow) {\n    var scrollY = opts.height - opts.area[2] + config.xAxisHeight;\n    var scrollScreenWidth = endX - startX;\n    var scrollTotalWidth = eachSpacing * (xAxisPoints.length - 1);\n    var scrollWidth = scrollScreenWidth * scrollScreenWidth / scrollTotalWidth;\n    var scrollLeft = 0;\n    if (opts._scrollDistance_) {\n      scrollLeft = -opts._scrollDistance_ * scrollScreenWidth / scrollTotalWidth;\n    }\n    context.beginPath();\n    context.setLineCap('round');\n    context.setLineWidth(6 * opts.pixelRatio);\n    context.setStrokeStyle(opts.xAxis.scrollBackgroundColor || \"#EFEBEF\");\n    context.moveTo(startX, scrollY);\n    context.lineTo(endX, scrollY);\n    context.stroke();\n    context.closePath();\n    context.beginPath();\n    context.setLineCap('round');\n    context.setLineWidth(6 * opts.pixelRatio);\n    context.setStrokeStyle(opts.xAxis.scrollColor || \"#A6A6A6\");\n    context.moveTo(startX + scrollLeft, scrollY);\n    context.lineTo(startX + scrollLeft + scrollWidth, scrollY);\n    context.stroke();\n    context.closePath();\n    context.setLineCap('butt');\n  }\n\n  context.save();\n\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n\n  //绘制X轴刻度线\n  if (opts.xAxis.calibration === true) {\n    context.setStrokeStyle(opts.xAxis.gridColor || \"#cccccc\");\n    context.setLineCap('butt');\n    context.setLineWidth(1 * opts.pixelRatio);\n    xAxisPoints.forEach(function (item, index) {\n      if (index > 0) {\n        context.beginPath();\n        context.moveTo(item - eachSpacing / 2, startY);\n        context.lineTo(item - eachSpacing / 2, startY + 3 * opts.pixelRatio);\n        context.closePath();\n        context.stroke();\n      }\n    });\n  }\n  //绘制X轴网格\n  if (opts.xAxis.disableGrid !== true) {\n    context.setStrokeStyle(opts.xAxis.gridColor || \"#cccccc\");\n    context.setLineCap('butt');\n    context.setLineWidth(1 * opts.pixelRatio);\n    if (opts.xAxis.gridType == 'dash') {\n      context.setLineDash([opts.xAxis.dashLength, opts.xAxis.dashLength]);\n    }\n    opts.xAxis.gridEval = opts.xAxis.gridEval || 1;\n    xAxisPoints.forEach(function (item, index) {\n      if (index % opts.xAxis.gridEval == 0) {\n        context.beginPath();\n        context.moveTo(item, startY);\n        context.lineTo(item, endY);\n        context.stroke();\n      }\n    });\n    context.setLineDash([]);\n  }\n\n\n  //绘制X轴文案\n  if (opts.xAxis.disabled !== true) {\n    // 对X轴列表做抽稀处理\n    //默认全部显示X轴标签\n    var maxXAxisListLength = categories.length;\n    //如果设置了X轴单屏数量\n    if (opts.xAxis.labelCount) {\n      //如果设置X轴密度\n      if (opts.xAxis.itemCount) {\n        maxXAxisListLength = Math.ceil(categories.length / opts.xAxis.itemCount * opts.xAxis.labelCount);\n      } else {\n        maxXAxisListLength = opts.xAxis.labelCount;\n      }\n      maxXAxisListLength -= 1;\n    }\n\n    var ratio = Math.ceil(categories.length / maxXAxisListLength);\n\n    var newCategories = [];\n    var cgLength = categories.length;\n    for (var i = 0; i < cgLength; i++) {\n      if (i % ratio !== 0) {\n        newCategories.push(\"\");\n      } else {\n        newCategories.push(categories[i]);\n      }\n    }\n    newCategories[cgLength - 1] = categories[cgLength - 1];\n\n    var xAxisFontSize = opts.xAxis.fontSize || config.fontSize;\n    if (config._xAxisTextAngle_ === 0) {\n      newCategories.forEach(function (item, index) {\n        var offset = -measureText(String(item), xAxisFontSize) / 2;\n        if (boundaryGap == 'center') {\n          offset += eachSpacing / 2;\n        }\n        var scrollHeight = 0;\n        if (opts.xAxis.scrollShow) {\n          scrollHeight = 6 * opts.pixelRatio;\n        }\n        context.beginPath();\n        context.setFontSize(xAxisFontSize);\n        context.setFillStyle(opts.xAxis.fontColor || '#666666');\n        context.fillText(String(item), xAxisPoints[index] + offset, startY + xAxisFontSize + (config.xAxisHeight - scrollHeight - xAxisFontSize) / 2);\n        context.closePath();\n        context.stroke();\n      });\n\n    } else {\n      newCategories.forEach(function (item, index) {\n        context.save();\n        context.beginPath();\n        context.setFontSize(xAxisFontSize);\n        context.setFillStyle(opts.xAxis.fontColor || '#666666');\n        var textWidth = measureText(String(item), xAxisFontSize);\n        var offset = -textWidth;\n        if (boundaryGap == 'center') {\n          offset += eachSpacing / 2;\n        }\n        var _calRotateTranslate = calRotateTranslate(xAxisPoints[index] + eachSpacing / 2, startY + xAxisFontSize / 2 + 5, opts.height),\n        transX = _calRotateTranslate.transX,\n        transY = _calRotateTranslate.transY;\n\n        context.rotate(-1 * config._xAxisTextAngle_);\n        context.translate(transX, transY);\n        context.fillText(String(item), xAxisPoints[index] + offset, startY + xAxisFontSize + 5);\n        context.closePath();\n        context.stroke();\n        context.restore();\n      });\n    }\n  }\n  context.restore();\n\n  //绘制X轴轴线\n  if (opts.xAxis.axisLine) {\n    context.beginPath();\n    context.setStrokeStyle(opts.xAxis.axisLineColor);\n    context.setLineWidth(1 * opts.pixelRatio);\n    context.moveTo(startX, opts.height - opts.area[2]);\n    context.lineTo(endX, opts.height - opts.area[2]);\n    context.stroke();\n  }\n}\n\nfunction drawYAxisGrid(categories, opts, config, context) {\n  if (opts.yAxis.disableGrid === true) {\n    return;\n  }\n  var spacingValid = opts.height - opts.area[0] - opts.area[2];\n  var eachSpacing = spacingValid / opts.yAxis.splitNumber;\n  var startX = opts.area[3];\n  var xAxisPoints = opts.chartData.xAxisData.xAxisPoints,\n  xAxiseachSpacing = opts.chartData.xAxisData.eachSpacing;\n  var TotalWidth = xAxiseachSpacing * (xAxisPoints.length - 1);\n  var endX = startX + TotalWidth;\n\n  var points = [];\n  for (var i = 0; i < opts.yAxis.splitNumber + 1; i++) {\n    points.push(opts.height - opts.area[2] - eachSpacing * i);\n  }\n\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n\n  if (opts.yAxis.gridType == 'dash') {\n    context.setLineDash([opts.yAxis.dashLength, opts.yAxis.dashLength]);\n  }\n  context.setStrokeStyle(opts.yAxis.gridColor);\n  context.setLineWidth(1 * opts.pixelRatio);\n  points.forEach(function (item, index) {\n    context.beginPath();\n    context.moveTo(startX, item);\n    context.lineTo(endX, item);\n    context.stroke();\n  });\n  context.setLineDash([]);\n\n  context.restore();\n}\n\nfunction drawYAxis(series, opts, config, context) {\n  if (opts.yAxis.disabled === true) {\n    return;\n  }\n  var spacingValid = opts.height - opts.area[0] - opts.area[2];\n  var eachSpacing = spacingValid / opts.yAxis.splitNumber;\n  var startX = opts.area[3];\n  var endX = opts.width - opts.area[1];\n  var endY = opts.height - opts.area[2];\n  var fillEndY = endY + config.xAxisHeight;\n  if (opts.xAxis.scrollShow) {\n    fillEndY -= 3 * opts.pixelRatio;\n  }\n  if (opts.xAxis.rotateLabel) {\n    fillEndY = opts.height - opts.area[2] + 3;\n  }\n  // set YAxis background\n  context.beginPath();\n  context.setFillStyle(opts.background || '#ffffff');\n  if (opts._scrollDistance_ < 0) {\n    context.fillRect(0, 0, startX, fillEndY);\n  }\n  if (opts.enableScroll == true) {\n    context.fillRect(endX, 0, opts.width, fillEndY);\n  }\n  context.closePath();\n  context.stroke();\n\n  var points = [];\n  for (var i = 0; i <= opts.yAxis.splitNumber; i++) {\n    points.push(opts.area[0] + eachSpacing * i);\n  }\n\n  var tStartLeft = opts.area[3];\n  var tStartRight = opts.width - opts.area[1];var _loop4 = function _loop4(\n\n  _i17) {\n    var yData = opts.yAxis.data[_i17];\n    if (yData.disabled !== true) {\n      var rangesFormat = opts.chartData.yAxisData.rangesFormat[_i17];\n      var yAxisFontSize = yData.fontSize || config.fontSize;\n      var yAxisWidth = opts.chartData.yAxisData.yAxisWidth[_i17];\n      //画Y轴刻度及文案\n      rangesFormat.forEach(function (item, index) {\n        var pos = points[index] ? points[index] : endY;\n        context.beginPath();\n        context.setFontSize(yAxisFontSize);\n        context.setLineWidth(1 * opts.pixelRatio);\n        context.setStrokeStyle(yData.axisLineColor || '#cccccc');\n        context.setFillStyle(yData.fontColor || '#666666');\n        if (yAxisWidth.position == 'left') {\n          context.fillText(String(item), tStartLeft - yAxisWidth.width, pos + yAxisFontSize / 2);\n          //画刻度线\n          if (yData.calibration == true) {\n            context.moveTo(tStartLeft, pos);\n            context.lineTo(tStartLeft - 3 * opts.pixelRatio, pos);\n          }\n        } else {\n          context.fillText(String(item), tStartRight + 4 * opts.pixelRatio, pos + yAxisFontSize / 2);\n          //画刻度线\n          if (yData.calibration == true) {\n            context.moveTo(tStartRight, pos);\n            context.lineTo(tStartRight + 3 * opts.pixelRatio, pos);\n          }\n        }\n        context.closePath();\n        context.stroke();\n      });\n      //画Y轴轴线\n      if (yData.axisLine !== false) {\n        context.beginPath();\n        context.setStrokeStyle(yData.axisLineColor || '#cccccc');\n        context.setLineWidth(1 * opts.pixelRatio);\n        if (yAxisWidth.position == 'left') {\n          context.moveTo(tStartLeft, opts.height - opts.area[2]);\n          context.lineTo(tStartLeft, opts.area[0]);\n        } else {\n          context.moveTo(tStartRight, opts.height - opts.area[2]);\n          context.lineTo(tStartRight, opts.area[0]);\n        }\n        context.stroke();\n      }\n\n      //画Y轴标题\n      if (opts.yAxis.showTitle) {\n\n        var titleFontSize = yData.titleFontSize || config.fontSize;\n        var title = yData.title;\n        context.beginPath();\n        context.setFontSize(titleFontSize);\n        context.setFillStyle(yData.titleFontColor || '#666666');\n        if (yAxisWidth.position == 'left') {\n          context.fillText(title, tStartLeft - measureText(title, titleFontSize) / 2, opts.area[0] - 10 * opts.pixelRatio);\n        } else {\n          context.fillText(title, tStartRight - measureText(title, titleFontSize) / 2, opts.area[0] - 10 * opts.pixelRatio);\n        }\n        context.closePath();\n        context.stroke();\n      }\n      if (yAxisWidth.position == 'left') {\n        tStartLeft -= yAxisWidth.width + opts.yAxis.padding;\n      } else {\n        tStartRight += yAxisWidth.width + opts.yAxis.padding;\n      }\n    }};for (var _i17 = 0; _i17 < opts.yAxis.data.length; _i17++) {_loop4(_i17);\n  }\n}\n\nfunction drawLegend(series, opts, config, context, chartData) {\n  if (opts.legend.show === false) {\n    return;\n  }\n  var legendData = chartData.legendData;\n  var legendList = legendData.points;\n  var legendArea = legendData.area;\n  var padding = opts.legend.padding;\n  var fontSize = opts.legend.fontSize;\n  var shapeWidth = 15 * opts.pixelRatio;\n  var shapeRight = 5 * opts.pixelRatio;\n  var itemGap = opts.legend.itemGap;\n  var lineHeight = Math.max(opts.legend.lineHeight * opts.pixelRatio, fontSize);\n\n  //画背景及边框\n  context.beginPath();\n  context.setLineWidth(opts.legend.borderWidth);\n  context.setStrokeStyle(opts.legend.borderColor);\n  context.setFillStyle(opts.legend.backgroundColor);\n  context.moveTo(legendArea.start.x, legendArea.start.y);\n  context.rect(legendArea.start.x, legendArea.start.y, legendArea.width, legendArea.height);\n  context.closePath();\n  context.fill();\n  context.stroke();\n\n  legendList.forEach(function (itemList, listIndex) {\n    var width = 0;\n    var height = 0;\n    width = legendData.widthArr[listIndex];\n    height = legendData.heightArr[listIndex];\n    var startX = 0;\n    var startY = 0;\n    if (opts.legend.position == 'top' || opts.legend.position == 'bottom') {\n      startX = legendArea.start.x + (legendArea.width - width) / 2;\n      startY = legendArea.start.y + padding + listIndex * lineHeight;\n    } else {\n      if (listIndex == 0) {\n        width = 0;\n      } else {\n        width = legendData.widthArr[listIndex - 1];\n      }\n      startX = legendArea.start.x + padding + width;\n      startY = legendArea.start.y + padding + (legendArea.height - height) / 2;\n    }\n\n    context.setFontSize(config.fontSize);\n    for (var i = 0; i < itemList.length; i++) {\n      var item = itemList[i];\n      item.area = [0, 0, 0, 0];\n      item.area[0] = startX;\n      item.area[1] = startY;\n      item.area[3] = startY + lineHeight;\n      context.beginPath();\n      context.setLineWidth(1 * opts.pixelRatio);\n      context.setStrokeStyle(item.show ? item.color : opts.legend.hiddenColor);\n      context.setFillStyle(item.show ? item.color : opts.legend.hiddenColor);\n      switch (item.legendShape) {\n        case 'line':\n          context.moveTo(startX, startY + 0.5 * lineHeight - 2 * opts.pixelRatio);\n          context.fillRect(startX, startY + 0.5 * lineHeight - 2 * opts.pixelRatio, 15 * opts.pixelRatio, 4 * opts.pixelRatio);\n          break;\n        case 'triangle':\n          context.moveTo(startX + 7.5 * opts.pixelRatio, startY + 0.5 * lineHeight - 5 * opts.pixelRatio);\n          context.lineTo(startX + 2.5 * opts.pixelRatio, startY + 0.5 * lineHeight + 5 * opts.pixelRatio);\n          context.lineTo(startX + 12.5 * opts.pixelRatio, startY + 0.5 * lineHeight + 5 * opts.pixelRatio);\n          context.lineTo(startX + 7.5 * opts.pixelRatio, startY + 0.5 * lineHeight - 5 * opts.pixelRatio);\n          break;\n        case 'diamond':\n          context.moveTo(startX + 7.5 * opts.pixelRatio, startY + 0.5 * lineHeight - 5 * opts.pixelRatio);\n          context.lineTo(startX + 2.5 * opts.pixelRatio, startY + 0.5 * lineHeight);\n          context.lineTo(startX + 7.5 * opts.pixelRatio, startY + 0.5 * lineHeight + 5 * opts.pixelRatio);\n          context.lineTo(startX + 12.5 * opts.pixelRatio, startY + 0.5 * lineHeight);\n          context.lineTo(startX + 7.5 * opts.pixelRatio, startY + 0.5 * lineHeight - 5 * opts.pixelRatio);\n          break;\n        case 'circle':\n          context.moveTo(startX + 7.5 * opts.pixelRatio, startY + 0.5 * lineHeight);\n          context.arc(startX + 7.5 * opts.pixelRatio, startY + 0.5 * lineHeight, 5 * opts.pixelRatio, 0, 2 * Math.PI);\n          break;\n        case 'rect':\n          context.moveTo(startX, startY + 0.5 * lineHeight - 5 * opts.pixelRatio);\n          context.fillRect(startX, startY + 0.5 * lineHeight - 5 * opts.pixelRatio, 15 * opts.pixelRatio, 10 * opts.pixelRatio);\n          break;\n        default:\n          context.moveTo(startX, startY + 0.5 * lineHeight - 5 * opts.pixelRatio);\n          context.fillRect(startX, startY + 0.5 * lineHeight - 5 * opts.pixelRatio, 15 * opts.pixelRatio, 10 * opts.pixelRatio);}\n\n      context.closePath();\n      context.fill();\n      context.stroke();\n\n      startX += shapeWidth + shapeRight;\n      var fontTrans = 0.5 * lineHeight + 0.5 * fontSize - 2;\n      context.beginPath();\n      context.setFontSize(fontSize);\n      context.setFillStyle(item.show ? opts.legend.fontColor : opts.legend.hiddenColor);\n      context.fillText(item.name, startX, startY + fontTrans);\n      context.closePath();\n      context.stroke();\n      if (opts.legend.position == 'top' || opts.legend.position == 'bottom') {\n        startX += measureText(item.name, fontSize) + itemGap;\n        item.area[2] = startX;\n      } else {\n        item.area[2] = startX + measureText(item.name, fontSize) + itemGap;;\n        startX -= shapeWidth + shapeRight;\n        startY += lineHeight;\n      }\n    }\n  });\n}\n\nfunction drawPieDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var pieOption = assign({}, {\n    activeOpacity: 0.5,\n    activeRadius: 10 * opts.pixelRatio,\n    offsetAngle: 0,\n    labelWidth: 15 * opts.pixelRatio,\n    ringWidth: 0,\n    border: false,\n    borderWidth: 2,\n    borderColor: '#FFFFFF' },\n  opts.extra.pie);\n  var centerPosition = {\n    x: opts.area[3] + (opts.width - opts.area[1] - opts.area[3]) / 2,\n    y: opts.area[0] + (opts.height - opts.area[0] - opts.area[2]) / 2 };\n\n  if (config.pieChartLinePadding == 0) {\n    config.pieChartLinePadding = pieOption.activeRadius;\n  }\n\n  var radius = Math.min((opts.width - opts.area[1] - opts.area[3]) / 2 - config.pieChartLinePadding - config.pieChartTextPadding - config._pieTextMaxLength_, (opts.height - opts.area[0] - opts.area[2]) / 2 - config.pieChartLinePadding - config.pieChartTextPadding);\n\n  series = getPieDataPoints(series, radius, process);\n\n  var activeRadius = pieOption.activeRadius;\n\n  series = series.map(function (eachSeries) {\n    eachSeries._start_ += pieOption.offsetAngle * Math.PI / 180;\n    return eachSeries;\n  });\n  series.forEach(function (eachSeries, seriesIndex) {\n    if (opts.tooltip) {\n      if (opts.tooltip.index == seriesIndex) {\n        context.beginPath();\n        context.setFillStyle(hexToRgb(eachSeries.color, opts.extra.pie.activeOpacity || 0.5));\n        context.moveTo(centerPosition.x, centerPosition.y);\n        context.arc(centerPosition.x, centerPosition.y, eachSeries._radius_ + activeRadius, eachSeries._start_,\n        eachSeries._start_ + 2 *\n        eachSeries._proportion_ * Math.PI);\n        context.closePath();\n        context.fill();\n      }\n    }\n    context.beginPath();\n    context.setLineWidth(pieOption.borderWidth * opts.pixelRatio);\n    context.lineJoin = \"round\";\n    context.setStrokeStyle(pieOption.borderColor);\n    context.setFillStyle(eachSeries.color);\n    context.moveTo(centerPosition.x, centerPosition.y);\n    context.arc(centerPosition.x, centerPosition.y, eachSeries._radius_, eachSeries._start_, eachSeries._start_ + 2 * eachSeries._proportion_ * Math.PI);\n    context.closePath();\n    context.fill();\n    if (pieOption.border == true) {\n      context.stroke();\n    }\n  });\n\n  if (opts.type === 'ring') {\n    var innerPieWidth = radius * 0.6;\n    if (typeof opts.extra.pie.ringWidth === 'number' && opts.extra.pie.ringWidth > 0) {\n      innerPieWidth = Math.max(0, radius - opts.extra.pie.ringWidth);\n    }\n    context.beginPath();\n    context.setFillStyle(opts.background || '#ffffff');\n    context.moveTo(centerPosition.x, centerPosition.y);\n    context.arc(centerPosition.x, centerPosition.y, innerPieWidth, 0, 2 * Math.PI);\n    context.closePath();\n    context.fill();\n  }\n\n  if (opts.dataLabel !== false && process === 1) {\n    var valid = false;\n    for (var i = 0, len = series.length; i < len; i++) {\n      if (series[i].data > 0) {\n        valid = true;\n        break;\n      }\n    }\n\n    if (valid) {\n      drawPieText(series, opts, config, context, radius, centerPosition);\n    }\n  }\n\n  if (process === 1 && opts.type === 'ring') {\n    drawRingTitle(opts, config, context, centerPosition);\n  }\n\n  return {\n    center: centerPosition,\n    radius: radius,\n    series: series };\n\n}\n\nfunction drawRoseDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var roseOption = assign({}, {\n    type: 'area',\n    activeOpacity: 0.5,\n    activeRadius: 10 * opts.pixelRatio,\n    offsetAngle: 0,\n    labelWidth: 15 * opts.pixelRatio,\n    border: false,\n    borderWidth: 2,\n    borderColor: '#FFFFFF' },\n  opts.extra.rose);\n  if (config.pieChartLinePadding == 0) {\n    config.pieChartLinePadding = roseOption.activeRadius;\n  }\n  var centerPosition = {\n    x: opts.area[3] + (opts.width - opts.area[1] - opts.area[3]) / 2,\n    y: opts.area[0] + (opts.height - opts.area[0] - opts.area[2]) / 2 };\n\n  var radius = Math.min((opts.width - opts.area[1] - opts.area[3]) / 2 - config.pieChartLinePadding - config.pieChartTextPadding - config._pieTextMaxLength_, (opts.height - opts.area[0] - opts.area[2]) / 2 - config.pieChartLinePadding - config.pieChartTextPadding);\n  var minRadius = roseOption.minRadius || radius * 0.5;\n\n  series = getRoseDataPoints(series, roseOption.type, minRadius, radius, process);\n\n  var activeRadius = roseOption.activeRadius;\n\n  series = series.map(function (eachSeries) {\n    eachSeries._start_ += (roseOption.offsetAngle || 0) * Math.PI / 180;\n    return eachSeries;\n  });\n\n  series.forEach(function (eachSeries, seriesIndex) {\n    if (opts.tooltip) {\n      if (opts.tooltip.index == seriesIndex) {\n        context.beginPath();\n        context.setFillStyle(hexToRgb(eachSeries.color, roseOption.activeOpacity || 0.5));\n        context.moveTo(centerPosition.x, centerPosition.y);\n        context.arc(centerPosition.x, centerPosition.y, activeRadius + eachSeries._radius_, eachSeries._start_,\n        eachSeries._start_ + 2 * eachSeries._rose_proportion_ * Math.PI);\n        context.closePath();\n        context.fill();\n      }\n    }\n    context.beginPath();\n    context.setLineWidth(roseOption.borderWidth * opts.pixelRatio);\n    context.lineJoin = \"round\";\n    context.setStrokeStyle(roseOption.borderColor);\n    context.setFillStyle(eachSeries.color);\n    context.moveTo(centerPosition.x, centerPosition.y);\n    context.arc(centerPosition.x, centerPosition.y, eachSeries._radius_, eachSeries._start_, eachSeries._start_ + 2 *\n    eachSeries._rose_proportion_ * Math.PI);\n    context.closePath();\n    context.fill();\n    if (roseOption.border == true) {\n      context.stroke();\n    }\n  });\n\n  if (opts.dataLabel !== false && process === 1) {\n    var valid = false;\n    for (var i = 0, len = series.length; i < len; i++) {\n      if (series[i].data > 0) {\n        valid = true;\n        break;\n      }\n    }\n\n    if (valid) {\n      drawPieText(series, opts, config, context, radius, centerPosition);\n    }\n  }\n\n  return {\n    center: centerPosition,\n    radius: radius,\n    series: series };\n\n}\n\nfunction drawArcbarDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var arcbarOption = assign({}, {\n    startAngle: 0.75,\n    endAngle: 0.25,\n    type: 'default',\n    width: 12 * opts.pixelRatio,\n    gap: 2 * opts.pixelRatio },\n  opts.extra.arcbar);\n\n  series = getArcbarDataPoints(series, arcbarOption, process);\n\n  var centerPosition;\n  if (arcbarOption.center) {\n    centerPosition = arcbarOption.center;\n  } else {\n    centerPosition = {\n      x: opts.width / 2,\n      y: opts.height / 2 };\n\n  }\n\n  var radius;\n  if (arcbarOption.radius) {\n    radius = arcbarOption.radius;\n  } else {\n    radius = Math.min(centerPosition.x, centerPosition.y);\n    radius -= 5 * opts.pixelRatio;\n    radius -= arcbarOption.width / 2;\n  }\n\n  for (var i = 0; i < series.length; i++) {\n    var eachSeries = series[i];\n    //背景颜色\n    context.setLineWidth(arcbarOption.width);\n    context.setStrokeStyle(arcbarOption.backgroundColor || '#E9E9E9');\n    context.setLineCap('round');\n    context.beginPath();\n    if (arcbarOption.type == 'default') {\n      context.arc(centerPosition.x, centerPosition.y, radius - (arcbarOption.width + arcbarOption.gap) * i, arcbarOption.startAngle * Math.PI, arcbarOption.endAngle * Math.PI, false);\n    } else {\n      context.arc(centerPosition.x, centerPosition.y, radius - (arcbarOption.width + arcbarOption.gap) * i, 0, 2 * Math.PI, false);\n    }\n    context.stroke();\n    //进度条\n    context.setLineWidth(arcbarOption.width);\n    context.setStrokeStyle(eachSeries.color);\n    context.setLineCap('round');\n    context.beginPath();\n    context.arc(centerPosition.x, centerPosition.y, radius - (arcbarOption.width + arcbarOption.gap) * i, arcbarOption.startAngle * Math.PI, eachSeries._proportion_ * Math.PI, false);\n    context.stroke();\n  }\n\n  drawRingTitle(opts, config, context, centerPosition);\n\n  return {\n    center: centerPosition,\n    radius: radius,\n    series: series };\n\n}\n\nfunction drawGaugeDataPoints(categories, series, opts, config, context) {\n  var process = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  var gaugeOption = assign({}, {\n    type: 'default',\n    startAngle: 0.75,\n    endAngle: 0.25,\n    width: 15,\n    splitLine: {\n      fixRadius: 0,\n      splitNumber: 10,\n      width: 15,\n      color: '#FFFFFF',\n      childNumber: 5,\n      childWidth: 5 },\n\n    pointer: {\n      width: 15,\n      color: 'auto' } },\n\n  opts.extra.gauge);\n\n  if (gaugeOption.oldAngle == undefined) {\n    gaugeOption.oldAngle = gaugeOption.startAngle;\n  }\n  if (gaugeOption.oldData == undefined) {\n    gaugeOption.oldData = 0;\n  }\n  categories = getGaugeAxisPoints(categories, gaugeOption.startAngle, gaugeOption.endAngle);\n\n  var centerPosition = {\n    x: opts.width / 2,\n    y: opts.height / 2 };\n\n  var radius = Math.min(centerPosition.x, centerPosition.y);\n  radius -= 5 * opts.pixelRatio;\n  radius -= gaugeOption.width / 2;\n  var innerRadius = radius - gaugeOption.width;\n  var totalAngle = 0;\n\n  //判断仪表盘的样式：default百度样式，progress新样式\n  if (gaugeOption.type == 'progress') {\n\n    //## 第一步画中心圆形背景和进度条背景\n    //中心圆形背景\n    var pieRadius = radius - gaugeOption.width * 3;\n    context.beginPath();\n    var gradient = context.createLinearGradient(centerPosition.x, centerPosition.y - pieRadius, centerPosition.x, centerPosition.y + pieRadius);\n    //配置渐变填充（起点：中心点向上减半径；结束点中心点向下加半径）\n    gradient.addColorStop('0', hexToRgb(series[0].color, 0.3));\n    gradient.addColorStop('1.0', hexToRgb(\"#FFFFFF\", 0.1));\n    context.setFillStyle(gradient);\n    context.arc(centerPosition.x, centerPosition.y, pieRadius, 0, 2 * Math.PI, false);\n    context.fill();\n    //画进度条背景\n    context.setLineWidth(gaugeOption.width);\n    context.setStrokeStyle(hexToRgb(series[0].color, 0.3));\n    context.setLineCap('round');\n    context.beginPath();\n    context.arc(centerPosition.x, centerPosition.y, innerRadius, gaugeOption.startAngle * Math.PI, gaugeOption.endAngle * Math.PI, false);\n    context.stroke();\n\n    //## 第二步画刻度线\n    totalAngle = gaugeOption.startAngle - gaugeOption.endAngle + 1;\n    var splitAngle = totalAngle / gaugeOption.splitLine.splitNumber;\n    var childAngle = totalAngle / gaugeOption.splitLine.splitNumber / gaugeOption.splitLine.childNumber;\n    var startX = -radius - gaugeOption.width * 0.5 - gaugeOption.splitLine.fixRadius;\n    var endX = -radius - gaugeOption.width - gaugeOption.splitLine.fixRadius + gaugeOption.splitLine.width;\n    context.save();\n    context.translate(centerPosition.x, centerPosition.y);\n    context.rotate((gaugeOption.startAngle - 1) * Math.PI);\n    var len = gaugeOption.splitLine.splitNumber * gaugeOption.splitLine.childNumber + 1;\n    var proc = series[0].data * process;\n    for (var i = 0; i < len; i++) {\n      context.beginPath();\n      //刻度线随进度变色\n      if (proc > i / len) {\n        context.setStrokeStyle(hexToRgb(series[0].color, 1));\n      } else {\n        context.setStrokeStyle(hexToRgb(series[0].color, 0.3));\n      }\n      context.setLineWidth(3 * opts.pixelRatio);\n      context.moveTo(startX, 0);\n      context.lineTo(endX, 0);\n      context.stroke();\n      context.rotate(childAngle * Math.PI);\n    }\n    context.restore();\n\n    //## 第三步画进度条\n    series = getArcbarDataPoints(series, gaugeOption, process);\n    context.setLineWidth(gaugeOption.width);\n    context.setStrokeStyle(series[0].color);\n    context.setLineCap('round');\n    context.beginPath();\n    context.arc(centerPosition.x, centerPosition.y, innerRadius, gaugeOption.startAngle * Math.PI, series[0]._proportion_ * Math.PI, false);\n    context.stroke();\n\n    //## 第四步画指针\n    var pointerRadius = radius - gaugeOption.width * 2.5;\n    context.save();\n    context.translate(centerPosition.x, centerPosition.y);\n    context.rotate((series[0]._proportion_ - 1) * Math.PI);\n    context.beginPath();\n    context.setLineWidth(gaugeOption.width / 3);\n    var gradient3 = context.createLinearGradient(0, -pointerRadius * 0.6, 0, pointerRadius * 0.6);\n    gradient3.addColorStop('0', hexToRgb('#FFFFFF', 0));\n    gradient3.addColorStop('0.5', hexToRgb(series[0].color, 1));\n    gradient3.addColorStop('1.0', hexToRgb('#FFFFFF', 0));\n    context.setStrokeStyle(gradient3);\n    context.arc(0, 0, pointerRadius, 0.85 * Math.PI, 1.15 * Math.PI, false);\n    context.stroke();\n    context.beginPath();\n    context.setLineWidth(1);\n    context.setStrokeStyle(series[0].color);\n    context.setFillStyle(series[0].color);\n    context.moveTo(-pointerRadius - gaugeOption.width / 3 / 2, -4);\n    context.lineTo(-pointerRadius - gaugeOption.width / 3 / 2 - 4, 0);\n    context.lineTo(-pointerRadius - gaugeOption.width / 3 / 2, 4);\n    context.lineTo(-pointerRadius - gaugeOption.width / 3 / 2, -4);\n    context.stroke();\n    context.fill();\n    context.restore();\n\n    //default百度样式\n  } else {\n    //画背景\n    context.setLineWidth(gaugeOption.width);\n    context.setLineCap('butt');\n    for (var _i18 = 0; _i18 < categories.length; _i18++) {\n      var eachCategories = categories[_i18];\n      context.beginPath();\n      context.setStrokeStyle(eachCategories.color);\n      context.arc(centerPosition.x, centerPosition.y, radius, eachCategories._startAngle_ * Math.PI, eachCategories._endAngle_ * Math.PI, false);\n      context.stroke();\n    }\n    context.save();\n\n    //画刻度线\n    totalAngle = gaugeOption.startAngle - gaugeOption.endAngle + 1;\n    var _splitAngle = totalAngle / gaugeOption.splitLine.splitNumber;\n    var _childAngle = totalAngle / gaugeOption.splitLine.splitNumber / gaugeOption.splitLine.childNumber;\n    var _startX2 = -radius - gaugeOption.width * 0.5 - gaugeOption.splitLine.fixRadius;\n    var _endX = -radius - gaugeOption.width * 0.5 - gaugeOption.splitLine.fixRadius + gaugeOption.splitLine.width;\n    var childendX = -radius - gaugeOption.width * 0.5 - gaugeOption.splitLine.fixRadius + gaugeOption.splitLine.childWidth;\n\n    context.translate(centerPosition.x, centerPosition.y);\n    context.rotate((gaugeOption.startAngle - 1) * Math.PI);\n\n    for (var _i19 = 0; _i19 < gaugeOption.splitLine.splitNumber + 1; _i19++) {\n      context.beginPath();\n      context.setStrokeStyle(gaugeOption.splitLine.color);\n      context.setLineWidth(2 * opts.pixelRatio);\n      context.moveTo(_startX2, 0);\n      context.lineTo(_endX, 0);\n      context.stroke();\n      context.rotate(_splitAngle * Math.PI);\n    }\n    context.restore();\n\n    context.save();\n    context.translate(centerPosition.x, centerPosition.y);\n    context.rotate((gaugeOption.startAngle - 1) * Math.PI);\n\n    for (var _i20 = 0; _i20 < gaugeOption.splitLine.splitNumber * gaugeOption.splitLine.childNumber + 1; _i20++) {\n      context.beginPath();\n      context.setStrokeStyle(gaugeOption.splitLine.color);\n      context.setLineWidth(1 * opts.pixelRatio);\n      context.moveTo(_startX2, 0);\n      context.lineTo(childendX, 0);\n      context.stroke();\n      context.rotate(_childAngle * Math.PI);\n    }\n    context.restore();\n\n    //画指针\n    series = getGaugeDataPoints(series, categories, gaugeOption, process);\n\n    for (var _i21 = 0; _i21 < series.length; _i21++) {\n      var eachSeries = series[_i21];\n      context.save();\n      context.translate(centerPosition.x, centerPosition.y);\n      context.rotate((eachSeries._proportion_ - 1) * Math.PI);\n      context.beginPath();\n      context.setFillStyle(eachSeries.color);\n      context.moveTo(gaugeOption.pointer.width, 0);\n      context.lineTo(0, -gaugeOption.pointer.width / 2);\n      context.lineTo(-innerRadius, 0);\n      context.lineTo(0, gaugeOption.pointer.width / 2);\n      context.lineTo(gaugeOption.pointer.width, 0);\n      context.closePath();\n      context.fill();\n      context.beginPath();\n      context.setFillStyle('#FFFFFF');\n      context.arc(0, 0, gaugeOption.pointer.width / 6, 0, 2 * Math.PI, false);\n      context.fill();\n      context.restore();\n    }\n\n    if (opts.dataLabel !== false) {\n      drawGaugeLabel(gaugeOption, radius, centerPosition, opts, config, context);\n    }\n  }\n\n  //画仪表盘标题，副标题\n  drawRingTitle(opts, config, context, centerPosition);\n\n  if (process === 1 && opts.type === 'gauge') {\n    opts.extra.gauge.oldAngle = series[0]._proportion_;\n    opts.extra.gauge.oldData = series[0].data;\n  }\n  return {\n    center: centerPosition,\n    radius: radius,\n    innerRadius: innerRadius,\n    categories: categories,\n    totalAngle: totalAngle };\n\n}\n\nfunction drawRadarDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var radarOption = assign({}, {\n    gridColor: '#cccccc',\n    labelColor: '#666666',\n    opacity: 0.2,\n    gridCount: 3 },\n  opts.extra.radar);\n\n  var coordinateAngle = getRadarCoordinateSeries(opts.categories.length);\n\n  var centerPosition = {\n    x: opts.area[3] + (opts.width - opts.area[1] - opts.area[3]) / 2,\n    y: opts.area[0] + (opts.height - opts.area[0] - opts.area[2]) / 2 };\n\n\n  var radius = Math.min(centerPosition.x - (getMaxTextListLength(opts.categories) + config.radarLabelTextMargin),\n  centerPosition.y - config.radarLabelTextMargin);\n  //TODO逻辑不对\n  radius -= opts.padding[1];\n\n  // draw grid\n  context.beginPath();\n  context.setLineWidth(1 * opts.pixelRatio);\n  context.setStrokeStyle(radarOption.gridColor);\n  coordinateAngle.forEach(function (angle) {\n    var pos = convertCoordinateOrigin(radius * Math.cos(angle), radius * Math.sin(angle), centerPosition);\n    context.moveTo(centerPosition.x, centerPosition.y);\n    context.lineTo(pos.x, pos.y);\n  });\n  context.stroke();\n  context.closePath();\n  // draw split line grid\n\n  var _loop = function _loop(i) {\n    var startPos = {};\n    context.beginPath();\n    context.setLineWidth(1 * opts.pixelRatio);\n    context.setStrokeStyle(radarOption.gridColor);\n    coordinateAngle.forEach(function (angle, index) {\n      var pos = convertCoordinateOrigin(radius / radarOption.gridCount * i * Math.cos(angle), radius / radarOption.gridCount * i * Math.sin(angle), centerPosition);\n      if (index === 0) {\n        startPos = pos;\n        context.moveTo(pos.x, pos.y);\n      } else {\n        context.lineTo(pos.x, pos.y);\n      }\n    });\n    context.lineTo(startPos.x, startPos.y);\n    context.stroke();\n    context.closePath();\n  };\n\n  for (var i = 1; i <= radarOption.gridCount; i++) {\n    _loop(i);\n  }\n\n  var radarDataPoints = getRadarDataPoints(coordinateAngle, centerPosition, radius, series, opts, process);\n\n  radarDataPoints.forEach(function (eachSeries, seriesIndex) {\n    // 绘制区域数据\n    context.beginPath();\n    context.setFillStyle(hexToRgb(eachSeries.color, radarOption.opacity));\n    eachSeries.data.forEach(function (item, index) {\n      if (index === 0) {\n        context.moveTo(item.position.x, item.position.y);\n      } else {\n        context.lineTo(item.position.x, item.position.y);\n      }\n    });\n    context.closePath();\n    context.fill();\n\n    if (opts.dataPointShape !== false) {\n      var points = eachSeries.data.map(function (item) {\n        return item.position;\n      });\n      drawPointShape(points, eachSeries.color, eachSeries.pointShape, context, opts);\n    }\n  });\n  // draw label text\n  drawRadarLabel(coordinateAngle, radius, centerPosition, opts, config, context);\n\n  return {\n    center: centerPosition,\n    radius: radius,\n    angleList: coordinateAngle };\n\n}\n\nfunction normalInt(min, max, iter) {\n  iter = iter == 0 ? 1 : iter;\n  var arr = [];\n  for (var i = 0; i < iter; i++) {\n    arr[i] = Math.random();\n  };\n  return Math.floor(arr.reduce(function (i, j) {return i + j;}) / iter * (max - min)) + min;\n};\n\nfunction collisionNew(area, points, width, height) {\n  var isIn = false;\n  for (var i = 0; i < points.length; i++) {\n    if (points[i].area) {\n      if (area[3] < points[i].area[1] || area[0] > points[i].area[2] || area[1] > points[i].area[3] || area[2] < points[i].area[0]) {\n        if (area[0] < 0 || area[1] < 0 || area[2] > width || area[3] > height) {\n          isIn = true;\n          break;\n        } else {\n          isIn = false;\n        }\n      } else {\n        isIn = true;\n        break;\n      }\n    }\n  }\n  return isIn;\n};\n\nfunction getBoundingBox(data) {\n  var bounds = {},coords;\n  bounds.xMin = 180;\n  bounds.xMax = 0;\n  bounds.yMin = 90;\n  bounds.yMax = 0;\n  for (var i = 0; i < data.length; i++) {\n    var coorda = data[i].geometry.coordinates;\n    for (var k = 0; k < coorda.length; k++) {\n      coords = coorda[k];\n      if (coords.length == 1) {\n        coords = coords[0];\n      }\n      for (var j = 0; j < coords.length; j++) {\n        var longitude = coords[j][0];\n        var latitude = coords[j][1];\n        var point = {\n          x: longitude,\n          y: latitude };\n\n        bounds.xMin = bounds.xMin < point.x ? bounds.xMin : point.x;\n        bounds.xMax = bounds.xMax > point.x ? bounds.xMax : point.x;\n        bounds.yMin = bounds.yMin < point.y ? bounds.yMin : point.y;\n        bounds.yMax = bounds.yMax > point.y ? bounds.yMax : point.y;\n      }\n    }\n  }\n  return bounds;\n}\n\nfunction coordinateToPoint(latitude, longitude, bounds, scale, xoffset, yoffset) {\n  return {\n    x: (longitude - bounds.xMin) * scale + xoffset,\n    y: (bounds.yMax - latitude) * scale + yoffset };\n\n}\n\nfunction pointToCoordinate(pointY, pointX, bounds, scale, xoffset, yoffset) {\n  return {\n    x: (pointX - xoffset) / scale + bounds.xMin,\n    y: bounds.yMax - (pointY - yoffset) / scale };\n\n}\n\nfunction isRayIntersectsSegment(poi, s_poi, e_poi) {\n  if (s_poi[1] == e_poi[1]) {return false;}\n  if (s_poi[1] > poi[1] && e_poi[1] > poi[1]) {return false;}\n  if (s_poi[1] < poi[1] && e_poi[1] < poi[1]) {return false;}\n  if (s_poi[1] == poi[1] && e_poi[1] > poi[1]) {return false;}\n  if (e_poi[1] == poi[1] && s_poi[1] > poi[1]) {return false;}\n  if (s_poi[0] < poi[0] && e_poi[1] < poi[1]) {return false;}\n  var xseg = e_poi[0] - (e_poi[0] - s_poi[0]) * (e_poi[1] - poi[1]) / (e_poi[1] - s_poi[1]);\n  if (xseg < poi[0]) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nfunction isPoiWithinPoly(poi, poly) {\n  var sinsc = 0;\n  for (var i = 0; i < poly.length; i++) {\n    var epoly = poly[i][0];\n    if (poly.length == 1) {\n      epoly = poly[i][0];\n    }\n    for (var j = 0; j < epoly.length - 1; j++) {\n      var s_poi = epoly[j];\n      var e_poi = epoly[j + 1];\n      if (isRayIntersectsSegment(poi, s_poi, e_poi)) {\n        sinsc += 1;\n      }\n    }\n  }\n\n  if (sinsc % 2 == 1) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n\nfunction drawMapDataPoints(series, opts, config, context) {\n  var mapOption = assign({}, {\n    border: true,\n    borderWidth: 1,\n    borderColor: '#666666',\n    fillOpacity: 0.6,\n    activeBorderColor: '#f04864',\n    activeFillColor: '#facc14',\n    activeFillOpacity: 1 },\n  opts.extra.map);\n  var coords, point;\n  var data = series;\n  var bounds = getBoundingBox(data);\n  var xScale = opts.width / Math.abs(bounds.xMax - bounds.xMin);\n  var yScale = opts.height / Math.abs(bounds.yMax - bounds.yMin);\n  var scale = xScale < yScale ? xScale : yScale;\n  var xoffset = opts.width / 2 - Math.abs(bounds.xMax - bounds.xMin) / 2 * scale;\n  var yoffset = opts.height / 2 - Math.abs(bounds.yMax - bounds.yMin) / 2 * scale;\n  context.beginPath();\n  context.clearRect(0, 0, opts.width, opts.height);\n  context.setFillStyle(opts.background || '#FFFFFF');\n  context.rect(0, 0, opts.width, opts.height);\n  context.fill();\n  for (var i = 0; i < data.length; i++) {\n    context.beginPath();\n    context.setLineWidth(mapOption.borderWidth * opts.pixelRatio);\n    context.setStrokeStyle(mapOption.borderColor);\n    context.setFillStyle(hexToRgb(series[i].color, mapOption.fillOpacity));\n    if (opts.tooltip) {\n      if (opts.tooltip.index == i) {\n        context.setStrokeStyle(mapOption.activeBorderColor);\n        context.setFillStyle(hexToRgb(mapOption.activeFillColor, mapOption.activeFillOpacity));\n      }\n    }\n    var coorda = data[i].geometry.coordinates;\n    for (var k = 0; k < coorda.length; k++) {\n      coords = coorda[k];\n      if (coords.length == 1) {\n        coords = coords[0];\n      }\n      for (var j = 0; j < coords.length; j++) {\n        point = coordinateToPoint(coords[j][1], coords[j][0], bounds, scale, xoffset, yoffset);\n        if (j === 0) {\n          context.beginPath();\n          context.moveTo(point.x, point.y);\n        } else {\n          context.lineTo(point.x, point.y);\n        }\n      }\n      context.fill();\n      if (mapOption.border == true) {\n        context.stroke();\n      }\n    }\n    if (opts.dataLabel == true) {\n      var centerPoint = data[i].properties.centroid;\n      if (centerPoint) {\n        point = coordinateToPoint(centerPoint[1], centerPoint[0], bounds, scale, xoffset, yoffset);\n        var fontSize = data[i].textSize || config.fontSize;\n        var text = data[i].properties.name;\n        context.beginPath();\n        context.setFontSize(fontSize);\n        context.setFillStyle(data[i].textColor || '#666666');\n        context.fillText(text, point.x - measureText(text, fontSize) / 2, point.y + fontSize / 2);\n        context.closePath();\n        context.stroke();\n      }\n    }\n  }\n  opts.chartData.mapData = {\n    bounds: bounds,\n    scale: scale,\n    xoffset: xoffset,\n    yoffset: yoffset };\n\n  drawToolTipBridge(opts, config, context, 1);\n  context.draw();\n}\n\nfunction getWordCloudPoint(opts, type) {\n  var points = opts.series.sort(function (a, b) {return parseInt(b.textSize) - parseInt(a.textSize);});\n  switch (type) {\n    case 'normal':\n      for (var i = 0; i < points.length; i++) {\n        var text = points[i].name;\n        var tHeight = points[i].textSize;\n        var tWidth = measureText(text, tHeight);\n        var x = void 0,y = void 0;\n        var area = void 0;\n        var breaknum = 0;\n        while (true) {\n          breaknum++;\n          x = normalInt(-opts.width / 2, opts.width / 2, 5) - tWidth / 2;\n          y = normalInt(-opts.height / 2, opts.height / 2, 5) + tHeight / 2;\n          area = [x - 5 + opts.width / 2, y - 5 - tHeight + opts.height / 2, x + tWidth + 5 + opts.width / 2, y + 5 + opts.height / 2];\n          var isCollision = collisionNew(area, points, opts.width, opts.height);\n          if (!isCollision) break;\n          if (breaknum == 1000) {\n            area = [-100, -100, -100, -100];\n            break;\n          }\n        };\n        points[i].area = area;\n      }\n      break;\n    case 'vertical':var\n      Spin = function Spin() {\n        //获取均匀随机值，是否旋转，旋转的概率为（1-0.5）\n        if (Math.random() > 0.7) {\n          return true;\n        } else {return false;};\n      };;\n      for (var _i22 = 0; _i22 < points.length; _i22++) {\n        var _text = points[_i22].name;\n        var _tHeight = points[_i22].textSize;\n        var _tWidth = measureText(_text, _tHeight);\n        var isSpin = Spin();\n        var _x = void 0,_y = void 0,_area = void 0,areav = void 0;\n        var _breaknum = 0;\n        while (true) {\n          _breaknum++;\n          var _isCollision = void 0;\n          if (isSpin) {\n            _x = normalInt(-opts.width / 2, opts.width / 2, 5) - _tWidth / 2;\n            _y = normalInt(-opts.height / 2, opts.height / 2, 5) + _tHeight / 2;\n            _area = [_y - 5 - _tWidth + opts.width / 2, -_x - 5 + opts.height / 2, _y + 5 + opts.width / 2, -_x + _tHeight + 5 + opts.height / 2];\n            areav = [opts.width - (opts.width / 2 - opts.height / 2) - (-_x + _tHeight + 5 + opts.height / 2) - 5, opts.height / 2 - opts.width / 2 + (_y - 5 - _tWidth + opts.width / 2) - 5, opts.width - (opts.width / 2 - opts.height / 2) - (-_x + _tHeight + 5 + opts.height / 2) + _tHeight, opts.height / 2 - opts.width / 2 + (_y - 5 - _tWidth + opts.width / 2) + _tWidth + 5];\n            _isCollision = collisionNew(areav, points, opts.height, opts.width);\n          } else {\n            _x = normalInt(-opts.width / 2, opts.width / 2, 5) - _tWidth / 2;\n            _y = normalInt(-opts.height / 2, opts.height / 2, 5) + _tHeight / 2;\n            _area = [_x - 5 + opts.width / 2, _y - 5 - _tHeight + opts.height / 2, _x + _tWidth + 5 + opts.width / 2, _y + 5 + opts.height / 2];\n            _isCollision = collisionNew(_area, points, opts.width, opts.height);\n          }\n          if (!_isCollision) break;\n          if (_breaknum == 1000) {\n            _area = [-1000, -1000, -1000, -1000];\n            break;\n          }\n        };\n        if (isSpin) {\n          points[_i22].area = areav;\n          points[_i22].areav = _area;\n        } else {\n          points[_i22].area = _area;\n        }\n        points[_i22].rotate = isSpin;\n      };\n      break;}\n\n  return points;\n}\n\n\nfunction drawWordCloudDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var wordOption = assign({}, {\n    type: 'normal',\n    autoColors: true },\n  opts.extra.word);\n\n  context.beginPath();\n  context.setFillStyle(opts.background || '#FFFFFF');\n  context.rect(0, 0, opts.width, opts.height);\n  context.fill();\n  context.save();\n  var points = opts.chartData.wordCloudData;\n  context.translate(opts.width / 2, opts.height / 2);\n\n  for (var i = 0; i < points.length; i++) {\n    context.save();\n    if (points[i].rotate) {\n      context.rotate(90 * Math.PI / 180);\n    }\n    var text = points[i].name;\n    var tHeight = points[i].textSize;\n    var tWidth = measureText(text, tHeight);\n    context.beginPath();\n    context.setStrokeStyle(points[i].color);\n    context.setFillStyle(points[i].color);\n    context.setFontSize(tHeight);\n    if (points[i].rotate) {\n      if (points[i].areav[0] > 0) {\n        if (opts.tooltip) {\n          if (opts.tooltip.index == i) {\n            context.strokeText(text, (points[i].areav[0] + 5 - opts.width / 2) * process - tWidth * (1 - process) / 2, (points[i].areav[1] + 5 + tHeight - opts.height / 2) * process);\n          } else {\n            context.fillText(text, (points[i].areav[0] + 5 - opts.width / 2) * process - tWidth * (1 - process) / 2, (points[i].areav[1] + 5 + tHeight - opts.height / 2) * process);\n          }\n        } else {\n          context.fillText(text, (points[i].areav[0] + 5 - opts.width / 2) * process - tWidth * (1 - process) / 2, (points[i].areav[1] + 5 + tHeight - opts.height / 2) * process);\n        }\n      }\n    } else {\n      if (points[i].area[0] > 0) {\n        if (opts.tooltip) {\n          if (opts.tooltip.index == i) {\n            context.strokeText(text, (points[i].area[0] + 5 - opts.width / 2) * process - tWidth * (1 - process) / 2, (points[i].area[1] + 5 + tHeight - opts.height / 2) * process);\n          } else {\n            context.fillText(text, (points[i].area[0] + 5 - opts.width / 2) * process - tWidth * (1 - process) / 2, (points[i].area[1] + 5 + tHeight - opts.height / 2) * process);\n          }\n        } else {\n          context.fillText(text, (points[i].area[0] + 5 - opts.width / 2) * process - tWidth * (1 - process) / 2, (points[i].area[1] + 5 + tHeight - opts.height / 2) * process);\n        }\n\n      }\n    }\n\n    context.stroke();\n    context.restore();\n  }\n  context.restore();\n}\n\nfunction drawFunnelDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var funnelOption = assign({}, {\n    activeWidth: 10,\n    activeOpacity: 0.3,\n    border: false,\n    borderWidth: 2,\n    borderColor: '#FFFFFF',\n    fillOpacity: 1,\n    labelAlign: 'right' },\n  opts.extra.funnel);\n  var eachSpacing = (opts.height - opts.area[0] - opts.area[2]) / series.length;\n  var centerPosition = {\n    x: opts.area[3] + (opts.width - opts.area[1] - opts.area[3]) / 2,\n    y: opts.height - opts.area[2] };\n\n  var activeWidth = funnelOption.activeWidth;\n  var radius = Math.min((opts.width - opts.area[1] - opts.area[3]) / 2 - activeWidth, (opts.height - opts.area[0] - opts.area[2]) / 2 - activeWidth);\n  series = getFunnelDataPoints(series, radius, process);\n  context.save();\n  context.translate(centerPosition.x, centerPosition.y);\n  for (var i = 0; i < series.length; i++) {\n    if (i == 0) {\n      if (opts.tooltip) {\n        if (opts.tooltip.index == i) {\n          context.beginPath();\n          context.setFillStyle(hexToRgb(series[i].color, funnelOption.activeOpacity));\n          context.moveTo(-activeWidth, 0);\n          context.lineTo(-series[i].radius - activeWidth, -eachSpacing);\n          context.lineTo(series[i].radius + activeWidth, -eachSpacing);\n          context.lineTo(activeWidth, 0);\n          context.lineTo(-activeWidth, 0);\n          context.closePath();\n          context.fill();\n        }\n      }\n      series[i].funnelArea = [centerPosition.x - series[i].radius, centerPosition.y - eachSpacing, centerPosition.x + series[i].radius, centerPosition.y];\n      context.beginPath();\n      context.setLineWidth(funnelOption.borderWidth * opts.pixelRatio);\n      context.setStrokeStyle(funnelOption.borderColor);\n      context.setFillStyle(hexToRgb(series[i].color, funnelOption.fillOpacity));\n      context.moveTo(0, 0);\n      context.lineTo(-series[i].radius, -eachSpacing);\n      context.lineTo(series[i].radius, -eachSpacing);\n      context.lineTo(0, 0);\n      context.closePath();\n      context.fill();\n      if (funnelOption.border == true) {\n        context.stroke();\n      }\n    } else {\n      if (opts.tooltip) {\n        if (opts.tooltip.index == i) {\n          context.beginPath();\n          context.setFillStyle(hexToRgb(series[i].color, funnelOption.activeOpacity));\n          context.moveTo(0, 0);\n          context.lineTo(-series[i - 1].radius - activeWidth, 0);\n          context.lineTo(-series[i].radius - activeWidth, -eachSpacing);\n          context.lineTo(series[i].radius + activeWidth, -eachSpacing);\n          context.lineTo(series[i - 1].radius + activeWidth, 0);\n          context.lineTo(0, 0);\n          context.closePath();\n          context.fill();\n        }\n      }\n      series[i].funnelArea = [centerPosition.x - series[i].radius, centerPosition.y - eachSpacing * (i + 1), centerPosition.x + series[i].radius, centerPosition.y - eachSpacing * i];\n      context.beginPath();\n      context.setLineWidth(funnelOption.borderWidth * opts.pixelRatio);\n      context.setStrokeStyle(funnelOption.borderColor);\n      context.setFillStyle(hexToRgb(series[i].color, funnelOption.fillOpacity));\n      context.moveTo(0, 0);\n      context.lineTo(-series[i - 1].radius, 0);\n      context.lineTo(-series[i].radius, -eachSpacing);\n      context.lineTo(series[i].radius, -eachSpacing);\n      context.lineTo(series[i - 1].radius, 0);\n      context.lineTo(0, 0);\n      context.closePath();\n      context.fill();\n      if (funnelOption.border == true) {\n        context.stroke();\n      }\n    }\n    context.translate(0, -eachSpacing);\n  }\n  context.restore();\n\n  if (opts.dataLabel !== false && process === 1) {\n    drawFunnelText(series, opts, context, eachSpacing, funnelOption.labelAlign, activeWidth, centerPosition);\n  }\n\n  return {\n    center: centerPosition,\n    radius: radius,\n    series: series };\n\n}\n\nfunction drawFunnelText(series, opts, context, eachSpacing, labelAlign, activeWidth, centerPosition) {\n  for (var i = 0; i < series.length; i++) {\n    var item = series[i];\n    var startX = void 0,endX = void 0,startY = void 0,fontSize = void 0;\n    var text = item.format ? item.format(+item._proportion_.toFixed(2)) : util.toFixed(item._proportion_ * 100) + '%';\n    if (labelAlign == 'right') {\n      if (i == 0) {\n        startX = (item.funnelArea[2] + centerPosition.x) / 2;\n      } else {\n        startX = (item.funnelArea[2] + series[i - 1].funnelArea[2]) / 2;\n      }\n      endX = startX + activeWidth * 2;\n      startY = item.funnelArea[1] + eachSpacing / 2;\n      fontSize = item.textSize || opts.fontSize;\n      context.setLineWidth(1 * opts.pixelRatio);\n      context.setStrokeStyle(item.color);\n      context.setFillStyle(item.color);\n      context.beginPath();\n      context.moveTo(startX, startY);\n      context.lineTo(endX, startY);\n      context.stroke();\n      context.closePath();\n      context.beginPath();\n      context.moveTo(endX, startY);\n      context.arc(endX, startY, 2, 0, 2 * Math.PI);\n      context.closePath();\n      context.fill();\n      context.beginPath();\n      context.setFontSize(fontSize);\n      context.setFillStyle(item.textColor || '#666666');\n      context.fillText(text, endX + 5, startY + fontSize / 2 - 2);\n      context.closePath();\n      context.stroke();\n      context.closePath();\n    } else {\n      if (i == 0) {\n        startX = (item.funnelArea[0] + centerPosition.x) / 2;\n      } else {\n        startX = (item.funnelArea[0] + series[i - 1].funnelArea[0]) / 2;\n      }\n      endX = startX - activeWidth * 2;\n      startY = item.funnelArea[1] + eachSpacing / 2;\n      fontSize = item.textSize || opts.fontSize;\n      context.setLineWidth(1 * opts.pixelRatio);\n      context.setStrokeStyle(item.color);\n      context.setFillStyle(item.color);\n      context.beginPath();\n      context.moveTo(startX, startY);\n      context.lineTo(endX, startY);\n      context.stroke();\n      context.closePath();\n      context.beginPath();\n      context.moveTo(endX, startY);\n      context.arc(endX, startY, 2, 0, 2 * Math.PI);\n      context.closePath();\n      context.fill();\n      context.beginPath();\n      context.setFontSize(fontSize);\n      context.setFillStyle(item.textColor || '#666666');\n      context.fillText(text, endX - 5 - measureText(text), startY + fontSize / 2 - 2);\n      context.closePath();\n      context.stroke();\n      context.closePath();\n    }\n\n  }\n}\n\n\nfunction drawCanvas(opts, context) {\n  context.draw();\n}\n\nvar Timing = {\n  easeIn: function easeIn(pos) {\n    return Math.pow(pos, 3);\n  },\n  easeOut: function easeOut(pos) {\n    return Math.pow(pos - 1, 3) + 1;\n  },\n  easeInOut: function easeInOut(pos) {\n    if ((pos /= 0.5) < 1) {\n      return 0.5 * Math.pow(pos, 3);\n    } else {\n      return 0.5 * (Math.pow(pos - 2, 3) + 2);\n    }\n  },\n  linear: function linear(pos) {\n    return pos;\n  } };\n\n\nfunction Animation(opts) {\n  this.isStop = false;\n  opts.duration = typeof opts.duration === 'undefined' ? 1000 : opts.duration;\n  opts.timing = opts.timing || 'linear';\n  var delay = 17;\n\n  function createAnimationFrame() {\n    if (typeof setTimeout !== 'undefined') {\n      return function (step, delay) {\n        setTimeout(function () {\n          var timeStamp = +new Date();\n          step(timeStamp);\n        }, delay);\n      };\n    } else if (typeof requestAnimationFrame !== 'undefined') {\n      return requestAnimationFrame;\n    } else {\n      return function (step) {\n        step(null);\n      };\n    }\n  };\n  var animationFrame = createAnimationFrame();\n  var startTimeStamp = null;\n  var _step = function step(timestamp) {\n    if (timestamp === null || this.isStop === true) {\n      opts.onProcess && opts.onProcess(1);\n      opts.onAnimationFinish && opts.onAnimationFinish();\n      return;\n    }\n    if (startTimeStamp === null) {\n      startTimeStamp = timestamp;\n    }\n    if (timestamp - startTimeStamp < opts.duration) {\n      var process = (timestamp - startTimeStamp) / opts.duration;\n      var timingFunction = Timing[opts.timing];\n      process = timingFunction(process);\n\n      opts.onProcess && opts.onProcess(process);\n      animationFrame(_step, delay);\n    } else {\n      opts.onProcess && opts.onProcess(1);\n      opts.onAnimationFinish && opts.onAnimationFinish();\n    }\n  };\n  _step = _step.bind(this);\n  animationFrame(_step, delay);\n}\n\n// stop animation immediately\n// and tigger onAnimationFinish\nAnimation.prototype.stop = function () {\n  this.isStop = true;\n};\n\nfunction drawCharts(type, opts, config, context) {\n  var _this = this;\n  var series = opts.series;\n  var categories = opts.categories;\n  series = fillSeries(series, opts, config);\n  var duration = opts.animation ? opts.duration : 0;\n  _this.animationInstance && _this.animationInstance.stop();\n  var seriesMA = null;\n  if (type == 'candle') {\n    var average = assign({}, opts.extra.candle.average);\n    if (average.show) {\n      seriesMA = calCandleMA(average.day, average.name, average.color, series[0].data);\n      seriesMA = fillSeries(seriesMA, opts, config);\n      opts.seriesMA = seriesMA;\n    } else if (opts.seriesMA) {\n      seriesMA = opts.seriesMA = fillSeries(opts.seriesMA, opts, config);\n    } else {\n      seriesMA = series;\n    }\n  } else {\n    seriesMA = series;\n  }\n\n  /* 过滤掉show=false的series */\n  opts._series_ = series = filterSeries(series);\n\n  //重新计算图表区域\n\n  opts.area = new Array(4);\n  //复位绘图区域\n  for (var j = 0; j < 4; j++) {\n    opts.area[j] = opts.padding[j];\n  }\n\n  //通过计算三大区域：图例、X轴、Y轴的大小，确定绘图区域\n  var _calLegendData = calLegendData(seriesMA, opts, config, opts.chartData),\n  legendHeight = _calLegendData.area.wholeHeight,\n  legendWidth = _calLegendData.area.wholeWidth;\n\n  switch (opts.legend.position) {\n    case 'top':\n      opts.area[0] += legendHeight;\n      break;\n    case 'bottom':\n      opts.area[2] += legendHeight;\n      break;\n    case 'left':\n      opts.area[3] += legendWidth;\n      break;\n    case 'right':\n      opts.area[1] += legendWidth;\n      break;}\n\n\n  var _calYAxisData = {},yAxisWidth = 0;\n  if (opts.type === 'line' || opts.type === 'column' || opts.type === 'area' || opts.type === 'mix' || opts.type === 'candle') {\n    _calYAxisData = calYAxisData(series, opts, config);\n    yAxisWidth = _calYAxisData.yAxisWidth;\n    //如果显示Y轴标题\n    if (opts.yAxis.showTitle) {\n      var maxTitleHeight = 0;\n      for (var i = 0; i < opts.yAxis.data.length; i++) {\n        maxTitleHeight = Math.max(maxTitleHeight, opts.yAxis.data[i].titleFontSize ? opts.yAxis.data[i].titleFontSize : config.fontSize);\n      }\n      opts.area[0] += (maxTitleHeight + 6) * opts.pixelRatio;\n    }\n    var rightIndex = 0,leftIndex = 0;\n    //计算主绘图区域左右位置\n    for (var _i23 = 0; _i23 < yAxisWidth.length; _i23++) {\n      if (yAxisWidth[_i23].position == 'left') {\n        if (leftIndex > 0) {\n          opts.area[3] += yAxisWidth[_i23].width + opts.yAxis.padding;\n        } else {\n          opts.area[3] += yAxisWidth[_i23].width;\n        }\n        leftIndex += 1;\n      } else {\n        if (rightIndex > 0) {\n          opts.area[1] += yAxisWidth[_i23].width + opts.yAxis.padding;\n        } else {\n          opts.area[1] += yAxisWidth[_i23].width;\n        }\n        rightIndex += 1;\n      }\n    }\n  } else {\n    config.yAxisWidth = yAxisWidth;\n  }\n  opts.chartData.yAxisData = _calYAxisData;\n\n  if (opts.categories && opts.categories.length) {\n    opts.chartData.xAxisData = getXAxisPoints(opts.categories, opts, config);\n    var _calCategoriesData = calCategoriesData(opts.categories, opts, config, opts.chartData.xAxisData.eachSpacing),\n    xAxisHeight = _calCategoriesData.xAxisHeight,\n    angle = _calCategoriesData.angle;\n    config.xAxisHeight = xAxisHeight;\n    config._xAxisTextAngle_ = angle;\n    opts.area[2] += xAxisHeight;\n    opts.chartData.categoriesData = _calCategoriesData;\n  } else {\n    if (opts.type === 'line' || opts.type === 'area' || opts.type === 'points') {\n      opts.chartData.xAxisData = calXAxisData(series, opts, config);\n      categories = opts.chartData.xAxisData.rangesFormat;\n      var _calCategoriesData2 = calCategoriesData(categories, opts, config, opts.chartData.xAxisData.eachSpacing),\n      _xAxisHeight = _calCategoriesData2.xAxisHeight,\n      _angle = _calCategoriesData2.angle;\n      config.xAxisHeight = _xAxisHeight;\n      config._xAxisTextAngle_ = _angle;\n      opts.area[2] += _xAxisHeight;\n      opts.chartData.categoriesData = _calCategoriesData2;\n    } else {\n      opts.chartData.xAxisData = {\n        xAxisPoints: [] };\n\n    }\n  }\n  //计算右对齐偏移距离\n  if (opts.enableScroll && opts.xAxis.scrollAlign == 'right' && opts._scrollDistance_ === undefined) {\n    var offsetLeft = 0,\n    xAxisPoints = opts.chartData.xAxisData.xAxisPoints,\n    startX = opts.chartData.xAxisData.startX,\n    endX = opts.chartData.xAxisData.endX,\n    eachSpacing = opts.chartData.xAxisData.eachSpacing;\n    var totalWidth = eachSpacing * (xAxisPoints.length - 1);\n    var screenWidth = endX - startX;\n    offsetLeft = screenWidth - totalWidth;\n    _this.scrollOption = {\n      currentOffset: offsetLeft,\n      startTouchX: offsetLeft,\n      distance: 0,\n      lastMoveTime: 0 };\n\n    opts._scrollDistance_ = offsetLeft;\n  }\n\n  if (type === 'pie' || type === 'ring' || type === 'rose') {\n    config._pieTextMaxLength_ = opts.dataLabel === false ? 0 : getPieTextMaxLength(seriesMA);\n  }\n\n  switch (type) {\n    case 'word':\n      var wordOption = assign({}, {\n        type: 'normal',\n        autoColors: true },\n      opts.extra.word);\n      if (opts.updateData == true || opts.updateData == undefined) {\n        opts.chartData.wordCloudData = getWordCloudPoint(opts, wordOption.type);\n      }\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          drawWordCloudDataPoints(series, opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'map':\n      context.clearRect(0, 0, opts.width, opts.height);\n      drawMapDataPoints(series, opts, config, context);\n      break;\n    case 'funnel':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          opts.chartData.funnelData = drawFunnelDataPoints(series, opts, config, context, process);\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'line':\n      this.animationInstance = new Animation({\n        timing: 'easeIn',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          drawYAxisGrid(categories, opts, config, context);\n          drawXAxis(categories, opts, config, context);\n          var _drawLineDataPoints = drawLineDataPoints(series, opts, config, context, process),\n          xAxisPoints = _drawLineDataPoints.xAxisPoints,\n          calPoints = _drawLineDataPoints.calPoints,\n          eachSpacing = _drawLineDataPoints.eachSpacing;\n          opts.chartData.xAxisPoints = xAxisPoints;\n          opts.chartData.calPoints = calPoints;\n          opts.chartData.eachSpacing = eachSpacing;\n          drawYAxis(series, opts, config, context);\n          if (opts.enableMarkLine !== false && process === 1) {\n            drawMarkLine(opts, config, context);\n          }\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\n          drawCanvas(opts, context);\n\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'mix':\n      this.animationInstance = new Animation({\n        timing: 'easeIn',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          drawYAxisGrid(categories, opts, config, context);\n          drawXAxis(categories, opts, config, context);\n          var _drawMixDataPoints = drawMixDataPoints(series, opts, config, context, process),\n          xAxisPoints = _drawMixDataPoints.xAxisPoints,\n          calPoints = _drawMixDataPoints.calPoints,\n          eachSpacing = _drawMixDataPoints.eachSpacing;\n          opts.chartData.xAxisPoints = xAxisPoints;\n          opts.chartData.calPoints = calPoints;\n          opts.chartData.eachSpacing = eachSpacing;\n          drawYAxis(series, opts, config, context);\n          if (opts.enableMarkLine !== false && process === 1) {\n            drawMarkLine(opts, config, context);\n          }\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'column':\n      this.animationInstance = new Animation({\n        timing: 'easeIn',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          drawYAxisGrid(categories, opts, config, context);\n          drawXAxis(categories, opts, config, context);\n          var _drawColumnDataPoints = drawColumnDataPoints(series, opts, config, context, process),\n          xAxisPoints = _drawColumnDataPoints.xAxisPoints,\n          calPoints = _drawColumnDataPoints.calPoints,\n          eachSpacing = _drawColumnDataPoints.eachSpacing;\n          opts.chartData.xAxisPoints = xAxisPoints;\n          opts.chartData.calPoints = calPoints;\n          opts.chartData.eachSpacing = eachSpacing;\n          drawYAxis(series, opts, config, context);\n          if (opts.enableMarkLine !== false && process === 1) {\n            drawMarkLine(opts, config, context);\n          }\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'area':\n      this.animationInstance = new Animation({\n        timing: 'easeIn',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          drawYAxisGrid(categories, opts, config, context);\n          drawXAxis(categories, opts, config, context);\n          var _drawAreaDataPoints = drawAreaDataPoints(series, opts, config, context, process),\n          xAxisPoints = _drawAreaDataPoints.xAxisPoints,\n          calPoints = _drawAreaDataPoints.calPoints,\n          eachSpacing = _drawAreaDataPoints.eachSpacing;\n          opts.chartData.xAxisPoints = xAxisPoints;\n          opts.chartData.calPoints = calPoints;\n          opts.chartData.eachSpacing = eachSpacing;\n          drawYAxis(series, opts, config, context);\n          if (opts.enableMarkLine !== false && process === 1) {\n            drawMarkLine(opts, config, context);\n          }\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'ring':\n    case 'pie':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          opts.chartData.pieData = drawPieDataPoints(series, opts, config, context, process);\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'rose':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          opts.chartData.pieData = drawRoseDataPoints(series, opts, config, context, process);\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'radar':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          opts.chartData.radarData = drawRadarDataPoints(series, opts, config, context, process);\n          drawLegend(opts.series, opts, config, context, opts.chartData);\n          drawToolTipBridge(opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'arcbar':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          opts.chartData.arcbarData = drawArcbarDataPoints(series, opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'gauge':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          opts.chartData.gaugeData = drawGaugeDataPoints(categories, series, opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;\n    case 'candle':\n      this.animationInstance = new Animation({\n        timing: 'easeIn',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          context.clearRect(0, 0, opts.width, opts.height);\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          drawYAxisGrid(categories, opts, config, context);\n          drawXAxis(categories, opts, config, context);\n          var _drawCandleDataPoints = drawCandleDataPoints(series, seriesMA, opts, config, context, process),\n          xAxisPoints = _drawCandleDataPoints.xAxisPoints,\n          calPoints = _drawCandleDataPoints.calPoints,\n          eachSpacing = _drawCandleDataPoints.eachSpacing;\n          opts.chartData.xAxisPoints = xAxisPoints;\n          opts.chartData.calPoints = calPoints;\n          opts.chartData.eachSpacing = eachSpacing;\n          drawYAxis(series, opts, config, context);\n          if (opts.enableMarkLine !== false && process === 1) {\n            drawMarkLine(opts, config, context);\n          }\n          if (seriesMA) {\n            drawLegend(seriesMA, opts, config, context, opts.chartData);\n          } else {\n            drawLegend(opts.series, opts, config, context, opts.chartData);\n          }\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        } });\n\n      break;}\n\n}\n\n// simple event implement\n\nfunction Event() {\n  this.events = {};\n}\n\nEvent.prototype.addEventListener = function (type, listener) {\n  this.events[type] = this.events[type] || [];\n  this.events[type].push(listener);\n};\n\nEvent.prototype.trigger = function () {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var type = args[0];\n  var params = args.slice(1);\n  if (!!this.events[type]) {\n    this.events[type].forEach(function (listener) {\n      try {\n        listener.apply(null, params);\n      } catch (e) {\n        console.error(__f__(e, \" at components\\\\u-charts\\\\u-charts.js:5091\"));\n      }\n    });\n  }\n};\n\nvar Charts = function Charts(opts) {\n  opts.pixelRatio = opts.pixelRatio ? opts.pixelRatio : 1;\n  opts.fontSize = opts.fontSize ? opts.fontSize * opts.pixelRatio : 13 * opts.pixelRatio;\n  opts.title = assign({}, opts.title);\n  opts.subtitle = assign({}, opts.subtitle);\n  opts.duration = opts.duration ? opts.duration : 1000;\n  opts.yAxis = assign({}, {\n    data: [],\n    showTitle: false,\n    disabled: false,\n    disableGrid: false,\n    splitNumber: 5,\n    gridType: 'solid',\n    dashLength: 4 * opts.pixelRatio,\n    gridColor: '#cccccc',\n    padding: 10,\n    fontColor: '#666666' },\n  opts.yAxis);\n  opts.yAxis.dashLength *= opts.pixelRatio;\n  opts.yAxis.padding *= opts.pixelRatio;\n  opts.xAxis = assign({}, {\n    rotateLabel: false,\n    type: 'calibration',\n    gridType: 'solid',\n    dashLength: 4,\n    scrollAlign: 'left',\n    boundaryGap: 'center',\n    axisLine: true,\n    axisLineColor: '#cccccc' },\n  opts.xAxis);\n  opts.xAxis.dashLength *= opts.pixelRatio;\n  opts.legend = assign({}, {\n    show: true,\n    position: 'bottom',\n    float: 'center',\n    backgroundColor: 'rgba(0,0,0,0)',\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    padding: 5,\n    margin: 5,\n    itemGap: 10,\n    fontSize: opts.fontSize,\n    lineHeight: opts.fontSize,\n    fontColor: '#333333',\n    format: {},\n    hiddenColor: '#CECECE' },\n  opts.legend);\n  opts.legend.borderWidth = opts.legend.borderWidth * opts.pixelRatio;\n  opts.legend.itemGap = opts.legend.itemGap * opts.pixelRatio;\n  opts.legend.padding = opts.legend.padding * opts.pixelRatio;\n  opts.legend.margin = opts.legend.margin * opts.pixelRatio;\n  opts.extra = assign({}, opts.extra);\n  opts.rotate = opts.rotate ? true : false;\n  opts.animation = opts.animation ? true : false;\n  opts.rotate = opts.rotate ? true : false;\n\n  var config$$1 = JSON.parse(JSON.stringify(config));\n  config$$1.colors = opts.colors ? opts.colors : config$$1.colors;\n  config$$1.yAxisTitleWidth = opts.yAxis.disabled !== true && opts.yAxis.title ? config$$1.yAxisTitleWidth : 0;\n  if (opts.type == 'pie' || opts.type == 'ring') {\n    config$$1.pieChartLinePadding = opts.dataLabel === false ? 0 : opts.extra.pie.labelWidth * opts.pixelRatio || config$$1.pieChartLinePadding * opts.pixelRatio;\n  }\n  if (opts.type == 'rose') {\n    config$$1.pieChartLinePadding = opts.dataLabel === false ? 0 : opts.extra.rose.labelWidth * opts.pixelRatio || config$$1.pieChartLinePadding * opts.pixelRatio;\n  }\n  config$$1.pieChartTextPadding = opts.dataLabel === false ? 0 : config$$1.pieChartTextPadding * opts.pixelRatio;\n  config$$1.yAxisSplit = opts.yAxis.splitNumber ? opts.yAxis.splitNumber : config.yAxisSplit;\n\n  //屏幕旋转\n  config$$1.rotate = opts.rotate;\n  if (opts.rotate) {\n    var tempWidth = opts.width;\n    var tempHeight = opts.height;\n    opts.width = tempHeight;\n    opts.height = tempWidth;\n  }\n\n  //适配高分屏\n  opts.padding = opts.padding ? opts.padding : config$$1.padding;\n  for (var i = 0; i < 4; i++) {\n    opts.padding[i] *= opts.pixelRatio;\n  }\n  config$$1.yAxisWidth = config.yAxisWidth * opts.pixelRatio;\n  config$$1.xAxisHeight = config.xAxisHeight * opts.pixelRatio;\n  if (opts.enableScroll && opts.xAxis.scrollShow) {\n    config$$1.xAxisHeight += 6 * opts.pixelRatio;\n  }\n  config$$1.xAxisLineHeight = config.xAxisLineHeight * opts.pixelRatio;\n  config$$1.fontSize = opts.fontSize;\n  config$$1.titleFontSize = config.titleFontSize * opts.pixelRatio;\n  config$$1.subtitleFontSize = config.subtitleFontSize * opts.pixelRatio;\n  config$$1.toolTipPadding = config.toolTipPadding * opts.pixelRatio;\n  config$$1.toolTipLineHeight = config.toolTipLineHeight * opts.pixelRatio;\n  config$$1.columePadding = config.columePadding * opts.pixelRatio;\n  opts.$this = opts.$this ? opts.$this : this;\n\n  this.context = uni.createCanvasContext(opts.canvasId, opts.$this);\n  /* 兼容原生H5\r\n                                                                     this.context = document.getElementById(opts.canvasId).getContext(\"2d\");\r\n                                                                     this.context.setStrokeStyle = function(e){ return this.strokeStyle=e; }\r\n                                                                     this.context.setLineWidth = function(e){ return this.lineWidth=e; }\r\n                                                                     this.context.setLineCap = function(e){ return this.lineCap=e; }\r\n                                                                     this.context.setFontSize = function(e){ return this.font=e+\"px sans-serif\"; }\r\n                                                                     this.context.setFillStyle = function(e){ return this.fillStyle=e; }\r\n                                                                     this.context.draw = function(){ }\r\n                                                                     */\n\n  opts.chartData = {};\n  this.event = new Event();\n  this.scrollOption = {\n    currentOffset: 0,\n    startTouchX: 0,\n    distance: 0,\n    lastMoveTime: 0 };\n\n\n  this.opts = opts;\n  this.config = config$$1;\n\n  drawCharts.call(this, opts.type, opts, config$$1, this.context);\n};\n\nCharts.prototype.updateData = function () {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  this.opts = assign({}, this.opts, data);\n  this.opts.updateData = true;\n  var scrollPosition = data.scrollPosition || 'current';\n  switch (scrollPosition) {\n    case 'current':\n      this.opts._scrollDistance_ = this.scrollOption.currentOffset;\n      break;\n    case 'left':\n      this.opts._scrollDistance_ = 0;\n      this.scrollOption = {\n        currentOffset: 0,\n        startTouchX: 0,\n        distance: 0,\n        lastMoveTime: 0 };\n\n      break;\n    case 'right':\n      var _calYAxisData = calYAxisData(this.opts.series, this.opts, this.config),\n      yAxisWidth = _calYAxisData.yAxisWidth;\n      this.config.yAxisWidth = yAxisWidth;\n      var offsetLeft = 0;\n      var _getXAxisPoints0 = getXAxisPoints(this.opts.categories, this.opts, this.config),\n      xAxisPoints = _getXAxisPoints0.xAxisPoints,\n      startX = _getXAxisPoints0.startX,\n      endX = _getXAxisPoints0.endX,\n      eachSpacing = _getXAxisPoints0.eachSpacing;\n      var totalWidth = eachSpacing * (xAxisPoints.length - 1);\n      var screenWidth = endX - startX;\n      offsetLeft = screenWidth - totalWidth;\n      this.scrollOption = {\n        currentOffset: offsetLeft,\n        startTouchX: offsetLeft,\n        distance: 0,\n        lastMoveTime: 0 };\n\n      this.opts._scrollDistance_ = offsetLeft;\n      break;}\n\n  drawCharts.call(this, this.opts.type, this.opts, this.config, this.context);\n};\n\nCharts.prototype.zoom = function () {\n  var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.opts.xAxis.itemCount;\n  if (this.opts.enableScroll !== true) {\n    console.log(__f__('请启用滚动条后使用！', \" at components\\\\u-charts\\\\u-charts.js:5265\"));\n    return;\n  }\n  //当前屏幕中间点\n  var centerPoint = Math.round(Math.abs(this.scrollOption.currentOffset) / this.opts.chartData.eachSpacing) + Math.round(\n  this.opts.xAxis.itemCount / 2);\n  this.opts.animation = false;\n  this.opts.xAxis.itemCount = val.itemCount;\n  //重新计算x轴偏移距离\n  var _calYAxisData = calYAxisData(this.opts.series, this.opts, this.config),\n  yAxisWidth = _calYAxisData.yAxisWidth;\n  this.config.yAxisWidth = yAxisWidth;\n  var offsetLeft = 0;\n  var _getXAxisPoints0 = getXAxisPoints(this.opts.categories, this.opts, this.config),\n  xAxisPoints = _getXAxisPoints0.xAxisPoints,\n  startX = _getXAxisPoints0.startX,\n  endX = _getXAxisPoints0.endX,\n  eachSpacing = _getXAxisPoints0.eachSpacing;\n  var centerLeft = eachSpacing * centerPoint;\n  var screenWidth = endX - startX;\n  var MaxLeft = screenWidth - eachSpacing * (xAxisPoints.length - 1);\n  offsetLeft = screenWidth / 2 - centerLeft;\n  if (offsetLeft > 0) {\n    offsetLeft = 0;\n  }\n  if (offsetLeft < MaxLeft) {\n    offsetLeft = MaxLeft;\n  }\n  this.scrollOption = {\n    currentOffset: offsetLeft,\n    startTouchX: offsetLeft,\n    distance: 0,\n    lastMoveTime: 0 };\n\n  this.opts._scrollDistance_ = offsetLeft;\n  drawCharts.call(this, this.opts.type, this.opts, this.config, this.context);\n};\n\nCharts.prototype.stopAnimation = function () {\n  this.animationInstance && this.animationInstance.stop();\n};\n\nCharts.prototype.addEventListener = function (type, listener) {\n  this.event.addEventListener(type, listener);\n};\n\nCharts.prototype.getCurrentDataIndex = function (e) {\n  var touches = null;\n  if (e.changedTouches) {\n    touches = e.changedTouches[0];\n  } else {\n    touches = e.mp.changedTouches[0];\n  }\n  if (touches) {\n    var _touches$ = getTouches(touches, this.opts, e);\n    if (this.opts.type === 'pie' || this.opts.type === 'ring' || this.opts.type === 'rose') {\n      return findPieChartCurrentIndex({\n        x: _touches$.x,\n        y: _touches$.y },\n      this.opts.chartData.pieData);\n    } else if (this.opts.type === 'radar') {\n      return findRadarChartCurrentIndex({\n        x: _touches$.x,\n        y: _touches$.y },\n      this.opts.chartData.radarData, this.opts.categories.length);\n    } else if (this.opts.type === 'funnel') {\n      return findFunnelChartCurrentIndex({\n        x: _touches$.x,\n        y: _touches$.y },\n      this.opts.chartData.funnelData);\n    } else if (this.opts.type === 'map') {\n      return findMapChartCurrentIndex({\n        x: _touches$.x,\n        y: _touches$.y },\n      this.opts);\n    } else if (this.opts.type === 'word') {\n      return findWordChartCurrentIndex({\n        x: _touches$.x,\n        y: _touches$.y },\n      this.opts.chartData.wordCloudData);\n    } else {\n      return findCurrentIndex({\n        x: _touches$.x,\n        y: _touches$.y },\n      this.opts.chartData.calPoints, this.opts, this.config, Math.abs(this.scrollOption.currentOffset));\n    }\n  }\n  return -1;\n};\n\nCharts.prototype.getLegendDataIndex = function (e) {\n  var touches = null;\n  if (e.changedTouches) {\n    touches = e.changedTouches[0];\n  } else {\n    touches = e.mp.changedTouches[0];\n  }\n  if (touches) {\n    var _touches$ = getTouches(touches, this.opts, e);\n    return findLegendIndex({\n      x: _touches$.x,\n      y: _touches$.y },\n    this.opts.chartData.legendData);\n  }\n  return -1;\n};\n\nCharts.prototype.touchLegend = function (e) {\n  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var touches = null;\n  if (e.changedTouches) {\n    touches = e.changedTouches[0];\n  } else {\n    touches = e.mp.changedTouches[0];\n  }\n  if (touches) {\n    var _touches$ = getTouches(touches, this.opts, e);\n    var index = this.getLegendDataIndex(e);\n    if (index >= 0) {\n      this.opts.series[index].show = !this.opts.series[index].show;\n      this.opts.animation = option.animation ? true : false;\n      this.opts._scrollDistance_ = this.scrollOption.currentOffset;\n      drawCharts.call(this, this.opts.type, this.opts, this.config, this.context);\n    }\n  }\n\n};\n\nCharts.prototype.showToolTip = function (e) {\n  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var touches = null;\n  if (e.changedTouches) {\n    touches = e.changedTouches[0];\n  } else {\n    touches = e.mp.changedTouches[0];\n  }\n  if (!touches) {\n    console.log(__f__(\"touchError\", \" at components\\\\u-charts\\\\u-charts.js:5402\"));\n  }\n  var _touches$ = getTouches(touches, this.opts, e);\n  var currentOffset = this.scrollOption.currentOffset;\n  var opts = assign({}, this.opts, {\n    _scrollDistance_: currentOffset,\n    animation: false });\n\n  if (this.opts.type === 'line' || this.opts.type === 'area' || this.opts.type === 'column') {\n    var index = this.getCurrentDataIndex(e);\n    if (index > -1) {\n      var seriesData = getSeriesDataItem(this.opts.series, index);\n      if (seriesData.length !== 0) {\n        var _getToolTipData = getToolTipData(seriesData, this.opts.chartData.calPoints, index, this.opts.categories, option),\n        textList = _getToolTipData.textList,\n        offset = _getToolTipData.offset;\n        offset.y = _touches$.y;\n        opts.tooltip = {\n          textList: textList,\n          offset: offset,\n          option: option,\n          index: index };\n\n      }\n    }\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n  }\n  if (this.opts.type === 'mix') {\n    var index = this.getCurrentDataIndex(e);\n    if (index > -1) {\n      var currentOffset = this.scrollOption.currentOffset;\n      var opts = assign({}, this.opts, {\n        _scrollDistance_: currentOffset,\n        animation: false });\n\n      var seriesData = getSeriesDataItem(this.opts.series, index);\n      if (seriesData.length !== 0) {\n        var _getMixToolTipData = getMixToolTipData(seriesData, this.opts.chartData.calPoints, index, this.opts.categories, option),\n        textList = _getMixToolTipData.textList,\n        offset = _getMixToolTipData.offset;\n        offset.y = _touches$.y;\n        opts.tooltip = {\n          textList: textList,\n          offset: offset,\n          option: option,\n          index: index };\n\n      }\n    }\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n  }\n  if (this.opts.type === 'candle') {\n    var index = this.getCurrentDataIndex(e);\n    if (index > -1) {\n      var currentOffset = this.scrollOption.currentOffset;\n      var opts = assign({}, this.opts, {\n        _scrollDistance_: currentOffset,\n        animation: false });\n\n      var seriesData = getSeriesDataItem(this.opts.series, index);\n      if (seriesData.length !== 0) {\n        var _getToolTipData = getCandleToolTipData(this.opts.series[0].data, seriesData, this.opts.chartData.calPoints,\n        index, this.opts.categories, this.opts.extra.candle, option),\n        textList = _getToolTipData.textList,\n        offset = _getToolTipData.offset;\n        offset.y = _touches$.y;\n        opts.tooltip = {\n          textList: textList,\n          offset: offset,\n          option: option,\n          index: index };\n\n      }\n    }\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n  }\n  if (this.opts.type === 'pie' || this.opts.type === 'ring' || this.opts.type === 'rose' || this.opts.type === 'funnel') {\n    var index = this.getCurrentDataIndex(e);\n    if (index > -1) {\n      var currentOffset = this.scrollOption.currentOffset;\n      var opts = assign({}, this.opts, {\n        _scrollDistance_: currentOffset,\n        animation: false });\n\n      var seriesData = this.opts._series_[index];\n      var textList = [{\n        text: option.format ? option.format(seriesData) : seriesData.name + ': ' + seriesData.data,\n        color: seriesData.color }];\n\n      var offset = {\n        x: _touches$.x,\n        y: _touches$.y };\n\n      opts.tooltip = {\n        textList: textList,\n        offset: offset,\n        option: option,\n        index: index };\n\n    }\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n  }\n  if (this.opts.type === 'map' || this.opts.type === 'word') {\n    var index = this.getCurrentDataIndex(e);\n    if (index > -1) {\n      var currentOffset = this.scrollOption.currentOffset;\n      var opts = assign({}, this.opts, {\n        _scrollDistance_: currentOffset,\n        animation: false });\n\n      var seriesData = this.opts._series_[index];\n      var textList = [{\n        text: option.format ? option.format(seriesData) : seriesData.properties.name,\n        color: seriesData.color }];\n\n      var offset = {\n        x: _touches$.x,\n        y: _touches$.y };\n\n      opts.tooltip = {\n        textList: textList,\n        offset: offset,\n        option: option,\n        index: index };\n\n    }\n    opts.updateData = false;\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n  }\n  if (this.opts.type === 'radar') {\n    var index = this.getCurrentDataIndex(e);\n    if (index > -1) {\n      var currentOffset = this.scrollOption.currentOffset;\n      var opts = assign({}, this.opts, {\n        _scrollDistance_: currentOffset,\n        animation: false });\n\n      var seriesData = getSeriesDataItem(this.opts.series, index);\n      if (seriesData.length !== 0) {\n        var textList = seriesData.map(function (item) {\n          return {\n            text: option.format ? option.format(item) : item.name + ': ' + item.data,\n            color: item.color };\n\n        });\n        var offset = {\n          x: _touches$.x,\n          y: _touches$.y };\n\n        opts.tooltip = {\n          textList: textList,\n          offset: offset,\n          option: option,\n          index: index };\n\n      }\n    }\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n  }\n};\n\nCharts.prototype.translate = function (distance) {\n  this.scrollOption = {\n    currentOffset: distance,\n    startTouchX: distance,\n    distance: 0,\n    lastMoveTime: 0 };\n\n  var opts = assign({}, this.opts, {\n    _scrollDistance_: distance,\n    animation: false });\n\n  drawCharts.call(this, this.opts.type, opts, this.config, this.context);\n};\n\nCharts.prototype.scrollStart = function (e) {\n  var touches = null;\n  if (e.changedTouches) {\n    touches = e.changedTouches[0];\n  } else {\n    touches = e.mp.changedTouches[0];\n  }\n  var _touches$ = getTouches(touches, this.opts, e);\n  if (touches && this.opts.enableScroll === true) {\n    this.scrollOption.startTouchX = _touches$.x;\n  }\n};\n\nCharts.prototype.scroll = function (e) {\n  if (this.scrollOption.lastMoveTime === 0) {\n    this.scrollOption.lastMoveTime = Date.now();\n  }\n  var Limit = this.opts.extra.touchMoveLimit || 20;\n  var currMoveTime = Date.now();\n  var duration = currMoveTime - this.scrollOption.lastMoveTime;\n  if (duration < Math.floor(1000 / Limit)) return;\n  this.scrollOption.lastMoveTime = currMoveTime;\n  var touches = null;\n  if (e.changedTouches) {\n    touches = e.changedTouches[0];\n  } else {\n    touches = e.mp.changedTouches[0];\n  }\n  if (touches && this.opts.enableScroll === true) {\n    var _touches$ = getTouches(touches, this.opts, e);\n    var _distance;\n    _distance = _touches$.x - this.scrollOption.startTouchX;\n    var currentOffset = this.scrollOption.currentOffset;\n    var validDistance = calValidDistance(this, currentOffset + _distance, this.opts.chartData, this.config, this.opts);\n    this.scrollOption.distance = _distance = validDistance - currentOffset;\n    var opts = assign({}, this.opts, {\n      _scrollDistance_: currentOffset + _distance,\n      animation: false });\n\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n    return currentOffset + _distance;\n  }\n};\n\nCharts.prototype.scrollEnd = function (e) {\n  if (this.opts.enableScroll === true) {\n    var _scrollOption = this.scrollOption,\n    currentOffset = _scrollOption.currentOffset,\n    distance = _scrollOption.distance;\n    this.scrollOption.currentOffset = currentOffset + distance;\n    this.scrollOption.distance = 0;\n  }\n};\nif ( true && typeof module.exports === \"object\") {\n  module.exports = Charts;\n  //export default Charts;//建议使用nodejs的module导出方式，如报错请使用export方式导出\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///681\n");

/***/ }),

/***/ 682:
/*!**********************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/utils/chart.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _hydrogenJsSdk = _interopRequireDefault(__webpack_require__(/*! hydrogen-js-sdk */ 14));\nvar _common = _interopRequireDefault(__webpack_require__(/*! @/utils/common.js */ 78));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var _default =\n{\n\n  //查询产品列表\n  RingChart: function RingChart() {\n    var uid = uni.getStorageSync(\"uid\");\n    var ringChart = {};\n    return new Promise(function (resolve, reject) {\n      var query = _hydrogenJsSdk.default.Query(\"Goods\");\n      query.equalTo(\"userId\", \"==\", uid);\n      query.equalTo(\"status\", \"!=\", -1);\n\n      query.order(\"-reserve\"); //按照条件降序\n      query.limit(30);\n      query.select(\"reserve\", \"goodsName\");\n      query.find().then(function (res) {\n        //console.log(res)\n        var series = [];var _iteratorNormalCompletion = true;var _didIteratorError = false;var _iteratorError = undefined;try {\n          for (var _iterator = res[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {var item = _step.value;\n            var data = {};\n            data.name = item.goodsName;\n            data.data = item.reserve;\n            series.push(data);\n          }} catch (err) {_didIteratorError = true;_iteratorError = err;} finally {try {if (!_iteratorNormalCompletion && _iterator.return != null) {_iterator.return();}} finally {if (_didIteratorError) {throw _iteratorError;}}}\n        ringChart.series = series;\n        resolve(ringChart);\n      });\n    });\n\n  },\n\n  //得到出入库的线形图数据\n  getLineChart: function getLineChart(year, month) {\n    var lineReserve = {};\n    var columnChart = {};\n\n    var categories = [];\n    var series = [];\n    var seriesItem1 = {};\n    var seriesItem2 = {};\n    var outData = [];\n    var inData = [];\n\n    var series1 = [];\n    var seriesItem3 = {};\n    var seriesItem4 = {};\n    var outMoney = [];\n    var inMoney = [];\n\n    var series2 = [];\n    var seriesItem5 = {};\n    var seriesItem6 = {};\n    var outReaMoney = [];\n    var inReaMoney = [];\n\n    var columnSeries1 = []; // 入库统计\n    var columnSeries2 = []; // 出库统计\n\n    var uid = uni.getStorageSync(\"uid\");\n    var Day = new Date();\n    var d;\n    var now_month = Day.getMonth() + 1;\n    var now_year = Day.getFullYear();\n    var start_date;\n    var end_date;\n    if (now_month != month || now_year != now_year) {\n      Day = new Date(year, month, 0);\n      d = Day.getDate();\n      start_date = year + \"-\" + month + \"-\" + d + \" 00:00:00\";\n      end_date = year + \"-\" + month + \"-01\" + \" 00:00:00\";\n    } else {\n      d = Day.getDate();\n      start_date = _common.default.getDay(1) + \" 00:00:00\";\n      end_date = _common.default.getDay(-d + 1) + \" 00:00:00\";\n    }\n\n\n    return new Promise(function (resolve, reject) {\n      var query = _hydrogenJsSdk.default.Query(\"Bills\");\n      query.equalTo(\"userId\", \"==\", uid);\n      query.equalTo(\"createdAt\", \">=\", end_date);\n      query.equalTo(\"createdAt\", \"<=\", start_date);\n      query.statTo(\"sum\", \"num,total_money,really_total_money\");\n      query.statTo(\"groupby\", \"createdAt,type\");\n      query.statTo(\"order\", \"-createdAt\");\n      query.equalTo(\"status\", \"!=\", false);\n      query.limit(1000);\n      query.find().then(function (res) {\n\n        if (now_month != month || now_year != now_year) {\n          for (var i = 1; i <= d; i++) {\n            var day = year + \"-\" + month + \"-\" + (i < 10 ? '0' + i : i);\n            categories.push(day);\n            outData.push(0);\n            inData.push(0);\n            outMoney.push(0);\n            inMoney.push(0);\n            outReaMoney.push(0);\n            inReaMoney.push(0);\n          }\n        } else {\n          for (var _i = 0; _i < d; _i++) {\n            categories.push(_common.default.getDay(-_i));\n            outData.push(0);\n            inData.push(0);\n            outMoney.push(0);\n            inMoney.push(0);\n            outReaMoney.push(0);\n            inReaMoney.push(0);\n          }\n        }var _iteratorNormalCompletion2 = true;var _didIteratorError2 = false;var _iteratorError2 = undefined;try {\n\n          for (var _iterator2 = res[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {var item = _step2.value;\n            var key = categories.indexOf(item.createdAt);\n            if (item.type == 1 && key != -1) {\n              inData[key] = item._sumNum;\n              inMoney[key] = item._sumTotal_money;\n              inReaMoney[key] = item._sumReally_total_money;\n            } else {\n              outData[key] = item._sumNum;\n              outMoney[key] = item._sumTotal_money;\n              outReaMoney[key] = item._sumReally_total_money;\n            }\n          }} catch (err) {_didIteratorError2 = true;_iteratorError2 = err;} finally {try {if (!_iteratorNormalCompletion2 && _iterator2.return != null) {_iterator2.return();}} finally {if (_didIteratorError2) {throw _iteratorError2;}}}\n\n        seriesItem1.name = \"入库量\";\n        seriesItem1.data = inData;\n        series.push(seriesItem1);\n        columnSeries1.push(seriesItem1);\n        seriesItem2.name = \"出库量\";\n        seriesItem2.data = outData;\n        series.push(seriesItem2);\n        columnSeries2.push(seriesItem2);\n\n        seriesItem3.name = \"出库金额\";\n        seriesItem3.data = outMoney;\n        series1.push(seriesItem3);\n        //columnSeries1.push(seriesItem3)\n        seriesItem4.name = \"入库金额\";\n        seriesItem4.data = inMoney;\n        series1.push(seriesItem4);\n\n        seriesItem5.name = \"出库金额\";\n        seriesItem5.data = outReaMoney;\n        columnSeries2.push(seriesItem5);\n        series2.push(seriesItem5);\n        seriesItem6.name = \"入库金额\";\n        seriesItem6.data = inReaMoney;\n        series2.push(seriesItem6);\n        columnSeries1.push(seriesItem6);\n\n\n        lineReserve.categories = categories;\n        lineReserve.series = series;\n        lineReserve.series1 = series1;\n        lineReserve.series2 = series2;\n        lineReserve.columnSeries1 = columnSeries1;\n        lineReserve.columnSeries2 = columnSeries2;\n\n        resolve(lineReserve);\n        //console.log(lineReserve)\n      });\n\n    });\n  } };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vdXRpbHMvY2hhcnQuanMiXSwibmFtZXMiOlsiUmluZ0NoYXJ0IiwidWlkIiwidW5pIiwiZ2V0U3RvcmFnZVN5bmMiLCJyaW5nQ2hhcnQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInF1ZXJ5IiwiQm1vYiIsIlF1ZXJ5IiwiZXF1YWxUbyIsIm9yZGVyIiwibGltaXQiLCJzZWxlY3QiLCJmaW5kIiwidGhlbiIsInJlcyIsInNlcmllcyIsIml0ZW0iLCJkYXRhIiwibmFtZSIsImdvb2RzTmFtZSIsInJlc2VydmUiLCJwdXNoIiwiZ2V0TGluZUNoYXJ0IiwieWVhciIsIm1vbnRoIiwibGluZVJlc2VydmUiLCJjb2x1bW5DaGFydCIsImNhdGVnb3JpZXMiLCJzZXJpZXNJdGVtMSIsInNlcmllc0l0ZW0yIiwib3V0RGF0YSIsImluRGF0YSIsInNlcmllczEiLCJzZXJpZXNJdGVtMyIsInNlcmllc0l0ZW00Iiwib3V0TW9uZXkiLCJpbk1vbmV5Iiwic2VyaWVzMiIsInNlcmllc0l0ZW01Iiwic2VyaWVzSXRlbTYiLCJvdXRSZWFNb25leSIsImluUmVhTW9uZXkiLCJjb2x1bW5TZXJpZXMxIiwiY29sdW1uU2VyaWVzMiIsIkRheSIsIkRhdGUiLCJkIiwibm93X21vbnRoIiwiZ2V0TW9udGgiLCJub3dfeWVhciIsImdldEZ1bGxZZWFyIiwic3RhcnRfZGF0ZSIsImVuZF9kYXRlIiwiZ2V0RGF0ZSIsImNvbW1vbiIsImdldERheSIsInN0YXRUbyIsImkiLCJkYXkiLCJrZXkiLCJpbmRleE9mIiwiY3JlYXRlZEF0IiwidHlwZSIsIl9zdW1OdW0iLCJfc3VtVG90YWxfbW9uZXkiLCJfc3VtUmVhbGx5X3RvdGFsX21vbmV5Il0sIm1hcHBpbmdzIjoia0lBQUE7QUFDQSx1RjtBQUNlOztBQUVkO0FBQ0FBLFdBSGMsdUJBR0Y7QUFDWCxRQUFJQyxHQUFHLEdBQUdDLEdBQUcsQ0FBQ0MsY0FBSixDQUFtQixLQUFuQixDQUFWO0FBQ0EsUUFBSUMs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Q0FBQ1gsSUFBUixDQUFhWSxXQUFiO0FBQ0E7QUFDQUMsbUJBQVcsQ0FBQ2hCLElBQVosR0FBbUIsTUFBbkI7QUFDQWdCLG1CQUFXLENBQUNqQixJQUFaLEdBQW1CbUIsT0FBbkI7QUFDQUosZUFBTyxDQUFDWCxJQUFSLENBQWFhLFdBQWI7O0FBRUFJLG1CQUFXLENBQUNwQixJQUFaLEdBQW1CLE1BQW5CO0FBQ0FvQixtQkFBVyxDQUFDckIsSUFBWixHQUFtQnVCLFdBQW5CO0FBQ0FHLHFCQUFhLENBQUN0QixJQUFkLENBQW1CaUIsV0FBbkI7QUFDQUQsZUFBTyxDQUFDaEIsSUFBUixDQUFhaUIsV0FBYjtBQUNBQyxtQkFBVyxDQUFDckIsSUFBWixHQUFtQixNQUFuQjtBQUNBcUIsbUJBQVcsQ0FBQ3RCLElBQVosR0FBbUJ3QixVQUFuQjtBQUNBSixlQUFPLENBQUNoQixJQUFSLENBQWFrQixXQUFiO0FBQ0FHLHFCQUFhLENBQUNyQixJQUFkLENBQW1Ca0IsV0FBbkI7OztBQUdBZCxtQkFBVyxDQUFDRSxVQUFaLEdBQXlCQSxVQUF6QjtBQUNBRixtQkFBVyxDQUFDVixNQUFaLEdBQXFCQSxNQUFyQjtBQUNBVSxtQkFBVyxDQUFDTyxPQUFaLEdBQXNCQSxPQUF0QjtBQUNBUCxtQkFBVyxDQUFDWSxPQUFaLEdBQXNCQSxPQUF0QjtBQUNBWixtQkFBVyxDQUFDaUIsYUFBWixHQUE0QkEsYUFBNUI7QUFDQWpCLG1CQUFXLENBQUNrQixhQUFaLEdBQTRCQSxhQUE1Qjs7QUFFQXhDLGVBQU8sQ0FBQ3NCLFdBQUQsQ0FBUDtBQUNBO0FBQ0EsT0ExRUQ7O0FBNEVBLEtBdEZNLENBQVA7QUF1RkEsR0FuS2EsRSIsImZpbGUiOiI2ODIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQm1vYiBmcm9tIFwiaHlkcm9nZW4tanMtc2RrXCI7XHJcbmltcG9ydCBjb21tb24gZnJvbSBcIkAvdXRpbHMvY29tbW9uLmpzXCI7XHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuXHRcclxuXHQvL+afpeivouS6p+WTgeWIl+ihqFxyXG5cdFJpbmdDaGFydCgpIHtcclxuXHRcdGxldCB1aWQgPSB1bmkuZ2V0U3RvcmFnZVN5bmMoXCJ1aWRcIilcclxuXHRcdGxldCByaW5nQ2hhcnQgPSB7fVxyXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHRcdFx0Y29uc3QgcXVlcnkgPSBCbW9iLlF1ZXJ5KFwiR29vZHNcIik7XHJcblx0XHRcdHF1ZXJ5LmVxdWFsVG8oXCJ1c2VySWRcIiwgXCI9PVwiLCB1aWQpO1xyXG5cdFx0XHRxdWVyeS5lcXVhbFRvKFwic3RhdHVzXCIsIFwiIT1cIiwgLTEpO1xyXG5cdFx0XHRcclxuXHRcdFx0cXVlcnkub3JkZXIoXCItcmVzZXJ2ZVwiKTsgLy/mjInnhafmnaHku7bpmY3luo9cclxuXHRcdFx0cXVlcnkubGltaXQoMzApO1xyXG5cdFx0XHRxdWVyeS5zZWxlY3QoXCJyZXNlcnZlXCIsXCJnb29kc05hbWVcIik7XHJcblx0XHRcdHF1ZXJ5LmZpbmQoKS50aGVuKHJlcyA9PiB7XHJcblx0XHRcdFx0Ly9jb25zb2xlLmxvZyhyZXMpXHJcblx0XHRcdFx0bGV0IHNlcmllcyA9IFtdXHJcblx0XHRcdFx0Zm9yKGxldCBpdGVtIG9mIHJlcyl7XHJcblx0XHRcdFx0XHRsZXQgZGF0YSA9IHt9XHJcblx0XHRcdFx0XHRkYXRhLm5hbWUgPSBpdGVtLmdvb2RzTmFtZVxyXG5cdFx0XHRcdFx0ZGF0YS5kYXRhID0gaXRlbS5yZXNlcnZlXHJcblx0XHRcdFx0XHRzZXJpZXMucHVzaChkYXRhKVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyaW5nQ2hhcnQuc2VyaWVzID0gc2VyaWVzXHJcblx0XHRcdFx0cmVzb2x2ZShyaW5nQ2hhcnQpXHJcblx0XHRcdH0pO1xyXG5cdFx0fSlcclxuXHRcdFxyXG5cdH0sXHJcblx0XHJcblx0Ly/lvpfliLDlh7rlhaXlupPnmoTnur/lvaLlm77mlbDmja5cclxuXHRnZXRMaW5lQ2hhcnQoeWVhciwgbW9udGgpIHtcclxuXHRcdGxldCBsaW5lUmVzZXJ2ZSA9IHt9XHJcblx0XHRsZXQgY29sdW1uQ2hhcnQgPSB7fVxyXG5cdFx0XHJcblx0XHRsZXQgY2F0ZWdvcmllcyA9IFtdXHJcblx0XHRsZXQgc2VyaWVzID0gW11cclxuXHRcdGxldCBzZXJpZXNJdGVtMSA9IHt9XHJcblx0XHRsZXQgc2VyaWVzSXRlbTIgPSB7fVxyXG5cdFx0bGV0IG91dERhdGEgPSBbXVxyXG5cdFx0bGV0IGluRGF0YSA9IFtdXHJcblx0XHRcclxuXHRcdGxldCBzZXJpZXMxID0gW11cclxuXHRcdGxldCBzZXJpZXNJdGVtMyA9IHt9XHJcblx0XHRsZXQgc2VyaWVzSXRlbTQgPSB7fVxyXG5cdFx0bGV0IG91dE1vbmV5ID0gW11cclxuXHRcdGxldCBpbk1vbmV5ID0gW11cclxuXHRcdFxyXG5cdFx0bGV0IHNlcmllczIgPSBbXVxyXG5cdFx0bGV0IHNlcmllc0l0ZW01ID0ge31cclxuXHRcdGxldCBzZXJpZXNJdGVtNiA9IHt9XHJcblx0XHRsZXQgb3V0UmVhTW9uZXkgPSBbXVxyXG5cdFx0bGV0IGluUmVhTW9uZXkgPSBbXVxyXG5cdFx0XHJcblx0XHRsZXQgY29sdW1uU2VyaWVzMSA9IFtdIC8vIOWFpeW6k+e7n+iuoVxyXG5cdFx0bGV0IGNvbHVtblNlcmllczIgPSBbXSAvLyDlh7rlupPnu5/orqFcclxuXHJcblx0XHRsZXQgdWlkID0gdW5pLmdldFN0b3JhZ2VTeW5jKFwidWlkXCIpXHJcblx0XHRsZXQgRGF5ID0gbmV3IERhdGUoKVxyXG5cdFx0bGV0IGRcclxuXHRcdGxldCBub3dfbW9udGggPSBEYXkuZ2V0TW9udGgoKSArIDFcclxuXHRcdGxldCBub3dfeWVhciA9IERheS5nZXRGdWxsWWVhcigpO1xyXG5cdFx0bGV0IHN0YXJ0X2RhdGVcclxuXHRcdGxldCBlbmRfZGF0ZVxyXG5cdFx0aWYgKG5vd19tb250aCAhPSBtb250aCB8fCBub3dfeWVhciAhPSBub3dfeWVhcikge1xyXG5cdFx0XHREYXkgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgMClcclxuXHRcdFx0ZCA9IERheS5nZXREYXRlKClcclxuXHRcdFx0c3RhcnRfZGF0ZSA9IHllYXIgKyBcIi1cIiArIG1vbnRoICsgXCItXCIgKyBkICsgXCIgMDA6MDA6MDBcIlxyXG5cdFx0XHRlbmRfZGF0ZSA9IHllYXIgKyBcIi1cIiArIG1vbnRoICsgXCItMDFcIiArIFwiIDAwOjAwOjAwXCJcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGQgPSBEYXkuZ2V0RGF0ZSgpXHJcblx0XHRcdHN0YXJ0X2RhdGUgPSBjb21tb24uZ2V0RGF5KDEpICsgXCIgMDA6MDA6MDBcIlxyXG5cdFx0XHRlbmRfZGF0ZSA9IGNvbW1vbi5nZXREYXkoLWQgKyAxKSArIFwiIDAwOjAwOjAwXCJcclxuXHRcdH1cclxuXHJcblxyXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHRcdFx0Y29uc3QgcXVlcnkgPSBCbW9iLlF1ZXJ5KFwiQmlsbHNcIik7XHJcblx0XHRcdHF1ZXJ5LmVxdWFsVG8oXCJ1c2VySWRcIiwgXCI9PVwiLCB1aWQpO1xyXG5cdFx0XHRxdWVyeS5lcXVhbFRvKFwiY3JlYXRlZEF0XCIsIFwiPj1cIiwgZW5kX2RhdGUpO1xyXG5cdFx0XHRxdWVyeS5lcXVhbFRvKFwiY3JlYXRlZEF0XCIsIFwiPD1cIiwgc3RhcnRfZGF0ZSk7XHJcblx0XHRcdHF1ZXJ5LnN0YXRUbyhcInN1bVwiLCBcIm51bSx0b3RhbF9tb25leSxyZWFsbHlfdG90YWxfbW9uZXlcIik7XHJcblx0XHRcdHF1ZXJ5LnN0YXRUbyhcImdyb3VwYnlcIiwgXCJjcmVhdGVkQXQsdHlwZVwiKTtcclxuXHRcdFx0cXVlcnkuc3RhdFRvKFwib3JkZXJcIiwgXCItY3JlYXRlZEF0XCIpO1xyXG5cdFx0XHRxdWVyeS5lcXVhbFRvKFwic3RhdHVzXCIsIFwiIT1cIiwgZmFsc2UpO1xyXG5cdFx0XHRxdWVyeS5saW1pdCgxMDAwKVxyXG5cdFx0XHRxdWVyeS5maW5kKCkudGhlbihyZXMgPT4ge1xyXG5cclxuXHRcdFx0XHRpZiAobm93X21vbnRoICE9IG1vbnRoIHx8IG5vd195ZWFyICE9IG5vd195ZWFyKSB7XHJcblx0XHRcdFx0XHRmb3IgKGxldCBpID0gMTsgaSA8PSBkOyBpKyspIHtcclxuXHRcdFx0XHRcdFx0bGV0IGRheSA9IHllYXIgKyBcIi1cIiArIG1vbnRoICsgXCItXCIgKyAoaSA8MTA/JzAnK2k6aSlcclxuXHRcdFx0XHRcdFx0Y2F0ZWdvcmllcy5wdXNoKGRheSlcclxuXHRcdFx0XHRcdFx0b3V0RGF0YS5wdXNoKDApXHJcblx0XHRcdFx0XHRcdGluRGF0YS5wdXNoKDApXHJcblx0XHRcdFx0XHRcdG91dE1vbmV5LnB1c2goMClcclxuXHRcdFx0XHRcdFx0aW5Nb25leS5wdXNoKDApXHJcblx0XHRcdFx0XHRcdG91dFJlYU1vbmV5LnB1c2goMClcclxuXHRcdFx0XHRcdFx0aW5SZWFNb25leS5wdXNoKDApXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgZDsgaSsrKSB7XHJcblx0XHRcdFx0XHRcdGNhdGVnb3JpZXMucHVzaChjb21tb24uZ2V0RGF5KC1pKSlcclxuXHRcdFx0XHRcdFx0b3V0RGF0YS5wdXNoKDApXHJcblx0XHRcdFx0XHRcdGluRGF0YS5wdXNoKDApXHJcblx0XHRcdFx0XHRcdG91dE1vbmV5LnB1c2goMClcclxuXHRcdFx0XHRcdFx0aW5Nb25leS5wdXNoKDApXHJcblx0XHRcdFx0XHRcdG91dFJlYU1vbmV5LnB1c2goMClcclxuXHRcdFx0XHRcdFx0aW5SZWFNb25leS5wdXNoKDApXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRmb3IgKGxldCBpdGVtIG9mIHJlcykge1xyXG5cdFx0XHRcdFx0bGV0IGtleSA9IGNhdGVnb3JpZXMuaW5kZXhPZihpdGVtLmNyZWF0ZWRBdClcclxuXHRcdFx0XHRcdGlmIChpdGVtLnR5cGUgPT0gMSAmJiBrZXkgIT0gLTEpIHtcclxuXHRcdFx0XHRcdFx0aW5EYXRhW2tleV0gPSBpdGVtLl9zdW1OdW1cclxuXHRcdFx0XHRcdFx0aW5Nb25leVtrZXldID0gaXRlbS5fc3VtVG90YWxfbW9uZXlcclxuXHRcdFx0XHRcdFx0aW5SZWFNb25leVtrZXldID0gaXRlbS5fc3VtUmVhbGx5X3RvdGFsX21vbmV5XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRvdXREYXRhW2tleV0gPSBpdGVtLl9zdW1OdW1cclxuXHRcdFx0XHRcdFx0b3V0TW9uZXlba2V5XSA9IGl0ZW0uX3N1bVRvdGFsX21vbmV5XHJcblx0XHRcdFx0XHRcdG91dFJlYU1vbmV5W2tleV0gPSBpdGVtLl9zdW1SZWFsbHlfdG90YWxfbW9uZXlcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHNlcmllc0l0ZW0xLm5hbWUgPSBcIuWFpeW6k+mHj1wiXHJcblx0XHRcdFx0c2VyaWVzSXRlbTEuZGF0YSA9IGluRGF0YVxyXG5cdFx0XHRcdHNlcmllcy5wdXNoKHNlcmllc0l0ZW0xKVxyXG5cdFx0XHRcdGNvbHVtblNlcmllczEucHVzaChzZXJpZXNJdGVtMSlcclxuXHRcdFx0XHRzZXJpZXNJdGVtMi5uYW1lID0gXCLlh7rlupPph49cIlxyXG5cdFx0XHRcdHNlcmllc0l0ZW0yLmRhdGEgPSBvdXREYXRhXHJcblx0XHRcdFx0c2VyaWVzLnB1c2goc2VyaWVzSXRlbTIpXHJcblx0XHRcdFx0Y29sdW1uU2VyaWVzMi5wdXNoKHNlcmllc0l0ZW0yKVxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdHNlcmllc0l0ZW0zLm5hbWUgPSBcIuWHuuW6k+mHkeminVwiXHJcblx0XHRcdFx0c2VyaWVzSXRlbTMuZGF0YSA9IG91dE1vbmV5XHJcblx0XHRcdFx0c2VyaWVzMS5wdXNoKHNlcmllc0l0ZW0zKVxyXG5cdFx0XHRcdC8vY29sdW1uU2VyaWVzMS5wdXNoKHNlcmllc0l0ZW0zKVxyXG5cdFx0XHRcdHNlcmllc0l0ZW00Lm5hbWUgPSBcIuWFpeW6k+mHkeminVwiXHJcblx0XHRcdFx0c2VyaWVzSXRlbTQuZGF0YSA9IGluTW9uZXlcclxuXHRcdFx0XHRzZXJpZXMxLnB1c2goc2VyaWVzSXRlbTQpXHJcblx0XHRcdFx0XHJcblx0XHRcdFx0c2VyaWVzSXRlbTUubmFtZSA9IFwi5Ye65bqT6YeR6aKdXCJcclxuXHRcdFx0XHRzZXJpZXNJdGVtNS5kYXRhID0gb3V0UmVhTW9uZXlcclxuXHRcdFx0XHRjb2x1bW5TZXJpZXMyLnB1c2goc2VyaWVzSXRlbTUpXHJcblx0XHRcdFx0c2VyaWVzMi5wdXNoKHNlcmllc0l0ZW01KVxyXG5cdFx0XHRcdHNlcmllc0l0ZW02Lm5hbWUgPSBcIuWFpeW6k+mHkeminVwiXHJcblx0XHRcdFx0c2VyaWVzSXRlbTYuZGF0YSA9IGluUmVhTW9uZXlcclxuXHRcdFx0XHRzZXJpZXMyLnB1c2goc2VyaWVzSXRlbTYpXHJcblx0XHRcdFx0Y29sdW1uU2VyaWVzMS5wdXNoKHNlcmllc0l0ZW02KVxyXG5cdFx0XHRcdFxyXG5cclxuXHRcdFx0XHRsaW5lUmVzZXJ2ZS5jYXRlZ29yaWVzID0gY2F0ZWdvcmllc1xyXG5cdFx0XHRcdGxpbmVSZXNlcnZlLnNlcmllcyA9IHNlcmllc1xyXG5cdFx0XHRcdGxpbmVSZXNlcnZlLnNlcmllczEgPSBzZXJpZXMxXHJcblx0XHRcdFx0bGluZVJlc2VydmUuc2VyaWVzMiA9IHNlcmllczJcclxuXHRcdFx0XHRsaW5lUmVzZXJ2ZS5jb2x1bW5TZXJpZXMxID0gY29sdW1uU2VyaWVzMVxyXG5cdFx0XHRcdGxpbmVSZXNlcnZlLmNvbHVtblNlcmllczIgPSBjb2x1bW5TZXJpZXMyXHJcblxyXG5cdFx0XHRcdHJlc29sdmUobGluZVJlc2VydmUpXHJcblx0XHRcdFx0Ly9jb25zb2xlLmxvZyhsaW5lUmVzZXJ2ZSlcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0fSk7XHJcblx0fVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///682\n");

/***/ }),

/***/ 683:
/*!************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/utils/checker.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {module.exports = {\n  error: '',\n  isJSON: function isJSON(str) {\n    if (typeof str == 'string') {\n      try {\n        var obj = JSON.parse(str);\n        if (typeof obj == 'object' && obj) {\n          return true;\n        } else {\n          return false;\n        }\n      } catch (e) {\n        console.log(__f__('error：' + str + '!!!' + e, \" at utils\\\\checker.js:13\"));\n        return false;\n      }\n    }\n  },\n  isNumber: function isNumber(checkVal) {\n    var reg = /^-?[1-9][0-9]?.?[0-9]*$/;\n    return reg.test(checkVal);\n  } };\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vdXRpbHMvY2hlY2tlci5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZXJyb3IiLCJpc0pTT04iLCJzdHIiLCJvYmoiLCJKU09OIiwicGFyc2UiLCJlIiwiY29uc29sZSIsImxvZyIsImlzTnVtYmVyIiwiY2hlY2tWYWwiLCJyZWciLCJ0ZXN0Il0sIm1hcHBpbmdzIjoiNkNBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNoQkMsT0FBSyxFQUFDLEVBRFU7QUFFaEJDLFFBQU0sRUFBRyxnQkFBVUMsR0FBVixFQUFjO0FBQ3RCLFFBQUksT0FBT0EsR0FBUCxJQUFjLFFBQWxCLEVBQTRCO0FBQzNCLFVBQUk7QUFDSCxZQUFJQyxHQUFHLEdBQUNDLElBQUksQ0FBQ0MsS0FBTCxDQUFXSCxHQUFYLENBQVI7QUFDQSxZQUFHLE9BQU9DLEdBQVAsSUFBYyxRQUFkLElBQTBCQSxHQUE3QixFQUFrQztBQUNqQyxpQkFBTyxJQUFQO0FBQ0EsU0FGRCxNQUVLO0FBQ0osaUJBQU8sS0FBUDtBQUNBO0FBQ0QsT0FQRCxDQU9FLE9BQU1HLENBQU4sRUFBUztBQUNWQyxlQUFPLENBQUNDLEdBQVIsT0FBWSxXQUFTTixHQUFULEdBQWEsS0FBYixHQUFtQkksQ0FBL0I7QUFDQSxlQUFPLEtBQVA7QUFDQTtBQUNEO0FBQ0QsR0FoQmU7QUFpQmhCRyxVQUFRLEVBQUcsa0JBQVVDLFFBQVYsRUFBbUI7QUFDN0IsUUFBSUMsR0FBRyxHQUFHLHlCQUFWO0FBQ0EsV0FBT0EsR0FBRyxDQUFDQyxJQUFKLENBQVNGLFFBQVQsQ0FBUDtBQUNBLEdBcEJlLEVBQWpCLEMiLCJmaWxlIjoiNjgzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XHJcblx0ZXJyb3I6JycsXHJcblx0aXNKU09OIDogZnVuY3Rpb24gKHN0cil7XHJcblx0XHRpZiAodHlwZW9mIHN0ciA9PSAnc3RyaW5nJykge1xyXG5cdFx0XHR0cnkge1xyXG5cdFx0XHRcdHZhciBvYmo9SlNPTi5wYXJzZShzdHIpO1xyXG5cdFx0XHRcdGlmKHR5cGVvZiBvYmogPT0gJ29iamVjdCcgJiYgb2JqICl7XHJcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gY2F0Y2goZSkge1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKCdlcnJvcu+8micrc3RyKychISEnK2UpO1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0sXHJcblx0aXNOdW1iZXIgOiBmdW5jdGlvbiAoY2hlY2tWYWwpe1xyXG5cdFx0dmFyIHJlZyA9IC9eLT9bMS05XVswLTldPy4/WzAtOV0qJC87XHJcblx0XHRyZXR1cm4gcmVnLnRlc3QoY2hlY2tWYWwpO1xyXG5cdH1cclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///683\n");

/***/ }),

/***/ 7:
/*!***********************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/pages.json?{"type":"style"} ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"pages\": { \"pages/tarBar/index\": { \"navigationBarTitleText\": \"首页\" }, \"pages/common/goods_out/out_detail/out_detail\": { \"navigationBarTitleText\": \"出库详情\" }, \"pages/common/good_confrim/good_enter/good_enter\": { \"navigationBarTitleText\": \"入库详情\" }, \"pages/common/good_confrim/good_confrim\": { \"navigationBarTitleText\": \"产品入库\" }, \"pages/tarBar/manage\": { \"navigationBarTitleText\": \"管理\" }, \"pages/report/chart/chart\": { \"navigationBarTitleText\": \"报表\" }, \"pages/landing/landing\": { \"navigationBarTitleText\": \"登陆\" }, \"pages/register/register\": { \"navigationBarTitleText\": \"注册\" }, \"pages/tarBar/mine\": { \"navigationBarTitleText\": \"我的\" }, \"pages/report/operational_status/operational_status\": { \"navigationBarTitleText\": \"经营状况\" }, \"pages/report/EnteringHistory/EnteringHistory\": {}, \"pages/common/goods-select/goods-select\": { \"navigationBarTitleText\": \"选择产品\" }, \"pages/common/good_return/return_detail/return_detail\": { \"navigationBarTitleText\": \"退货详情\" }, \"pages/tarBar/report\": { \"navigationBarTitleText\": \"报表\" }, \"pages/report/EnteringHistory/detail/detail\": { \"navigationBarTitleText\": \"明细\" }, \"pages/common/goods_out/goods_out\": { \"navigationBarTitleText\": \"产品出库\" }, \"pages/common/good_return/good_return\": { \"navigationBarTitleText\": \"产品退货\" }, \"pages/common/good_count/good_count\": { \"navigationBarTitleText\": \"产品盘点\" }, \"pages/common/good_count/count_detail/count_detail\": { \"navigationBarTitleText\": \"盘点详情\" }, \"pages/staff_landing/staff_landing\": { \"navigationBarTitleText\": \"员工登陆\" }, \"pages/register/user_protocol/user_protocol\": { \"navigationBarTitleText\": \"用户协议\" }, \"pages/common/good_allocation/good_allocation\": { \"navigationBarTitleText\": \"库存盘点\" }, \"pages/common/good_allocation/allocation_detail/allocation_detail\": { \"navigationBarTitleText\": \"盘点详情\" }, \"pages/report/EnteringHistory/expressDet/expressDet\": {}, \"pages/mine/manual/manual\": { \"navigationBarTitleText\": \"操作手册\" }, \"pages/mine/manual/detail/detail\": { \"navigationBarTitleText\": \"详情\" }, \"pages/mine/update_history/update_history\": { \"navigationBarTitleText\": \"更新历史\" }, \"pages/mine/uploadFile/uploadFile\": { \"navigationBarTitleText\": \"批量操作\" }, \"pages/mine/vip/vip\": { \"navigationBarTitleText\": \"会员\", \"navigationBarBackgroundColor\": \"#1297fe\" }, \"pages/mine/logs/logs\": { \"navigationBarTitleText\": \"操作记录\" }, \"pages/mine/setting/setting\": { \"navigationBarTitleText\": \"我的设置\" }, \"pages/mine/about_us/about_us\": { \"navigationBarTitleText\": \"关于我们\" }, \"pages/mine/home_page/home_page\": { \"navigationBarTitleText\": \"账号信息\" }, \"pages/mine/warning_log/warning_log\": { \"navigationBarTitleText\": \"预警记录\" }, \"pages/manage/productCount/productCount\": { \"navigationBarTitleText\": \"产品统计\" }, \"pages/manage/operations/operations\": { \"navigationBarTitleText\": \"操作详情\" }, \"pages/manage/shops/record/record\": { \"navigationBarTitleText\": \"全部记录\" }, \"pages/manage/good_add/good_add\": { \"navigationBarTitleText\": \"新建产品\" }, \"pages/manage/custom/custom_detail/history/history\": { \"navigationBarTitleText\": \"销售明细\" }, \"pages/manage/goods/goods\": { \"navigationBarTitleText\": \"我的产品\" }, \"pages/manage/good_det/custom_detail/custom_detail\": { \"navigationBarTitleText\": \"客户统计\" }, \"pages/manage/custom/custom_detail/debt_history/debt_history\": { \"navigationBarTitleText\": \"收款列表\" }, \"pages/manage/custom/producer_detail/producer_detail\": { \"navigationBarTitleText\": \"供货商详情\" }, \"pages/manage/custom/custom_detail/custom_detail\": { \"navigationBarTitleText\": \"客户详情\" }, \"pages/manage/good_det/good_det\": { \"navigationBarTitleText\": \"产品详情\" }, \"pages/manage/warehouse/detail/detail\": { \"navigationBarTitleText\": \"仓库详情\" }, \"pages/manage/staff/staff\": { \"navigationBarTitleText\": \"员工管理\" }, \"pages/manage/shops/shops\": { \"navigationBarTitleText\": \"门店管理\" }, \"pages/manage/warehouse/warehouse\": { \"navigationBarTitleText\": \"仓库管理\" }, \"pages/manage/warehouse/add/add\": { \"navigationBarTitleText\": \"新增仓库\" }, \"pages/manage/shops/add/add\": { \"navigationBarTitleText\": \"新增门店\" }, \"pages/manage/staff/add/add\": { \"navigationBarTitleText\": \"新增员工\" }, \"pages/manage/custom/custom\": { \"navigationBarTitleText\": \"客户管理\" }, \"pages/manage/custom/add/add\": {}, \"pages/manage/category/category\": { \"navigationBarTitleText\": \"类别管理\" }, \"pages/manage/shops/staff_in/staff_in\": { \"navigationBarTitleText\": \"员工列表\" }, \"pages/manage/custom/producer_detail/history/history\": { \"navigationBarTitleText\": \"采购明细\" }, \"pages/manage/custom/producer_detail/debt_history/debt_history\": {}, \"pages/manage/warehouse/record/record\": { \"navigationBarTitleText\": \"仓库记录\" }, \"pages/manage/goods_add/goods_add\": { \"navigationBarTitleText\": \"多库存商品上传\" }, \"pages/manage/staff/history/history\": { \"navigationBarTitleText\": \"员工的操作记录\" }, \"pages/manage/good_det/edit_info/edit_info\": {}, \"pages/manage/good_det/edit_stock/edit_stock\": {}, \"pages/manage/staff/detail/detail\": {}, \"pages/manage/goods_add_MoreG/goods_add_MoreG\": {}, \"pages/manage/goods_add_MoreG/G_More/G_More\": {}, \"pages/manage/good_det/bad_history/bad_history\": {} }, \"globalStyle\": { \"navigationBarTextStyle\": \"white\", \"navigationBarTitleText\": \"库存表\", \"navigationBarBackgroundColor\": \"#426ab3\", \"backgroundColor\": \"#fff\" } };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),

/***/ 71:
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return normalizeComponent; });\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNzEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudCAoXG4gIHNjcmlwdEV4cG9ydHMsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciwgLyogc2VydmVyIG9ubHkgKi9cbiAgc2hhZG93TW9kZSAvKiB2dWUtY2xpIG9ubHkgKi9cbikge1xuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9ICdkYXRhLXYtJyArIHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gc2hhZG93TW9kZVxuICAgICAgPyBmdW5jdGlvbiAoKSB7IGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCkgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///71\n");

/***/ }),

/***/ 712:
/*!***********************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/uParse/src/libs/html2json.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar _wxDiscode = _interopRequireDefault(__webpack_require__(/*! ./wxDiscode */ 713));\nvar _htmlparser = _interopRequireDefault(__webpack_require__(/*! ./htmlparser */ 714));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} /**\r\n                                                                                                                                                                 * html2Json 改造来自: https://github.com/Jxck/html2json\r\n                                                                                                                                                                 *\r\n                                                                                                                                                                 *\r\n                                                                                                                                                                 * author: Di (微信小程序开发工程师)\r\n                                                                                                                                                                 * organization: WeAppDev(微信小程序开发论坛)(http://weappdev.com)\r\n                                                                                                                                                                 *               垂直微信小程序开发交流社区\r\n                                                                                                                                                                 *\r\n                                                                                                                                                                 * github地址: https://github.com/icindy/wxParse\r\n                                                                                                                                                                 *\r\n                                                                                                                                                                 * for: 微信小程序富文本解析\r\n                                                                                                                                                                 * detail : http://weappdev.com/t/wxparse-alpha0-1-html-markdown/184\r\n                                                                                                                                                                 */function makeMap(str) {var obj = {};var items = str.split(',');for (var i = 0; i < items.length; i += 1) {obj[items[i]] = true;}return obj;} // Block Elements - HTML 5\nvar block = makeMap('br,code,address,article,applet,aside,audio,blockquote,button,canvas,center,dd,del,dir,div,dl,dt,fieldset,figcaption,figure,footer,form,frameset,h1,h2,h3,h4,h5,h6,header,hgroup,hr,iframe,ins,isindex,li,map,menu,noframes,noscript,object,ol,output,p,pre,section,script,table,tbody,td,tfoot,th,thead,tr,ul,video'); // Inline Elements - HTML 5\nvar inline = makeMap('a,abbr,acronym,applet,b,basefont,bdo,big,button,cite,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,script,select,small,span,strike,strong,sub,sup,textarea,tt,u,var');\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar closeSelf = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr');\n\nfunction removeDOCTYPE(html) {\n  var isDocument = /<body.*>([^]*)<\\/body>/.test(html);\n  return isDocument ? RegExp.$1 : html;\n}\n\nfunction trimHtml(html) {\n  return html.\n  replace(/<!--.*?-->/gi, '').\n  replace(/\\/\\*.*?\\*\\//gi, '').\n  replace(/[ ]+</gi, '<').\n  replace(/<script[^]*<\\/script>/gi, '').\n  replace(/<style[^]*<\\/style>/gi, '');\n}\n\nfunction getScreenInfo() {\n  var screen = {};\n  wx.getSystemInfo({\n    success: function success(res) {\n      screen.width = res.windowWidth;\n      screen.height = res.windowHeight;\n    } });\n\n  return screen;\n}\n\nfunction html2json(html, customHandler, imageProp, host) {\n  // 处理字符串\n  html = removeDOCTYPE(html);\n  html = trimHtml(html);\n  html = _wxDiscode.default.strDiscode(html);\n  // 生成node节点\n  var bufArray = [];\n  var results = {\n    nodes: [],\n    imageUrls: [] };\n\n\n  var screen = getScreenInfo();\n  function Node(tag) {\n    this.node = 'element';\n    this.tag = tag;\n\n    this.$screen = screen;\n  }\n\n  (0, _htmlparser.default)(html, {\n    start: function start(tag, attrs, unary) {\n      // node for this element\n      var node = new Node(tag);\n\n      if (bufArray.length !== 0) {\n        var parent = bufArray[0];\n        if (parent.nodes === undefined) {\n          parent.nodes = [];\n        }\n      }\n\n      if (block[tag]) {\n        node.tagType = 'block';\n      } else if (inline[tag]) {\n        node.tagType = 'inline';\n      } else if (closeSelf[tag]) {\n        node.tagType = 'closeSelf';\n      }\n\n      node.attr = attrs.reduce(function (pre, attr) {var\n        name = attr.name;var\n        value = attr.value;\n        if (name === 'class') {\n          node.classStr = value;\n        }\n        // has multi attibutes\n        // make it array of attribute\n        if (name === 'style') {\n          node.styleStr = value;\n        }\n        if (value.match(/ /)) {\n          value = value.split(' ');\n        }\n\n        // if attr already exists\n        // merge it\n        if (pre[name]) {\n          if (Array.isArray(pre[name])) {\n            // already array, push to last\n            pre[name].push(value);\n          } else {\n            // single value, make it array\n            pre[name] = [pre[name], value];\n          }\n        } else {\n          // not exist, put it\n          pre[name] = value;\n        }\n\n        return pre;\n      }, {});\n\n      // 优化样式相关属性\n      if (node.classStr) {\n        node.classStr += \" \".concat(node.tag);\n      } else {\n        node.classStr = node.tag;\n      }\n      if (node.tagType === 'inline') {\n        node.classStr += ' inline';\n      }\n\n      // 对img添加额外数据\n      if (node.tag === 'img') {\n        var imgUrl = node.attr.src;\n        imgUrl = _wxDiscode.default.urlToHttpUrl(imgUrl, imageProp.domain);\n        Object.assign(node.attr, imageProp, {\n          src: imgUrl || '' });\n\n        if (imgUrl) {\n          results.imageUrls.push(imgUrl);\n        }\n      }\n\n      // 处理a标签属性\n      if (node.tag === 'a') {\n        node.attr.href = node.attr.href || '';\n      }\n\n      // 处理font标签样式属性\n      if (node.tag === 'font') {\n        var fontSize = [\n        'x-small',\n        'small',\n        'medium',\n        'large',\n        'x-large',\n        'xx-large',\n        '-webkit-xxx-large'];\n\n        var styleAttrs = {\n          color: 'color',\n          face: 'font-family',\n          size: 'font-size' };\n\n        if (!node.styleStr) node.styleStr = '';\n        Object.keys(styleAttrs).forEach(function (key) {\n          if (node.attr[key]) {\n            var value = key === 'size' ? fontSize[node.attr[key] - 1] : node.attr[key];\n            node.styleStr += \"\".concat(styleAttrs[key], \": \").concat(value, \";\");\n          }\n        });\n      }\n\n      // 临时记录source资源\n      if (node.tag === 'source') {\n        results.source = node.attr.src;\n      }\n\n      if (customHandler.start) {\n        customHandler.start(node, results);\n      }\n\n      if (unary) {\n        // if this tag doesn't have end tag\n        // like <img src=\"hoge.png\"/>\n        // add to parents\n        var _parent = bufArray[0] || results;\n        if (_parent.nodes === undefined) {\n          _parent.nodes = [];\n        }\n        _parent.nodes.push(node);\n      } else {\n        bufArray.unshift(node);\n      }\n    },\n    end: function end(tag) {\n      // merge into parent tag\n      var node = bufArray.shift();\n      if (node.tag !== tag) {\n        console.error(__f__('invalid state: mismatch end tag', \" at components\\\\uParse\\\\src\\\\libs\\\\html2json.js:211\"));\n      }\n\n      // 当有缓存source资源时于于video补上src资源\n      if (node.tag === 'video' && results.source) {\n        node.attr.src = results.source;\n        delete results.source;\n      }\n\n      if (customHandler.end) {\n        customHandler.end(node, results);\n      }\n\n      if (bufArray.length === 0) {\n        results.nodes.push(node);\n      } else {\n        var parent = bufArray[0];\n        if (!parent.nodes) {\n          parent.nodes = [];\n        }\n        parent.nodes.push(node);\n      }\n    },\n    chars: function chars(text) {\n      if (!text.trim()) return;\n\n      var node = {\n        node: 'text',\n        text: text };\n\n\n      if (customHandler.chars) {\n        customHandler.chars(node, results);\n      }\n\n      if (bufArray.length === 0) {\n        results.nodes.push(node);\n      } else {\n        var parent = bufArray[0];\n        if (parent.nodes === undefined) {\n          parent.nodes = [];\n        }\n        parent.nodes.push(node);\n      }\n    } });\n\n\n  return results;\n}var _default =\n\nhtml2json;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///712\n");

/***/ }),

/***/ 713:
/*!***********************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/uParse/src/libs/wxDiscode.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; // HTML 支持的数学符号\nfunction strNumDiscode(str) {\n  str = str.replace(/&forall;/g, '∀');\n  str = str.replace(/&part;/g, '∂');\n  str = str.replace(/&exist;/g, '∃');\n  str = str.replace(/&empty;/g, '∅');\n  str = str.replace(/&nabla;/g, '∇');\n  str = str.replace(/&isin;/g, '∈');\n  str = str.replace(/&notin;/g, '∉');\n  str = str.replace(/&ni;/g, '∋');\n  str = str.replace(/&prod;/g, '∏');\n  str = str.replace(/&sum;/g, '∑');\n  str = str.replace(/&minus;/g, '−');\n  str = str.replace(/&lowast;/g, '∗');\n  str = str.replace(/&radic;/g, '√');\n  str = str.replace(/&prop;/g, '∝');\n  str = str.replace(/&infin;/g, '∞');\n  str = str.replace(/&ang;/g, '∠');\n  str = str.replace(/&and;/g, '∧');\n  str = str.replace(/&or;/g, '∨');\n  str = str.replace(/&cap;/g, '∩');\n  str = str.replace(/&cup;/g, '∪');\n  str = str.replace(/&int;/g, '∫');\n  str = str.replace(/&there4;/g, '∴');\n  str = str.replace(/&sim;/g, '∼');\n  str = str.replace(/&cong;/g, '≅');\n  str = str.replace(/&asymp;/g, '≈');\n  str = str.replace(/&ne;/g, '≠');\n  str = str.replace(/&le;/g, '≤');\n  str = str.replace(/&ge;/g, '≥');\n  str = str.replace(/&sub;/g, '⊂');\n  str = str.replace(/&sup;/g, '⊃');\n  str = str.replace(/&nsub;/g, '⊄');\n  str = str.replace(/&sube;/g, '⊆');\n  str = str.replace(/&supe;/g, '⊇');\n  str = str.replace(/&oplus;/g, '⊕');\n  str = str.replace(/&otimes;/g, '⊗');\n  str = str.replace(/&perp;/g, '⊥');\n  str = str.replace(/&sdot;/g, '⋅');\n  return str;\n}\n\n// HTML 支持的希腊字母\nfunction strGreeceDiscode(str) {\n  str = str.replace(/&Alpha;/g, 'Α');\n  str = str.replace(/&Beta;/g, 'Β');\n  str = str.replace(/&Gamma;/g, 'Γ');\n  str = str.replace(/&Delta;/g, 'Δ');\n  str = str.replace(/&Epsilon;/g, 'Ε');\n  str = str.replace(/&Zeta;/g, 'Ζ');\n  str = str.replace(/&Eta;/g, 'Η');\n  str = str.replace(/&Theta;/g, 'Θ');\n  str = str.replace(/&Iota;/g, 'Ι');\n  str = str.replace(/&Kappa;/g, 'Κ');\n  str = str.replace(/&Lambda;/g, 'Λ');\n  str = str.replace(/&Mu;/g, 'Μ');\n  str = str.replace(/&Nu;/g, 'Ν');\n  str = str.replace(/&Xi;/g, 'Ν');\n  str = str.replace(/&Omicron;/g, 'Ο');\n  str = str.replace(/&Pi;/g, 'Π');\n  str = str.replace(/&Rho;/g, 'Ρ');\n  str = str.replace(/&Sigma;/g, 'Σ');\n  str = str.replace(/&Tau;/g, 'Τ');\n  str = str.replace(/&Upsilon;/g, 'Υ');\n  str = str.replace(/&Phi;/g, 'Φ');\n  str = str.replace(/&Chi;/g, 'Χ');\n  str = str.replace(/&Psi;/g, 'Ψ');\n  str = str.replace(/&Omega;/g, 'Ω');\n\n  str = str.replace(/&alpha;/g, 'α');\n  str = str.replace(/&beta;/g, 'β');\n  str = str.replace(/&gamma;/g, 'γ');\n  str = str.replace(/&delta;/g, 'δ');\n  str = str.replace(/&epsilon;/g, 'ε');\n  str = str.replace(/&zeta;/g, 'ζ');\n  str = str.replace(/&eta;/g, 'η');\n  str = str.replace(/&theta;/g, 'θ');\n  str = str.replace(/&iota;/g, 'ι');\n  str = str.replace(/&kappa;/g, 'κ');\n  str = str.replace(/&lambda;/g, 'λ');\n  str = str.replace(/&mu;/g, 'μ');\n  str = str.replace(/&nu;/g, 'ν');\n  str = str.replace(/&xi;/g, 'ξ');\n  str = str.replace(/&omicron;/g, 'ο');\n  str = str.replace(/&pi;/g, 'π');\n  str = str.replace(/&rho;/g, 'ρ');\n  str = str.replace(/&sigmaf;/g, 'ς');\n  str = str.replace(/&sigma;/g, 'σ');\n  str = str.replace(/&tau;/g, 'τ');\n  str = str.replace(/&upsilon;/g, 'υ');\n  str = str.replace(/&phi;/g, 'φ');\n  str = str.replace(/&chi;/g, 'χ');\n  str = str.replace(/&psi;/g, 'ψ');\n  str = str.replace(/&omega;/g, 'ω');\n  str = str.replace(/&thetasym;/g, 'ϑ');\n  str = str.replace(/&upsih;/g, 'ϒ');\n  str = str.replace(/&piv;/g, 'ϖ');\n  str = str.replace(/&middot;/g, '·');\n  return str;\n}\n\nfunction strcharacterDiscode(str) {\n  // 加入常用解析\n  str = str.replace(/&nbsp;/g, ' ');\n  str = str.replace(/&ensp;/g, ' ');\n  str = str.replace(/&emsp;/g, '　');\n  str = str.replace(/&quot;/g, \"'\");\n  str = str.replace(/&amp;/g, '&');\n  str = str.replace(/&lt;/g, '<');\n  str = str.replace(/&gt;/g, '>');\n  str = str.replace(/&#8226;/g, '•');\n\n  return str;\n}\n\n// HTML 支持的其他实体\nfunction strOtherDiscode(str) {\n  str = str.replace(/&OElig;/g, 'Œ');\n  str = str.replace(/&oelig;/g, 'œ');\n  str = str.replace(/&Scaron;/g, 'Š');\n  str = str.replace(/&scaron;/g, 'š');\n  str = str.replace(/&Yuml;/g, 'Ÿ');\n  str = str.replace(/&fnof;/g, 'ƒ');\n  str = str.replace(/&circ;/g, 'ˆ');\n  str = str.replace(/&tilde;/g, '˜');\n  str = str.replace(/&ensp;/g, '');\n  str = str.replace(/&emsp;/g, '');\n  str = str.replace(/&thinsp;/g, '');\n  str = str.replace(/&zwnj;/g, '');\n  str = str.replace(/&zwj;/g, '');\n  str = str.replace(/&lrm;/g, '');\n  str = str.replace(/&rlm;/g, '');\n  str = str.replace(/&ndash;/g, '–');\n  str = str.replace(/&mdash;/g, '—');\n  str = str.replace(/&lsquo;/g, '‘');\n  str = str.replace(/&rsquo;/g, '’');\n  str = str.replace(/&sbquo;/g, '‚');\n  str = str.replace(/&ldquo;/g, '“');\n  str = str.replace(/&rdquo;/g, '”');\n  str = str.replace(/&bdquo;/g, '„');\n  str = str.replace(/&dagger;/g, '†');\n  str = str.replace(/&Dagger;/g, '‡');\n  str = str.replace(/&bull;/g, '•');\n  str = str.replace(/&hellip;/g, '…');\n  str = str.replace(/&permil;/g, '‰');\n  str = str.replace(/&prime;/g, '′');\n  str = str.replace(/&Prime;/g, '″');\n  str = str.replace(/&lsaquo;/g, '‹');\n  str = str.replace(/&rsaquo;/g, '›');\n  str = str.replace(/&oline;/g, '‾');\n  str = str.replace(/&euro;/g, '€');\n  str = str.replace(/&trade;/g, '™');\n\n  str = str.replace(/&larr;/g, '←');\n  str = str.replace(/&uarr;/g, '↑');\n  str = str.replace(/&rarr;/g, '→');\n  str = str.replace(/&darr;/g, '↓');\n  str = str.replace(/&harr;/g, '↔');\n  str = str.replace(/&crarr;/g, '↵');\n  str = str.replace(/&lceil;/g, '⌈');\n  str = str.replace(/&rceil;/g, '⌉');\n\n  str = str.replace(/&lfloor;/g, '⌊');\n  str = str.replace(/&rfloor;/g, '⌋');\n  str = str.replace(/&loz;/g, '◊');\n  str = str.replace(/&spades;/g, '♠');\n  str = str.replace(/&clubs;/g, '♣');\n  str = str.replace(/&hearts;/g, '♥');\n\n  str = str.replace(/&diams;/g, '♦');\n  str = str.replace(/&#39;/g, \"'\");\n  return str;\n}\n\nfunction strDiscode(str) {\n  str = strNumDiscode(str);\n  str = strGreeceDiscode(str);\n  str = strcharacterDiscode(str);\n  str = strOtherDiscode(str);\n  return str;\n}\n\nfunction urlToHttpUrl(url, domain) {\n  if (/^\\/\\//.test(url)) {\n    return \"https:\".concat(url);\n  } else if (/^\\//.test(url)) {\n    return \"https://\".concat(domain).concat(url);\n  }\n  return url;\n}var _default =\n\n{\n  strDiscode: strDiscode,\n  urlToHttpUrl: urlToHttpUrl };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///713\n");

/***/ }),

/***/ 714:
/*!************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/uParse/src/libs/htmlparser.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; /**\r\n                                                                                                      *\r\n                                                                                                      * htmlParser改造自: https://github.com/blowsie/Pure-JavaScript-HTML5-Parser\r\n                                                                                                      *\r\n                                                                                                      * author: Di (微信小程序开发工程师)\r\n                                                                                                      * organization: WeAppDev(微信小程序开发论坛)(http://weappdev.com)\r\n                                                                                                      *               垂直微信小程序开发交流社区\r\n                                                                                                      *\r\n                                                                                                      * github地址: https://github.com/icindy/wxParse\r\n                                                                                                      *\r\n                                                                                                      * for: 微信小程序富文本解析\r\n                                                                                                      * detail : http://weappdev.com/t/wxparse-alpha0-1-html-markdown/184\r\n                                                                                                      */\n// Regular Expressions for parsing tags and attributes\n\nvar startTag = /^<([-A-Za-z0-9_]+)((?:\\s+[a-zA-Z0-9_:][-a-zA-Z0-9_:.]*(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/;\nvar endTag = /^<\\/([-A-Za-z0-9_]+)[^>]*>/;\nvar attr = /([a-zA-Z0-9_:][-a-zA-Z0-9_:.]*)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?/g;\n\nfunction makeMap(str) {\n  var obj = {};\n  var items = str.split(',');\n  for (var i = 0; i < items.length; i += 1) {obj[items[i]] = true;}\n  return obj;\n}\n\n// Empty Elements - HTML 5\nvar empty = makeMap('area,base,basefont,br,col,frame,hr,img,input,link,meta,param,embed,command,keygen,source,track,wbr');\n\n// Block Elements - HTML 5\nvar block = makeMap('address,code,article,applet,aside,audio,blockquote,button,canvas,center,dd,del,dir,div,dl,dt,fieldset,figcaption,figure,footer,form,frameset,h1,h2,h3,h4,h5,h6,header,hgroup,hr,iframe,ins,isindex,li,map,menu,noframes,noscript,object,ol,output,p,pre,section,script,table,tbody,td,tfoot,th,thead,tr,ul,video');\n\n// Inline Elements - HTML 5\nvar inline = makeMap('a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,script,select,small,span,strike,strong,sub,sup,textarea,tt,u,var');\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar closeSelf = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr');\n\n// Attributes that have their values filled in disabled=\"disabled\"\nvar fillAttrs = makeMap('checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected');\n\nfunction HTMLParser(html, handler) {\n  var index;\n  var chars;\n  var match;\n  var last = html;\n  var stack = [];\n\n  stack.last = function () {return stack[stack.length - 1];};\n\n  function parseEndTag(tag, tagName) {\n    // If no tag name is provided, clean shop\n    var pos;\n    if (!tagName) {\n      pos = 0;\n    } else {\n      // Find the closest opened tag of the same type\n      tagName = tagName.toLowerCase();\n      for (pos = stack.length - 1; pos >= 0; pos -= 1) {\n        if (stack[pos] === tagName) break;\n      }\n    }\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i -= 1) {\n        if (handler.end) handler.end(stack[i]);\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n    }\n  }\n\n  function parseStartTag(tag, tagName, rest, unary) {\n    tagName = tagName.toLowerCase();\n\n    if (block[tagName]) {\n      while (stack.last() && inline[stack.last()]) {\n        parseEndTag('', stack.last());\n      }\n    }\n\n    if (closeSelf[tagName] && stack.last() === tagName) {\n      parseEndTag('', tagName);\n    }\n\n    unary = empty[tagName] || !!unary;\n\n    if (!unary) stack.push(tagName);\n\n    if (handler.start) {\n      var attrs = [];\n\n      rest.replace(attr, function genAttr(matches, name) {\n        var value = arguments[2] || arguments[3] || arguments[4] || (fillAttrs[name] ? name : '');\n\n        attrs.push({\n          name: name,\n          value: value,\n          escaped: value.replace(/(^|[^\\\\])\"/g, '$1\\\\\"') // \"\n        });\n      });\n\n      if (handler.start) {\n        handler.start(tagName, attrs, unary);\n      }\n    }\n  }\n\n  while (html) {\n    chars = true;\n\n    if (html.indexOf('</') === 0) {\n      match = html.match(endTag);\n\n      if (match) {\n        html = html.substring(match[0].length);\n        match[0].replace(endTag, parseEndTag);\n        chars = false;\n      }\n\n      // start tag\n    } else if (html.indexOf('<') === 0) {\n      match = html.match(startTag);\n\n      if (match) {\n        html = html.substring(match[0].length);\n        match[0].replace(startTag, parseStartTag);\n        chars = false;\n      }\n    }\n\n    if (chars) {\n      index = html.indexOf('<');\n      var text = '';\n      while (index === 0) {\n        text += '<';\n        html = html.substring(1);\n        index = html.indexOf('<');\n      }\n      text += index < 0 ? html : html.substring(0, index);\n      html = index < 0 ? '' : html.substring(index);\n\n      if (handler.chars) handler.chars(text);\n    }\n\n    if (html === last) throw new Error(\"Parse Error: \".concat(html));\n    last = html;\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n}var _default =\n\nHTMLParser;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///714\n");

/***/ }),

/***/ 748:
/*!***************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-qrcode/qrcode.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var QRCode = {};\n(function () {\n  /**\r\n               * 获取单个字符的utf8编码\r\n               * unicode BMP平面约65535个字符\r\n               * @param {num} code\r\n               * return {array}\r\n               */\n  function unicodeFormat8(code) {\n    // 1 byte\n    var c0, c1, c2;\n    if (code < 128) {\n      return [code];\n      // 2 bytes\n    } else if (code < 2048) {\n      c0 = 192 + (code >> 6);\n      c1 = 128 + (code & 63);\n      return [c0, c1];\n      // 3 bytes\n    } else {\n      c0 = 224 + (code >> 12);\n      c1 = 128 + (code >> 6 & 63);\n      c2 = 128 + (code & 63);\n      return [c0, c1, c2];\n    }\n  }\n  /**\r\n     * 获取字符串的utf8编码字节串\r\n     * @param {string} string\r\n     * @return {array}\r\n     */\n  function getUTF8Bytes(string) {\n    var utf8codes = [];\n    for (var i = 0; i < string.length; i++) {\n      var code = string.charCodeAt(i);\n      var utf8 = unicodeFormat8(code);\n      for (var j = 0; j < utf8.length; j++) {\n        utf8codes.push(utf8[j]);\n      }\n    }\n    return utf8codes;\n  }\n  /**\r\n     * 二维码算法实现\r\n     * @param {string} data              要编码的信息字符串\r\n     * @param {num} errorCorrectLevel 纠错等级\r\n     */\n  function QRCodeAlg(data, errorCorrectLevel) {\n    this.typeNumber = -1; //版本\n    this.errorCorrectLevel = errorCorrectLevel;\n    this.modules = null; //二维矩阵，存放最终结果\n    this.moduleCount = 0; //矩阵大小\n    this.dataCache = null; //数据缓存\n    this.rsBlocks = null; //版本数据信息\n    this.totalDataCount = -1; //可使用的数据量\n    this.data = data;\n    this.utf8bytes = getUTF8Bytes(data);\n    this.make();\n  }\n  QRCodeAlg.prototype = {\n    constructor: QRCodeAlg,\n    /**\r\n                             * 获取二维码矩阵大小\r\n                             * @return {num} 矩阵大小\r\n                             */\n    getModuleCount: function getModuleCount() {\n      return this.moduleCount;\n    },\n    /**\r\n        * 编码\r\n        */\n    make: function make() {\n      this.getRightType();\n      this.dataCache = this.createData();\n      this.createQrcode();\n    },\n    /**\r\n        * 设置二位矩阵功能图形\r\n        * @param  {bool} test 表示是否在寻找最好掩膜阶段\r\n        * @param  {num} maskPattern 掩膜的版本\r\n        */\n    makeImpl: function makeImpl(maskPattern) {\n      this.moduleCount = this.typeNumber * 4 + 17;\n      this.modules = new Array(this.moduleCount);\n      for (var row = 0; row < this.moduleCount; row++) {\n        this.modules[row] = new Array(this.moduleCount);\n      }\n      this.setupPositionProbePattern(0, 0);\n      this.setupPositionProbePattern(this.moduleCount - 7, 0);\n      this.setupPositionProbePattern(0, this.moduleCount - 7);\n      this.setupPositionAdjustPattern();\n      this.setupTimingPattern();\n      this.setupTypeInfo(true, maskPattern);\n      if (this.typeNumber >= 7) {\n        this.setupTypeNumber(true);\n      }\n      this.mapData(this.dataCache, maskPattern);\n    },\n    /**\r\n        * 设置二维码的位置探测图形\r\n        * @param  {num} row 探测图形的中心横坐标\r\n        * @param  {num} col 探测图形的中心纵坐标\r\n        */\n    setupPositionProbePattern: function setupPositionProbePattern(row, col) {\n      for (var r = -1; r <= 7; r++) {\n        if (row + r <= -1 || this.moduleCount <= row + r) continue;\n        for (var c = -1; c <= 7; c++) {\n          if (col + c <= -1 || this.moduleCount <= col + c) continue;\n          if (0 <= r && r <= 6 && (c == 0 || c == 6) || 0 <= c && c <= 6 && (r == 0 || r == 6) || 2 <= r && r <= 4 && 2 <= c && c <= 4) {\n            this.modules[row + r][col + c] = true;\n          } else {\n            this.modules[row + r][col + c] = false;\n          }\n        }\n      }\n    },\n    /**\r\n        * 创建二维码\r\n        * @return {[type]} [description]\r\n        */\n    createQrcode: function createQrcode() {\n      var minLostPoint = 0;\n      var pattern = 0;\n      var bestModules = null;\n      for (var i = 0; i < 8; i++) {\n        this.makeImpl(i);\n        var lostPoint = QRUtil.getLostPoint(this);\n        if (i == 0 || minLostPoint > lostPoint) {\n          minLostPoint = lostPoint;\n          pattern = i;\n          bestModules = this.modules;\n        }\n      }\n      this.modules = bestModules;\n      this.setupTypeInfo(false, pattern);\n      if (this.typeNumber >= 7) {\n        this.setupTypeNumber(false);\n      }\n    },\n    /**\r\n        * 设置定位图形\r\n        * @return {[type]} [description]\r\n        */\n    setupTimingPattern: function setupTimingPattern() {\n      for (var r = 8; r < this.moduleCount - 8; r++) {\n        if (this.modules[r][6] != null) {\n          continue;\n        }\n        this.modules[r][6] = r % 2 == 0;\n        if (this.modules[6][r] != null) {\n          continue;\n        }\n        this.modules[6][r] = r % 2 == 0;\n      }\n    },\n    /**\r\n        * 设置矫正图形\r\n        * @return {[type]} [description]\r\n        */\n    setupPositionAdjustPattern: function setupPositionAdjustPattern() {\n      var pos = QRUtil.getPatternPosition(this.typeNumber);\n      for (var i = 0; i < pos.length; i++) {\n        for (var j = 0; j < pos.length; j++) {\n          var row = pos[i];\n          var col = pos[j];\n          if (this.modules[row][col] != null) {\n            continue;\n          }\n          for (var r = -2; r <= 2; r++) {\n            for (var c = -2; c <= 2; c++) {\n              if (r == -2 || r == 2 || c == -2 || c == 2 || r == 0 && c == 0) {\n                this.modules[row + r][col + c] = true;\n              } else {\n                this.modules[row + r][col + c] = false;\n              }\n            }\n          }\n        }\n      }\n    },\n    /**\r\n        * 设置版本信息（7以上版本才有）\r\n        * @param  {bool} test 是否处于判断最佳掩膜阶段\r\n        * @return {[type]}      [description]\r\n        */\n    setupTypeNumber: function setupTypeNumber(test) {\n      var bits = QRUtil.getBCHTypeNumber(this.typeNumber);\n      for (var i = 0; i < 18; i++) {\n        var mod = !test && (bits >> i & 1) == 1;\n        this.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;\n        this.modules[i % 3 + this.moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\n      }\n    },\n    /**\r\n        * 设置格式信息（纠错等级和掩膜版本）\r\n        * @param  {bool} test\r\n        * @param  {num} maskPattern 掩膜版本\r\n        * @return {}\r\n        */\n    setupTypeInfo: function setupTypeInfo(test, maskPattern) {\n      var data = QRErrorCorrectLevel[this.errorCorrectLevel] << 3 | maskPattern;\n      var bits = QRUtil.getBCHTypeInfo(data);\n      // vertical\n      for (var i = 0; i < 15; i++) {\n        var mod = !test && (bits >> i & 1) == 1;\n        if (i < 6) {\n          this.modules[i][8] = mod;\n        } else if (i < 8) {\n          this.modules[i + 1][8] = mod;\n        } else {\n          this.modules[this.moduleCount - 15 + i][8] = mod;\n        }\n        // horizontal\n        var mod = !test && (bits >> i & 1) == 1;\n        if (i < 8) {\n          this.modules[8][this.moduleCount - i - 1] = mod;\n        } else if (i < 9) {\n          this.modules[8][15 - i - 1 + 1] = mod;\n        } else {\n          this.modules[8][15 - i - 1] = mod;\n        }\n      }\n      // fixed module\n      this.modules[this.moduleCount - 8][8] = !test;\n    },\n    /**\r\n        * 数据编码\r\n        * @return {[type]} [description]\r\n        */\n    createData: function createData() {\n      var buffer = new QRBitBuffer();\n      var lengthBits = this.typeNumber > 9 ? 16 : 8;\n      buffer.put(4, 4); //添加模式\n      buffer.put(this.utf8bytes.length, lengthBits);\n      for (var i = 0, l = this.utf8bytes.length; i < l; i++) {\n        buffer.put(this.utf8bytes[i], 8);\n      }\n      if (buffer.length + 4 <= this.totalDataCount * 8) {\n        buffer.put(0, 4);\n      }\n      // padding\n      while (buffer.length % 8 != 0) {\n        buffer.putBit(false);\n      }\n      // padding\n      while (true) {\n        if (buffer.length >= this.totalDataCount * 8) {\n          break;\n        }\n        buffer.put(QRCodeAlg.PAD0, 8);\n        if (buffer.length >= this.totalDataCount * 8) {\n          break;\n        }\n        buffer.put(QRCodeAlg.PAD1, 8);\n      }\n      return this.createBytes(buffer);\n    },\n    /**\r\n        * 纠错码编码\r\n        * @param  {buffer} buffer 数据编码\r\n        * @return {[type]}\r\n        */\n    createBytes: function createBytes(buffer) {\n      var offset = 0;\n      var maxDcCount = 0;\n      var maxEcCount = 0;\n      var length = this.rsBlock.length / 3;\n      var rsBlocks = new Array();\n      for (var i = 0; i < length; i++) {\n        var count = this.rsBlock[i * 3 + 0];\n        var totalCount = this.rsBlock[i * 3 + 1];\n        var dataCount = this.rsBlock[i * 3 + 2];\n        for (var j = 0; j < count; j++) {\n          rsBlocks.push([dataCount, totalCount]);\n        }\n      }\n      var dcdata = new Array(rsBlocks.length);\n      var ecdata = new Array(rsBlocks.length);\n      for (var r = 0; r < rsBlocks.length; r++) {\n        var dcCount = rsBlocks[r][0];\n        var ecCount = rsBlocks[r][1] - dcCount;\n        maxDcCount = Math.max(maxDcCount, dcCount);\n        maxEcCount = Math.max(maxEcCount, ecCount);\n        dcdata[r] = new Array(dcCount);\n        for (var i = 0; i < dcdata[r].length; i++) {\n          dcdata[r][i] = 0xff & buffer.buffer[i + offset];\n        }\n        offset += dcCount;\n        var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);\n        var rawPoly = new QRPolynomial(dcdata[r], rsPoly.getLength() - 1);\n        var modPoly = rawPoly.mod(rsPoly);\n        ecdata[r] = new Array(rsPoly.getLength() - 1);\n        for (var i = 0; i < ecdata[r].length; i++) {\n          var modIndex = i + modPoly.getLength() - ecdata[r].length;\n          ecdata[r][i] = modIndex >= 0 ? modPoly.get(modIndex) : 0;\n        }\n      }\n      var data = new Array(this.totalDataCount);\n      var index = 0;\n      for (var i = 0; i < maxDcCount; i++) {\n        for (var r = 0; r < rsBlocks.length; r++) {\n          if (i < dcdata[r].length) {\n            data[index++] = dcdata[r][i];\n          }\n        }\n      }\n      for (var i = 0; i < maxEcCount; i++) {\n        for (var r = 0; r < rsBlocks.length; r++) {\n          if (i < ecdata[r].length) {\n            data[index++] = ecdata[r][i];\n          }\n        }\n      }\n      return data;\n\n    },\n    /**\r\n        * 布置模块，构建最终信息\r\n        * @param  {} data\r\n        * @param  {} maskPattern\r\n        * @return {}\r\n        */\n    mapData: function mapData(data, maskPattern) {\n      var inc = -1;\n      var row = this.moduleCount - 1;\n      var bitIndex = 7;\n      var byteIndex = 0;\n      for (var col = this.moduleCount - 1; col > 0; col -= 2) {\n        if (col == 6) col--;\n        while (true) {\n          for (var c = 0; c < 2; c++) {\n            if (this.modules[row][col - c] == null) {\n              var dark = false;\n              if (byteIndex < data.length) {\n                dark = (data[byteIndex] >>> bitIndex & 1) == 1;\n              }\n              var mask = QRUtil.getMask(maskPattern, row, col - c);\n              if (mask) {\n                dark = !dark;\n              }\n              this.modules[row][col - c] = dark;\n              bitIndex--;\n              if (bitIndex == -1) {\n                byteIndex++;\n                bitIndex = 7;\n              }\n            }\n          }\n          row += inc;\n          if (row < 0 || this.moduleCount <= row) {\n            row -= inc;\n            inc = -inc;\n            break;\n          }\n        }\n      }\n    } };\n\n  /**\r\n          * 填充字段\r\n          */\n  QRCodeAlg.PAD0 = 0xEC;\n  QRCodeAlg.PAD1 = 0x11;\n  //---------------------------------------------------------------------\n  // 纠错等级对应的编码\n  //---------------------------------------------------------------------\n  var QRErrorCorrectLevel = [1, 0, 3, 2];\n  //---------------------------------------------------------------------\n  // 掩膜版本\n  //---------------------------------------------------------------------\n  var QRMaskPattern = {\n    PATTERN000: 0,\n    PATTERN001: 1,\n    PATTERN010: 2,\n    PATTERN011: 3,\n    PATTERN100: 4,\n    PATTERN101: 5,\n    PATTERN110: 6,\n    PATTERN111: 7 };\n\n  //---------------------------------------------------------------------\n  // 工具类\n  //---------------------------------------------------------------------\n  var QRUtil = {\n    /*\r\n                 每个版本矫正图形的位置\r\n                  */\n    PATTERN_POSITION_TABLE: [\n    [],\n    [6, 18],\n    [6, 22],\n    [6, 26],\n    [6, 30],\n    [6, 34],\n    [6, 22, 38],\n    [6, 24, 42],\n    [6, 26, 46],\n    [6, 28, 50],\n    [6, 30, 54],\n    [6, 32, 58],\n    [6, 34, 62],\n    [6, 26, 46, 66],\n    [6, 26, 48, 70],\n    [6, 26, 50, 74],\n    [6, 30, 54, 78],\n    [6, 30, 56, 82],\n    [6, 30, 58, 86],\n    [6, 34, 62, 90],\n    [6, 28, 50, 72, 94],\n    [6, 26, 50, 74, 98],\n    [6, 30, 54, 78, 102],\n    [6, 28, 54, 80, 106],\n    [6, 32, 58, 84, 110],\n    [6, 30, 58, 86, 114],\n    [6, 34, 62, 90, 118],\n    [6, 26, 50, 74, 98, 122],\n    [6, 30, 54, 78, 102, 126],\n    [6, 26, 52, 78, 104, 130],\n    [6, 30, 56, 82, 108, 134],\n    [6, 34, 60, 86, 112, 138],\n    [6, 30, 58, 86, 114, 142],\n    [6, 34, 62, 90, 118, 146],\n    [6, 30, 54, 78, 102, 126, 150],\n    [6, 24, 50, 76, 102, 128, 154],\n    [6, 28, 54, 80, 106, 132, 158],\n    [6, 32, 58, 84, 110, 136, 162],\n    [6, 26, 54, 82, 110, 138, 166],\n    [6, 30, 58, 86, 114, 142, 170]],\n\n    G15: 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0,\n    G18: 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0,\n    G15_MASK: 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1,\n    /*\r\n                                                             BCH编码格式信息\r\n                                                              */\n    getBCHTypeInfo: function getBCHTypeInfo(data) {\n      var d = data << 10;\n      while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {\n        d ^= QRUtil.G15 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15);\n      }\n      return (data << 10 | d) ^ QRUtil.G15_MASK;\n    },\n    /*\r\n       BCH编码版本信息\r\n        */\n    getBCHTypeNumber: function getBCHTypeNumber(data) {\n      var d = data << 12;\n      while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {\n        d ^= QRUtil.G18 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18);\n      }\n      return data << 12 | d;\n    },\n    /*\r\n       获取BCH位信息\r\n        */\n    getBCHDigit: function getBCHDigit(data) {\n      var digit = 0;\n      while (data != 0) {\n        digit++;\n        data >>>= 1;\n      }\n      return digit;\n    },\n    /*\r\n       获取版本对应的矫正图形位置\r\n        */\n    getPatternPosition: function getPatternPosition(typeNumber) {\n      return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];\n    },\n    /*\r\n       掩膜算法\r\n        */\n    getMask: function getMask(maskPattern, i, j) {\n      switch (maskPattern) {\n        case QRMaskPattern.PATTERN000:\n          return (i + j) % 2 == 0;\n        case QRMaskPattern.PATTERN001:\n          return i % 2 == 0;\n        case QRMaskPattern.PATTERN010:\n          return j % 3 == 0;\n        case QRMaskPattern.PATTERN011:\n          return (i + j) % 3 == 0;\n        case QRMaskPattern.PATTERN100:\n          return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0;\n        case QRMaskPattern.PATTERN101:\n          return i * j % 2 + i * j % 3 == 0;\n        case QRMaskPattern.PATTERN110:\n          return (i * j % 2 + i * j % 3) % 2 == 0;\n        case QRMaskPattern.PATTERN111:\n          return (i * j % 3 + (i + j) % 2) % 2 == 0;\n        default:\n          throw new Error(\"bad maskPattern:\" + maskPattern);}\n\n    },\n    /*\r\n       获取RS的纠错多项式\r\n        */\n    getErrorCorrectPolynomial: function getErrorCorrectPolynomial(errorCorrectLength) {\n      var a = new QRPolynomial([1], 0);\n      for (var i = 0; i < errorCorrectLength; i++) {\n        a = a.multiply(new QRPolynomial([1, QRMath.gexp(i)], 0));\n      }\n      return a;\n    },\n    /*\r\n       获取评价\r\n        */\n    getLostPoint: function getLostPoint(qrCode) {\n      var moduleCount = qrCode.getModuleCount(),\n      lostPoint = 0,\n      darkCount = 0;\n      for (var row = 0; row < moduleCount; row++) {\n        var sameCount = 0;\n        var head = qrCode.modules[row][0];\n        for (var col = 0; col < moduleCount; col++) {\n          var current = qrCode.modules[row][col];\n          //level 3 评价\n          if (col < moduleCount - 6) {\n            if (current && !qrCode.modules[row][col + 1] && qrCode.modules[row][col + 2] && qrCode.modules[row][col + 3] && qrCode.modules[row][col + 4] && !qrCode.modules[row][col + 5] && qrCode.modules[row][col + 6]) {\n              if (col < moduleCount - 10) {\n                if (qrCode.modules[row][col + 7] && qrCode.modules[row][col + 8] && qrCode.modules[row][col + 9] && qrCode.modules[row][col + 10]) {\n                  lostPoint += 40;\n                }\n              } else if (col > 3) {\n                if (qrCode.modules[row][col - 1] && qrCode.modules[row][col - 2] && qrCode.modules[row][col - 3] && qrCode.modules[row][col - 4]) {\n                  lostPoint += 40;\n                }\n              }\n            }\n          }\n          //level 2 评价\n          if (row < moduleCount - 1 && col < moduleCount - 1) {\n            var count = 0;\n            if (current) count++;\n            if (qrCode.modules[row + 1][col]) count++;\n            if (qrCode.modules[row][col + 1]) count++;\n            if (qrCode.modules[row + 1][col + 1]) count++;\n            if (count == 0 || count == 4) {\n              lostPoint += 3;\n            }\n          }\n          //level 1 评价\n          if (head ^ current) {\n            sameCount++;\n          } else {\n            head = current;\n            if (sameCount >= 5) {\n              lostPoint += 3 + sameCount - 5;\n            }\n            sameCount = 1;\n          }\n          //level 4 评价\n          if (current) {\n            darkCount++;\n          }\n        }\n      }\n      for (var col = 0; col < moduleCount; col++) {\n        var sameCount = 0;\n        var head = qrCode.modules[0][col];\n        for (var row = 0; row < moduleCount; row++) {\n          var current = qrCode.modules[row][col];\n          //level 3 评价\n          if (row < moduleCount - 6) {\n            if (current && !qrCode.modules[row + 1][col] && qrCode.modules[row + 2][col] && qrCode.modules[row + 3][col] && qrCode.modules[row + 4][col] && !qrCode.modules[row + 5][col] && qrCode.modules[row + 6][col]) {\n              if (row < moduleCount - 10) {\n                if (qrCode.modules[row + 7][col] && qrCode.modules[row + 8][col] && qrCode.modules[row + 9][col] && qrCode.modules[row + 10][col]) {\n                  lostPoint += 40;\n                }\n              } else if (row > 3) {\n                if (qrCode.modules[row - 1][col] && qrCode.modules[row - 2][col] && qrCode.modules[row - 3][col] && qrCode.modules[row - 4][col]) {\n                  lostPoint += 40;\n                }\n              }\n            }\n          }\n          //level 1 评价\n          if (head ^ current) {\n            sameCount++;\n          } else {\n            head = current;\n            if (sameCount >= 5) {\n              lostPoint += 3 + sameCount - 5;\n            }\n            sameCount = 1;\n          }\n        }\n      }\n      // LEVEL4\n      var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\n      lostPoint += ratio * 10;\n      return lostPoint;\n    } };\n\n\n  //---------------------------------------------------------------------\n  // QRMath使用的数学工具\n  //---------------------------------------------------------------------\n  var QRMath = {\n    /*\r\n                 将n转化为a^m\r\n                  */\n    glog: function glog(n) {\n      if (n < 1) {\n        throw new Error(\"glog(\" + n + \")\");\n      }\n      return QRMath.LOG_TABLE[n];\n    },\n    /*\r\n       将a^m转化为n\r\n        */\n    gexp: function gexp(n) {\n      while (n < 0) {\n        n += 255;\n      }\n      while (n >= 256) {\n        n -= 255;\n      }\n      return QRMath.EXP_TABLE[n];\n    },\n    EXP_TABLE: new Array(256),\n    LOG_TABLE: new Array(256) };\n\n\n  for (var i = 0; i < 8; i++) {\n    QRMath.EXP_TABLE[i] = 1 << i;\n  }\n  for (var i = 8; i < 256; i++) {\n    QRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4] ^ QRMath.EXP_TABLE[i - 5] ^ QRMath.EXP_TABLE[i - 6] ^ QRMath.EXP_TABLE[i - 8];\n  }\n  for (var i = 0; i < 255; i++) {\n    QRMath.LOG_TABLE[QRMath.EXP_TABLE[i]] = i;\n  }\n  //---------------------------------------------------------------------\n  // QRPolynomial 多项式\n  //---------------------------------------------------------------------\n  /**\r\n   * 多项式类\r\n   * @param {Array} num   系数\r\n   * @param {num} shift a^shift\r\n   */\n  function QRPolynomial(num, shift) {\n    if (num.length == undefined) {\n      throw new Error(num.length + \"/\" + shift);\n    }\n    var offset = 0;\n    while (offset < num.length && num[offset] == 0) {\n      offset++;\n    }\n    this.num = new Array(num.length - offset + shift);\n    for (var i = 0; i < num.length - offset; i++) {\n      this.num[i] = num[i + offset];\n    }\n  }\n  QRPolynomial.prototype = {\n    get: function get(index) {\n      return this.num[index];\n    },\n    getLength: function getLength() {\n      return this.num.length;\n    },\n    /**\r\n        * 多项式乘法\r\n        * @param  {QRPolynomial} e 被乘多项式\r\n        * @return {[type]}   [description]\r\n        */\n    multiply: function multiply(e) {\n      var num = new Array(this.getLength() + e.getLength() - 1);\n      for (var i = 0; i < this.getLength(); i++) {\n        for (var j = 0; j < e.getLength(); j++) {\n          num[i + j] ^= QRMath.gexp(QRMath.glog(this.get(i)) + QRMath.glog(e.get(j)));\n        }\n      }\n      return new QRPolynomial(num, 0);\n    },\n    /**\r\n        * 多项式模运算\r\n        * @param  {QRPolynomial} e 模多项式\r\n        * @return {}\r\n        */\n    mod: function mod(e) {\n      var tl = this.getLength(),\n      el = e.getLength();\n      if (tl - el < 0) {\n        return this;\n      }\n      var num = new Array(tl);\n      for (var i = 0; i < tl; i++) {\n        num[i] = this.get(i);\n      }\n      while (num.length >= el) {\n        var ratio = QRMath.glog(num[0]) - QRMath.glog(e.get(0));\n\n        for (var i = 0; i < e.getLength(); i++) {\n          num[i] ^= QRMath.gexp(QRMath.glog(e.get(i)) + ratio);\n        }\n        while (num[0] == 0) {\n          num.shift();\n        }\n      }\n      return new QRPolynomial(num, 0);\n    } };\n\n\n  //---------------------------------------------------------------------\n  // RS_BLOCK_TABLE\n  //---------------------------------------------------------------------\n  /*\r\n  二维码各个版本信息[块数, 每块中的数据块数, 每块中的信息块数]\r\n   */\n  var RS_BLOCK_TABLE = [\n  // L\n  // M\n  // Q\n  // H\n  // 1\n  [1, 26, 19],\n  [1, 26, 16],\n  [1, 26, 13],\n  [1, 26, 9],\n\n  // 2\n  [1, 44, 34],\n  [1, 44, 28],\n  [1, 44, 22],\n  [1, 44, 16],\n\n  // 3\n  [1, 70, 55],\n  [1, 70, 44],\n  [2, 35, 17],\n  [2, 35, 13],\n\n  // 4\n  [1, 100, 80],\n  [2, 50, 32],\n  [2, 50, 24],\n  [4, 25, 9],\n\n  // 5\n  [1, 134, 108],\n  [2, 67, 43],\n  [2, 33, 15, 2, 34, 16],\n  [2, 33, 11, 2, 34, 12],\n\n  // 6\n  [2, 86, 68],\n  [4, 43, 27],\n  [4, 43, 19],\n  [4, 43, 15],\n\n  // 7\n  [2, 98, 78],\n  [4, 49, 31],\n  [2, 32, 14, 4, 33, 15],\n  [4, 39, 13, 1, 40, 14],\n\n  // 8\n  [2, 121, 97],\n  [2, 60, 38, 2, 61, 39],\n  [4, 40, 18, 2, 41, 19],\n  [4, 40, 14, 2, 41, 15],\n\n  // 9\n  [2, 146, 116],\n  [3, 58, 36, 2, 59, 37],\n  [4, 36, 16, 4, 37, 17],\n  [4, 36, 12, 4, 37, 13],\n\n  // 10\n  [2, 86, 68, 2, 87, 69],\n  [4, 69, 43, 1, 70, 44],\n  [6, 43, 19, 2, 44, 20],\n  [6, 43, 15, 2, 44, 16],\n\n  // 11\n  [4, 101, 81],\n  [1, 80, 50, 4, 81, 51],\n  [4, 50, 22, 4, 51, 23],\n  [3, 36, 12, 8, 37, 13],\n\n  // 12\n  [2, 116, 92, 2, 117, 93],\n  [6, 58, 36, 2, 59, 37],\n  [4, 46, 20, 6, 47, 21],\n  [7, 42, 14, 4, 43, 15],\n\n  // 13\n  [4, 133, 107],\n  [8, 59, 37, 1, 60, 38],\n  [8, 44, 20, 4, 45, 21],\n  [12, 33, 11, 4, 34, 12],\n\n  // 14\n  [3, 145, 115, 1, 146, 116],\n  [4, 64, 40, 5, 65, 41],\n  [11, 36, 16, 5, 37, 17],\n  [11, 36, 12, 5, 37, 13],\n\n  // 15\n  [5, 109, 87, 1, 110, 88],\n  [5, 65, 41, 5, 66, 42],\n  [5, 54, 24, 7, 55, 25],\n  [11, 36, 12],\n\n  // 16\n  [5, 122, 98, 1, 123, 99],\n  [7, 73, 45, 3, 74, 46],\n  [15, 43, 19, 2, 44, 20],\n  [3, 45, 15, 13, 46, 16],\n\n  // 17\n  [1, 135, 107, 5, 136, 108],\n  [10, 74, 46, 1, 75, 47],\n  [1, 50, 22, 15, 51, 23],\n  [2, 42, 14, 17, 43, 15],\n\n  // 18\n  [5, 150, 120, 1, 151, 121],\n  [9, 69, 43, 4, 70, 44],\n  [17, 50, 22, 1, 51, 23],\n  [2, 42, 14, 19, 43, 15],\n\n  // 19\n  [3, 141, 113, 4, 142, 114],\n  [3, 70, 44, 11, 71, 45],\n  [17, 47, 21, 4, 48, 22],\n  [9, 39, 13, 16, 40, 14],\n\n  // 20\n  [3, 135, 107, 5, 136, 108],\n  [3, 67, 41, 13, 68, 42],\n  [15, 54, 24, 5, 55, 25],\n  [15, 43, 15, 10, 44, 16],\n\n  // 21\n  [4, 144, 116, 4, 145, 117],\n  [17, 68, 42],\n  [17, 50, 22, 6, 51, 23],\n  [19, 46, 16, 6, 47, 17],\n\n  // 22\n  [2, 139, 111, 7, 140, 112],\n  [17, 74, 46],\n  [7, 54, 24, 16, 55, 25],\n  [34, 37, 13],\n\n  // 23\n  [4, 151, 121, 5, 152, 122],\n  [4, 75, 47, 14, 76, 48],\n  [11, 54, 24, 14, 55, 25],\n  [16, 45, 15, 14, 46, 16],\n\n  // 24\n  [6, 147, 117, 4, 148, 118],\n  [6, 73, 45, 14, 74, 46],\n  [11, 54, 24, 16, 55, 25],\n  [30, 46, 16, 2, 47, 17],\n\n  // 25\n  [8, 132, 106, 4, 133, 107],\n  [8, 75, 47, 13, 76, 48],\n  [7, 54, 24, 22, 55, 25],\n  [22, 45, 15, 13, 46, 16],\n\n  // 26\n  [10, 142, 114, 2, 143, 115],\n  [19, 74, 46, 4, 75, 47],\n  [28, 50, 22, 6, 51, 23],\n  [33, 46, 16, 4, 47, 17],\n\n  // 27\n  [8, 152, 122, 4, 153, 123],\n  [22, 73, 45, 3, 74, 46],\n  [8, 53, 23, 26, 54, 24],\n  [12, 45, 15, 28, 46, 16],\n\n  // 28\n  [3, 147, 117, 10, 148, 118],\n  [3, 73, 45, 23, 74, 46],\n  [4, 54, 24, 31, 55, 25],\n  [11, 45, 15, 31, 46, 16],\n\n  // 29\n  [7, 146, 116, 7, 147, 117],\n  [21, 73, 45, 7, 74, 46],\n  [1, 53, 23, 37, 54, 24],\n  [19, 45, 15, 26, 46, 16],\n\n  // 30\n  [5, 145, 115, 10, 146, 116],\n  [19, 75, 47, 10, 76, 48],\n  [15, 54, 24, 25, 55, 25],\n  [23, 45, 15, 25, 46, 16],\n\n  // 31\n  [13, 145, 115, 3, 146, 116],\n  [2, 74, 46, 29, 75, 47],\n  [42, 54, 24, 1, 55, 25],\n  [23, 45, 15, 28, 46, 16],\n\n  // 32\n  [17, 145, 115],\n  [10, 74, 46, 23, 75, 47],\n  [10, 54, 24, 35, 55, 25],\n  [19, 45, 15, 35, 46, 16],\n\n  // 33\n  [17, 145, 115, 1, 146, 116],\n  [14, 74, 46, 21, 75, 47],\n  [29, 54, 24, 19, 55, 25],\n  [11, 45, 15, 46, 46, 16],\n\n  // 34\n  [13, 145, 115, 6, 146, 116],\n  [14, 74, 46, 23, 75, 47],\n  [44, 54, 24, 7, 55, 25],\n  [59, 46, 16, 1, 47, 17],\n\n  // 35\n  [12, 151, 121, 7, 152, 122],\n  [12, 75, 47, 26, 76, 48],\n  [39, 54, 24, 14, 55, 25],\n  [22, 45, 15, 41, 46, 16],\n\n  // 36\n  [6, 151, 121, 14, 152, 122],\n  [6, 75, 47, 34, 76, 48],\n  [46, 54, 24, 10, 55, 25],\n  [2, 45, 15, 64, 46, 16],\n\n  // 37\n  [17, 152, 122, 4, 153, 123],\n  [29, 74, 46, 14, 75, 47],\n  [49, 54, 24, 10, 55, 25],\n  [24, 45, 15, 46, 46, 16],\n\n  // 38\n  [4, 152, 122, 18, 153, 123],\n  [13, 74, 46, 32, 75, 47],\n  [48, 54, 24, 14, 55, 25],\n  [42, 45, 15, 32, 46, 16],\n\n  // 39\n  [20, 147, 117, 4, 148, 118],\n  [40, 75, 47, 7, 76, 48],\n  [43, 54, 24, 22, 55, 25],\n  [10, 45, 15, 67, 46, 16],\n\n  // 40\n  [19, 148, 118, 6, 149, 119],\n  [18, 75, 47, 31, 76, 48],\n  [34, 54, 24, 34, 55, 25],\n  [20, 45, 15, 61, 46, 16]];\n\n\n  /**\r\n                              * 根据数据获取对应版本\r\n                              * @return {[type]} [description]\r\n                              */\n  QRCodeAlg.prototype.getRightType = function () {\n    for (var typeNumber = 1; typeNumber < 41; typeNumber++) {\n      var rsBlock = RS_BLOCK_TABLE[(typeNumber - 1) * 4 + this.errorCorrectLevel];\n      if (rsBlock == undefined) {\n        throw new Error(\"bad rs block @ typeNumber:\" + typeNumber + \"/errorCorrectLevel:\" + this.errorCorrectLevel);\n      }\n      var length = rsBlock.length / 3;\n      var totalDataCount = 0;\n      for (var i = 0; i < length; i++) {\n        var count = rsBlock[i * 3 + 0];\n        var dataCount = rsBlock[i * 3 + 2];\n        totalDataCount += dataCount * count;\n      }\n      var lengthBytes = typeNumber > 9 ? 2 : 1;\n      if (this.utf8bytes.length + lengthBytes < totalDataCount || typeNumber == 40) {\n        this.typeNumber = typeNumber;\n        this.rsBlock = rsBlock;\n        this.totalDataCount = totalDataCount;\n        break;\n      }\n    }\n  };\n\n  //---------------------------------------------------------------------\n  // QRBitBuffer\n  //---------------------------------------------------------------------\n  function QRBitBuffer() {\n    this.buffer = new Array();\n    this.length = 0;\n  }\n  QRBitBuffer.prototype = {\n    get: function get(index) {\n      var bufIndex = Math.floor(index / 8);\n      return this.buffer[bufIndex] >>> 7 - index % 8 & 1;\n    },\n    put: function put(num, length) {\n      for (var i = 0; i < length; i++) {\n        this.putBit(num >>> length - i - 1 & 1);\n      }\n    },\n    putBit: function putBit(bit) {\n      var bufIndex = Math.floor(this.length / 8);\n      if (this.buffer.length <= bufIndex) {\n        this.buffer.push(0);\n      }\n      if (bit) {\n        this.buffer[bufIndex] |= 0x80 >>> this.length % 8;\n      }\n      this.length++;\n    } };\n\n\n\n\n  // xzedit\n  var qrcodeAlgObjCache = [];\n  /**\r\n                               * 二维码构造函数，主要用于绘制\r\n                               * @param  {参数列表} opt 传递参数\r\n                               * @return {}\r\n                               */\n  QRCode = function QRCode(opt) {\n    //设置默认参数\n    this.options = {\n      text: '',\n      size: 256,\n      correctLevel: 3,\n      background: '#ffffff',\n      foreground: '#000000',\n      pdground: '#000000',\n      image: '',\n      imageSize: 30,\n      canvasId: opt.canvasId,\n      context: opt.context,\n      usingComponents: opt.usingComponents,\n      showLoading: opt.showLoading,\n      loadingText: opt.loadingText };\n\n    if (typeof opt === 'string') {// 只编码ASCII字符串\n      opt = {\n        text: opt };\n\n    }\n    if (opt) {\n      for (var i in opt) {\n        this.options[i] = opt[i];\n      }\n    }\n    //使用QRCodeAlg创建二维码结构\n    var qrCodeAlg = null;\n    for (var i = 0, l = qrcodeAlgObjCache.length; i < l; i++) {\n      if (qrcodeAlgObjCache[i].text == this.options.text && qrcodeAlgObjCache[i].text.correctLevel == this.options.correctLevel) {\n        qrCodeAlg = qrcodeAlgObjCache[i].obj;\n        break;\n      }\n    }\n    if (i == l) {\n      qrCodeAlg = new QRCodeAlg(this.options.text, this.options.correctLevel);\n      qrcodeAlgObjCache.push({\n        text: this.options.text,\n        correctLevel: this.options.correctLevel,\n        obj: qrCodeAlg });\n\n    }\n    /**\r\n       * 计算矩阵点的前景色\r\n       * @param {Obj} config\r\n       * @param {Number} config.row 点x坐标\r\n       * @param {Number} config.col 点y坐标\r\n       * @param {Number} config.count 矩阵大小\r\n       * @param {Number} config.options 组件的options\r\n       * @return {String}\r\n       */\n    var getForeGround = function getForeGround(config) {\n      var options = config.options;\n      if (options.pdground && (\n      config.row > 1 && config.row < 5 && config.col > 1 && config.col < 5 ||\n      config.row > config.count - 6 && config.row < config.count - 2 && config.col > 1 && config.col < 5 ||\n      config.row > 1 && config.row < 5 && config.col > config.count - 6 && config.col < config.count - 2))\n      {\n        return options.pdground;\n      }\n      return options.foreground;\n    };\n    // 创建canvas\n    var createCanvas = function createCanvas(options) {\n      if (options.showLoading) {\n        uni.showLoading({\n          title: options.loadingText,\n          mask: true });\n\n      }\n      var ctx = uni.createCanvasContext(options.canvasId, options.context);\n      var count = qrCodeAlg.getModuleCount();\n      var ratioSize = options.size;\n      var ratioImgSize = options.imageSize;\n      //计算每个点的长宽\n      var tileW = (ratioSize / count).toPrecision(4);\n      var tileH = (ratioSize / count).toPrecision(4);\n      //绘制\n      for (var row = 0; row < count; row++) {\n        for (var col = 0; col < count; col++) {\n          var w = Math.ceil((col + 1) * tileW) - Math.floor(col * tileW);\n          var h = Math.ceil((row + 1) * tileW) - Math.floor(row * tileW);\n          var foreground = getForeGround({\n            row: row,\n            col: col,\n            count: count,\n            options: options });\n\n          ctx.setFillStyle(qrCodeAlg.modules[row][col] ? foreground : options.background);\n          ctx.fillRect(Math.round(col * tileW), Math.round(row * tileH), w, h);\n        }\n      }\n      if (options.image) {\n\n\n\n\n        // 画圆角矩形\n        var drawRoundedRect = function drawRoundedRect(ctxi, x, y, width, height, r, lineWidth, fill, stroke) {\n          ctxi.setLineWidth(lineWidth);\n          ctxi.setFillStyle(options.background);\n          ctxi.setStrokeStyle(options.background);\n          ctxi.beginPath(); // draw top and top right corner \n          ctxi.moveTo(x + r, y);\n          ctxi.arcTo(x + width, y, x + width, y + r, r); // draw right side and bottom right corner \n          ctxi.arcTo(x + width, y + height, x + width - r, y + height, r); // draw bottom and bottom left corner \n          ctxi.arcTo(x, y + height, x, y + height - r, r); // draw left and top left corner \n          ctxi.arcTo(x, y, x + r, y, r);\n          ctxi.closePath();\n          if (fill) {\n            ctxi.fill();\n          }\n          if (stroke) {\n            ctxi.stroke();\n          }\n        };var x = Number(((ratioSize - ratioImgSize) / 2).toFixed(2));var y = Number(((ratioSize - ratioImgSize) / 2).toFixed(2));drawRoundedRect(ctx, x, y, ratioImgSize, ratioImgSize, 2, 6, true, true);ctx.drawImage(options.image, x, y, ratioImgSize, ratioImgSize);\n      }\n      setTimeout(function () {\n        ctx.draw(true, function () {\n          // 保存到临时区域\n          setTimeout(function () {\n            uni.canvasToTempFilePath({\n              width: options.width,\n              height: options.height,\n              destWidth: options.width,\n              destHeight: options.height,\n              canvasId: options.canvasId,\n              quality: Number(1),\n              success: function success(res) {\n                if (options.cbResult) {\n                  // 由于官方还没有统一此接口的输出字段，所以先判定下  支付宝为 res.apFilePath\n                  if (!empty(res.tempFilePath)) {\n                    options.cbResult(res.tempFilePath);\n                  } else if (!empty(res.apFilePath)) {\n                    options.cbResult(res.apFilePath);\n                  } else {\n                    options.cbResult(res.tempFilePath);\n                  }\n                }\n              },\n              fail: function fail(res) {\n                if (options.cbResult) {\n                  options.cbResult(res);\n                }\n              },\n              complete: function complete() {\n                uni.hideLoading();\n              } },\n            options.context);\n          }, options.text.length + 100);\n        });\n      }, options.usingComponents ? 0 : 150);\n    };\n    createCanvas(this.options);\n    // 空判定\n    var empty = function empty(v) {\n      var tp = typeof v,\n      rt = false;\n      if (tp == \"number\" && String(v) == \"\") {\n        rt = true;\n      } else if (tp == \"undefined\") {\n        rt = true;\n      } else if (tp == \"object\") {\n        if (JSON.stringify(v) == \"{}\" || JSON.stringify(v) == \"[]\" || v == null) rt = true;\n      } else if (tp == \"string\") {\n        if (v == \"\" || v == \"undefined\" || v == \"null\" || v == \"{}\" || v == \"[]\") rt = true;\n      } else if (tp == \"function\") {\n        rt = false;\n      }\n      return rt;\n    };\n  };\n  QRCode.prototype.clear = function (fn) {\n    var ctx = uni.createCanvasContext(this.options.canvasId, this.options.context);\n    ctx.clearRect(0, 0, this.options.size, this.options.size);\n    ctx.draw(false, function () {\n      if (fn) {\n        fn();\n      }\n    });\n  };\n})();var _default =\n\nQRCode;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///748\n");

/***/ }),

/***/ 756:
/*!*****************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcode.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError(\"Invalid attempt to spread non-iterable instance\");}function _iterableToArray(iter) {if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;}}var barcodes = __webpack_require__(/*! ./barcodes/index.js */ 757)['default'];\nvar _barcode = {};\n(function () {\n  // 初始化\n  _barcode = function barcode(cont, ctxid, options, ctxsize, result) {\n    var ops = {},newOptions,encodings,globaContext,ctx,globaCtxid,cbCanvasSize,cbResult;\n    globaCtxid = ctxid;\n    cbCanvasSize = ctxsize;\n    cbResult = result;\n    newOptions = Object.assign(ops, options);\n    // 修成margin\n    fixMargin(newOptions);\n    // 处理options 数据\n    if (newOptions.text == '' || cont == '') {\n      return false;\n    }\n    // 获取ctx\n    globaContext = cont;\n    ctx = uni.createCanvasContext(globaCtxid, globaContext);\n    // 获取编码数据\n    encodings = new barcodes[newOptions.format.toUpperCase()](newOptions.text, newOptions).encode();\n    var fixencodings = fixEncodings(encodings, newOptions);\n    // 返回canvas实际大小\n    cbCanvasSize({ width: fixencodings.width, height: fixencodings.height });\n    // 绘制canvas\n    setTimeout(function () {\n      drawCanvas.render(newOptions, fixencodings);\n    }, 10);\n    // 绘制canvas\n    var drawCanvas = {\n      render: function render(options, encoding) {var _this = this;\n        this.prepare(options, encoding);\n        encoding.encodings.forEach(function (v, i) {\n          _this.barcode(options, v);\n          _this.text(options, v);\n          _this.move(v);\n        });\n        this.draw(options, encoding);\n      },\n      barcode: function barcode(options, encoding) {\n        var binary = encoding.data;\n        var yFrom;\n        if (options.textPosition == \"top\") {\n          yFrom = options.marginTop + options.fontSize + options.textMargin;\n        } else {\n          yFrom = options.marginTop;\n        }\n        // 绘制条码\n        ctx.fillStyle = options.lineColor;\n        for (var b = 0; b < binary.length; b++) {\n          var x = b * options.width + encoding.barcodePadding;\n          var height = options.height;\n          if (encoding.options) {\n            if (encoding.options.height != undefined) {\n              height = encoding.options.height;\n            }\n          }\n          if (binary[b] === \"1\") {\n            ctx.fillRect(x, yFrom, options.width, height);\n          } else if (binary[b]) {\n            ctx.fillRect(x, yFrom, options.width, height * binary[b]);\n          }\n        }\n      },\n      text: function text(options, encoding) {\n        if (options.displayValue) {\n          var x, y, align, size;\n          if (options.textPosition == \"top\") {\n            y = options.marginTop + options.fontSize;\n          } else {\n            y = options.height + options.textMargin + options.marginTop + options.fontSize;\n          }\n          if (encoding.options) {\n            if (encoding.options.textAlign != undefined) {\n              align = encoding.options.textAlign;\n            }\n            if (encoding.options.fontSize != undefined) {\n              size = encoding.options.fontSize;\n            }\n          } else {\n            align = options.textAlign;\n            size = options.fontSize;\n          }\n          ctx.setFontSize(size);\n          if (align == \"left\" || encoding.barcodePadding > 0) {\n            x = 0;\n            ctx.setTextAlign('left');\n          } else if (align == \"right\") {\n            x = encoding.width - 1;\n            ctx.setTextAlign('right');\n          } else\n          {\n            x = encoding.width / 2;\n            ctx.setTextAlign('center');\n          }\n          ctx.fillStyle = options.fontColor;\n          if (encoding.text != undefined) {\n            ctx.fillText(encoding.text, x, y);\n          }\n        }\n      },\n      move: function move(encoding) {\n        ctx.translate(encoding.width, 0);\n      },\n      prepare: function prepare(options, encoding) {\n        // 绘制背景\n        if (options.background) {\n          ctx.fillStyle = options.background;\n          ctx.fillRect(0, 0, encoding.width, encoding.height);\n        }\n        ctx.translate(options.marginLeft, 0);\n      },\n      draw: function draw(options, encoding) {var _this2 = this;\n        ctx.draw(false, function () {\n          _this2.toImgs(options, encoding);\n        });\n      },\n      toImgs: function toImgs(options, encoding) {\n        setTimeout(function () {\n          uni.canvasToTempFilePath({\n            width: encoding.width,\n            height: encoding.height,\n            destWidth: encoding.width,\n            destHeight: encoding.height,\n            canvasId: globaCtxid,\n            fileType: 'png',\n            success: function success(res) {\n              cbResult(res.tempFilePath);\n            },\n            fail: function fail(res) {\n              cbResult(res);\n            },\n            complete: function complete() {\n              uni.hideLoading();\n            } },\n          globaContext);\n        }, options.text.length + 100);\n      } };\n\n    // 混入canvas数据\n    function fixEncodings(encoding, options) {\n      var encodingArr = [],width = options.marginLeft + options.marginRight,height;\n      if (!Array.isArray(encoding)) {\n        encodingArr[0] = JSON.parse(JSON.stringify(encoding));\n      } else {\n        encodingArr = _toConsumableArray(encoding);\n      }\n      encodingArr.forEach(function (v, i) {\n        // 获取文本宽度\n        var textWidth = ctx.measureText(encodingArr[i].text ? encodingArr[i].text : '').width;\n        // 获取条形码宽度\n        var barcodeWidth = encodingArr[i].data.length * options.width;\n        // 获取内边距\n        var barcodePadding = 0;\n        if (options.displayValue && barcodeWidth < textWidth) {\n          if (options.textAlign == \"center\") {\n            barcodePadding = Math.floor((textWidth - barcodeWidth) / 2);\n          } else if (options.textAlign == \"left\") {\n            barcodePadding = 0;\n          } else if (options.textAlign == \"right\") {\n            barcodePadding = Math.floor(textWidth - barcodeWidth);\n          }\n        }\n        // 混入encodingArr[i]\n        encodingArr[i].barcodePadding = barcodePadding;\n        encodingArr[i].width = Math.ceil(Math.max(textWidth, barcodeWidth));\n        width += encodingArr[i].width;\n        if (encodingArr[i].options) {\n          if (encodingArr[i].options.height != undefined) {\n            encodingArr[i].height = encodingArr[i].options.height + (options.displayValue && (encodingArr[i].text ? encodingArr[i].text : '').length > 0 ? options.fontSize + options.textMargin : 0) + options.marginTop + options.marginBottom;\n          } else {\n            encodingArr[i].height = height = options.height + (options.displayValue && (encodingArr[i].text ? encodingArr[i].text : '').length > 0 ? options.fontSize + options.textMargin : 0) + options.marginTop + options.marginBottom;\n          }\n        } else {\n          encodingArr[i].height = height = options.height + (options.displayValue && (encodingArr[i].text ? encodingArr[i].text : '').length > 0 ? options.fontSize + options.textMargin : 0) + options.marginTop + options.marginBottom;\n        }\n      });\n      return { encodings: encodingArr, width: width, height: height };\n    }\n    // 修正Margin\n    function fixMargin(options) {\n      options.marginTop = options.marginTop == undefined ? options.margin : options.marginTop;\n      options.marginBottom = options.marginBottom == undefined ? options.margin : options.marginBottom;\n      options.marginRight = options.marginRight == undefined ? options.margin : options.marginRight;\n      options.marginLeft = options.marginLeft == undefined ? options.margin : options.marginLeft;\n    }\n  };\n})();var _default =\n\n_barcode;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///756\n");

/***/ }),

/***/ 757:
/*!************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/index.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _CODE = __webpack_require__(/*! ./CODE39/ */ 758);\n\nvar _CODE2 = __webpack_require__(/*! ./CODE128/ */ 760);\n\nvar _EAN_UPC = __webpack_require__(/*! ./EAN_UPC/ */ 768);\n\nvar _ITF = __webpack_require__(/*! ./ITF/ */ 778);\n\nvar _MSI = __webpack_require__(/*! ./MSI/ */ 782);\n\nvar _pharmacode = __webpack_require__(/*! ./pharmacode/ */ 789);\n\nvar _codabar = __webpack_require__(/*! ./codabar */ 790);\n\nvar _GenericBarcode = __webpack_require__(/*! ./GenericBarcode/ */ 791);\n\nexports.default = {\n  CODE39: _CODE.CODE39,\n  CODE128: _CODE2.CODE128, CODE128A: _CODE2.CODE128A, CODE128B: _CODE2.CODE128B, CODE128C: _CODE2.CODE128C,\n  EAN13: _EAN_UPC.EAN13, EAN8: _EAN_UPC.EAN8, EAN5: _EAN_UPC.EAN5, EAN2: _EAN_UPC.EAN2,\n  UPC: _EAN_UPC.UPC, UPCE: _EAN_UPC.UPCE,\n  ITF14: _ITF.ITF14,\n  ITF: _ITF.ITF,\n  MSI: _MSI.MSI, MSI10: _MSI.MSI10, MSI11: _MSI.MSI11, MSI1010: _MSI.MSI1010, MSI1110: _MSI.MSI1110,\n  PHARMACODE: _pharmacode.pharmacode,\n  CODABAR: _codabar.codabar,\n  GENERICBARCODE: _GenericBarcode.GenericBarcode };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9pbmRleC5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9DT0RFIiwicmVxdWlyZSIsIl9DT0RFMiIsIl9FQU5fVVBDIiwiX0lURiIsIl9NU0kiLCJfcGhhcm1hY29kZSIsIl9jb2RhYmFyIiwiX0dlbmVyaWNCYXJjb2RlIiwiZGVmYXVsdCIsIkNPREUzOSIsIkNPREUxMjgiLCJDT0RFMTI4QSIsIkNPREUxMjhCIiwiQ09ERTEyOEMiLCJFQU4xMyIsIkVBTjgiLCJFQU41IiwiRUFOMiIsIlVQQyIsIlVQQ0UiLCJJVEYxNCIsIklURiIsIk1TSSIsIk1TSTEwIiwiTVNJMTEiLCJNU0kxMDEwIiwiTVNJMTExMCIsIlBIQVJNQUNPREUiLCJwaGFybWFjb2RlIiwiQ09EQUJBUiIsImNvZGFiYXIiLCJHRU5FUklDQkFSQ09ERSIsIkdlbmVyaWNCYXJjb2RlIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUM1Q0MsT0FBSyxFQUFFLElBRHFDLEVBQTdDOzs7QUFJQSxJQUFJQyxLQUFLLEdBQUdDLG1CQUFPLENBQUMsb0JBQUQsQ0FBbkI7O0FBRUEsSUFBSUMsTUFBTSxHQUFHRCxtQkFBTyxDQUFDLHFCQUFELENBQXBCOztBQUVBLElBQUlFLFFBQVEsR0FBR0YsbUJBQU8sQ0FBQyxxQkFBRCxDQUF0Qjs7QUFFQSxJQUFJRyxJQUFJLEdBQUdILG1CQUFPLENBQUMsaUJBQUQsQ0FBbEI7O0FBRUEsSUFBSUksSUFBSSxHQUFHSixtQkFBTyxDQUFDLGlCQUFELENBQWxCOztBQUVBLElBQUlLLFdBQVcsR0FBR0wsbUJBQU8sQ0FBQyx3QkFBRCxDQUF6Qjs7QUFFQSxJQUFJTSxRQUFRLEdBQUdOLG1CQUFPLENBQUMsb0JBQUQsQ0FBdEI7O0FBRUEsSUFBSU8sZUFBZSxHQUFHUCxtQkFBTyxDQUFDLDRCQUFELENBQTdCOztBQUVBSCxPQUFPLENBQUNXLE9BQVIsR0FBa0I7QUFDakJDLFFBQU0sRUFBRVYsS0FBSyxDQUFDVSxNQURHO0FBRWpCQyxTQUFPLEVBQUVULE1BQU0sQ0FBQ1MsT0FGQyxFQUVRQyxRQUFRLEVBQUVWLE1BQU0sQ0FBQ1UsUUFGekIsRUFFbUNDLFFBQVEsRUFBRVgsTUFBTSxDQUFDVyxRQUZwRCxFQUU4REMsUUFBUSxFQUFFWixNQUFNLENBQUNZLFFBRi9FO0FBR2pCQyxPQUFLLEVBQUVaLFFBQVEsQ0FBQ1ksS0FIQyxFQUdNQyxJQUFJLEVBQUViLFFBQVEsQ0FBQ2EsSUFIckIsRUFHMkJDLElBQUksRUFBRWQsUUFBUSxDQUFDYyxJQUgxQyxFQUdnREMsSUFBSSxFQUFFZixRQUFRLENBQUNlLElBSC9EO0FBSWpCQyxLQUFHLEVBQUVoQixRQUFRLENBQUNnQixHQUpHLEVBSUVDLElBQUksRUFBRWpCLFFBQVEsQ0FBQ2lCLElBSmpCO0FBS2pCQyxPQUFLLEVBQUVqQixJQUFJLENBQUNpQixLQUxLO0FBTWpCQyxLQUFHLEVBQUVsQixJQUFJLENBQUNrQixHQU5PO0FBT2pCQyxLQUFHLEVBQUVsQixJQUFJLENBQUNrQixHQVBPLEVBT0ZDLEtBQUssRUFBRW5CLElBQUksQ0FBQ21CLEtBUFYsRUFPaUJDLEtBQUssRUFBRXBCLElBQUksQ0FBQ29CLEtBUDdCLEVBT29DQyxPQUFPLEVBQUVyQixJQUFJLENBQUNxQixPQVBsRCxFQU8yREMsT0FBTyxFQUFFdEIsSUFBSSxDQUFDc0IsT0FQekU7QUFRakJDLFlBQVUsRUFBRXRCLFdBQVcsQ0FBQ3VCLFVBUlA7QUFTakJDLFNBQU8sRUFBRXZCLFFBQVEsQ0FBQ3dCLE9BVEQ7QUFVakJDLGdCQUFjLEVBQUV4QixlQUFlLENBQUN5QixjQVZmLEVBQWxCIiwiZmlsZSI6Ijc1Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xyXG5cdHZhbHVlOiB0cnVlXHJcbn0pO1xyXG5cclxudmFyIF9DT0RFID0gcmVxdWlyZSgnLi9DT0RFMzkvJyk7XHJcblxyXG52YXIgX0NPREUyID0gcmVxdWlyZSgnLi9DT0RFMTI4LycpO1xyXG5cclxudmFyIF9FQU5fVVBDID0gcmVxdWlyZSgnLi9FQU5fVVBDLycpO1xyXG5cclxudmFyIF9JVEYgPSByZXF1aXJlKCcuL0lURi8nKTtcclxuXHJcbnZhciBfTVNJID0gcmVxdWlyZSgnLi9NU0kvJyk7XHJcblxyXG52YXIgX3BoYXJtYWNvZGUgPSByZXF1aXJlKCcuL3BoYXJtYWNvZGUvJyk7XHJcblxyXG52YXIgX2NvZGFiYXIgPSByZXF1aXJlKCcuL2NvZGFiYXInKTtcclxuXHJcbnZhciBfR2VuZXJpY0JhcmNvZGUgPSByZXF1aXJlKCcuL0dlbmVyaWNCYXJjb2RlLycpO1xyXG5cclxuZXhwb3J0cy5kZWZhdWx0ID0ge1xyXG5cdENPREUzOTogX0NPREUuQ09ERTM5LFxyXG5cdENPREUxMjg6IF9DT0RFMi5DT0RFMTI4LCBDT0RFMTI4QTogX0NPREUyLkNPREUxMjhBLCBDT0RFMTI4QjogX0NPREUyLkNPREUxMjhCLCBDT0RFMTI4QzogX0NPREUyLkNPREUxMjhDLFxyXG5cdEVBTjEzOiBfRUFOX1VQQy5FQU4xMywgRUFOODogX0VBTl9VUEMuRUFOOCwgRUFONTogX0VBTl9VUEMuRUFONSwgRUFOMjogX0VBTl9VUEMuRUFOMiwgXHJcblx0VVBDOiBfRUFOX1VQQy5VUEMsIFVQQ0U6IF9FQU5fVVBDLlVQQ0UsXHJcblx0SVRGMTQ6IF9JVEYuSVRGMTQsXHJcblx0SVRGOiBfSVRGLklURixcclxuXHRNU0k6IF9NU0kuTVNJLCBNU0kxMDogX01TSS5NU0kxMCwgTVNJMTE6IF9NU0kuTVNJMTEsIE1TSTEwMTA6IF9NU0kuTVNJMTAxMCwgTVNJMTExMDogX01TSS5NU0kxMTEwLFxyXG5cdFBIQVJNQUNPREU6IF9waGFybWFjb2RlLnBoYXJtYWNvZGUsXHJcblx0Q09EQUJBUjogX2NvZGFiYXIuY29kYWJhcixcclxuXHRHRU5FUklDQkFSQ09ERTogX0dlbmVyaWNCYXJjb2RlLkdlbmVyaWNCYXJjb2RlXHJcbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///757\n");

/***/ }),

/***/ 758:
/*!*******************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/CODE39/index.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.CODE39 = undefined;\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _Barcode2 = __webpack_require__(/*! ../Barcode.js */ 759);\n\nvar _Barcode3 = _interopRequireDefault(_Barcode2);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} // Encoding documentation:\n// https://en.wikipedia.org/wiki/Code_39#Encoding\n\nvar CODE39 = function (_Barcode) {\n  _inherits(CODE39, _Barcode);\n\n  function CODE39(data, options) {\n    _classCallCheck(this, CODE39);\n\n    data = data.toUpperCase();\n\n    // Calculate mod43 checksum if enabled\n    if (options.mod43) {\n      data += getCharacter(mod43checksum(data));\n    }\n\n    return _possibleConstructorReturn(this, (CODE39.__proto__ || Object.getPrototypeOf(CODE39)).call(this, data, options));\n  }\n\n  _createClass(CODE39, [{\n    key: \"encode\",\n    value: function encode() {\n      // First character is always a *\n      var result = getEncoding(\"*\");\n\n      // Take every character and add the binary representation to the result\n      for (var i = 0; i < this.data.length; i++) {\n        result += getEncoding(this.data[i]) + \"0\";\n      }\n\n      // Last character is always a *\n      result += getEncoding(\"*\");\n      return {\n        data: result,\n        text: this.text };\n\n    } },\n  {\n    key: \"valid\",\n    value: function valid() {\n      return this.data.search(/^[0-9A-Z\\-\\.\\ \\$\\/\\+\\%]+$/) !== -1;\n    } }]);\n\n\n  return CODE39;\n}(_Barcode3.default);\n\n// All characters. The position in the array is the (checksum) value\n\n\nvar characters = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"-\", \".\", \" \", \"$\", \"/\", \"+\", \"%\", \"*\"];\n\n// The decimal representation of the characters, is converted to the\n// corresponding binary with the getEncoding function\nvar encodings = [20957, 29783, 23639, 30485, 20951, 29813, 23669, 20855, 29789, 23645, 29975, 23831, 30533, 22295, 30149, 24005, 21623, 29981, 23837, 22301, 30023, 23879, 30545, 22343, 30161, 24017, 21959, 30065, 23921, 22385, 29015, 18263, 29141, 17879, 29045, 18293, 17783, 29021, 18269, 17477, 17489, 17681, 20753, 35770];\n\n// Get the binary representation of a character by converting the encodings\n// from decimal to binary\nfunction getEncoding(character) {\n  return getBinary(characterValue(character));\n}\n\nfunction getBinary(characterValue) {\n  return encodings[characterValue].toString(2);\n}\n\nfunction getCharacter(characterValue) {\n  return characters[characterValue];\n}\n\nfunction characterValue(character) {\n  return characters.indexOf(character);\n}\n\nfunction mod43checksum(data) {\n  var checksum = 0;\n  for (var i = 0; i < data.length; i++) {\n    checksum += characterValue(data[i]);\n  }\n\n  checksum = checksum % 43;\n  return checksum;\n}\n\nexports.CODE39 = CODE39;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9DT0RFMzkvaW5kZXguanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJDT0RFMzkiLCJ1bmRlZmluZWQiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImtleSIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwicHJvdG90eXBlIiwiX0JhcmNvZGUyIiwicmVxdWlyZSIsIl9CYXJjb2RlMyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiVHlwZUVycm9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiY2FsbCIsIlJlZmVyZW5jZUVycm9yIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9CYXJjb2RlIiwiZGF0YSIsIm9wdGlvbnMiLCJ0b1VwcGVyQ2FzZSIsIm1vZDQzIiwiZ2V0Q2hhcmFjdGVyIiwibW9kNDNjaGVja3N1bSIsImdldFByb3RvdHlwZU9mIiwiZW5jb2RlIiwicmVzdWx0IiwiZ2V0RW5jb2RpbmciLCJ0ZXh0IiwidmFsaWQiLCJzZWFyY2giLCJjaGFyYWN0ZXJzIiwiZW5jb2RpbmdzIiwiY2hhcmFjdGVyIiwiZ2V0QmluYXJ5IiwiY2hhcmFjdGVyVmFsdWUiLCJ0b1N0cmluZyIsImluZGV4T2YiLCJjaGVja3N1bSJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE1BQU0sQ0FBQ0Ms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QyxTQUFPRixVQUFVLENBQUNNLE9BQVgsQ0FBbUJKLFNBQW5CLENBQVA7QUFDQTs7QUFFRCxTQUFTVixhQUFULENBQXVCTCxJQUF2QixFQUE2QjtBQUM1QixNQUFJb0IsUUFBUSxHQUFHLENBQWY7QUFDQSxPQUFLLElBQUlyRCxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHaUMsSUFBSSxDQUFDaEMsTUFBekIsRUFBaUNELENBQUMsRUFBbEMsRUFBc0M7QUFDckNxRCxZQUFRLElBQUlILGNBQWMsQ0FBQ2pCLElBQUksQ0FBQ2pDLENBQUQsQ0FBTCxDQUExQjtBQUNBOztBQUVEcUQsVUFBUSxHQUFHQSxRQUFRLEdBQUcsRUFBdEI7QUFDQSxTQUFPQSxRQUFQO0FBQ0E7O0FBRUQ3RCxPQUFPLENBQUNFLE1BQVIsR0FBaUJBLE1BQWpCIiwiZmlsZSI6Ijc1OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XHJcblx0dmFsdWU6IHRydWVcclxufSk7XHJcbmV4cG9ydHMuQ09ERTM5ID0gdW5kZWZpbmVkO1xyXG5cclxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcclxuXHJcbnZhciBfQmFyY29kZTIgPSByZXF1aXJlKFwiLi4vQmFyY29kZS5qc1wiKTtcclxuXHJcbnZhciBfQmFyY29kZTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9CYXJjb2RlMik7XHJcblxyXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxyXG5cclxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cclxuXHJcbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxyXG5cclxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9IC8vIEVuY29kaW5nIGRvY3VtZW50YXRpb246XHJcbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvZGVfMzkjRW5jb2RpbmdcclxuXHJcbnZhciBDT0RFMzkgPSBmdW5jdGlvbiAoX0JhcmNvZGUpIHtcclxuXHRfaW5oZXJpdHMoQ09ERTM5LCBfQmFyY29kZSk7XHJcblxyXG5cdGZ1bmN0aW9uIENPREUzOShkYXRhLCBvcHRpb25zKSB7XHJcblx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ09ERTM5KTtcclxuXHJcblx0XHRkYXRhID0gZGF0YS50b1VwcGVyQ2FzZSgpO1xyXG5cclxuXHRcdC8vIENhbGN1bGF0ZSBtb2Q0MyBjaGVja3N1bSBpZiBlbmFibGVkXHJcblx0XHRpZiAob3B0aW9ucy5tb2Q0Mykge1xyXG5cdFx0XHRkYXRhICs9IGdldENoYXJhY3Rlcihtb2Q0M2NoZWNrc3VtKGRhdGEpKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKENPREUzOS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENPREUzOSkpLmNhbGwodGhpcywgZGF0YSwgb3B0aW9ucykpO1xyXG5cdH1cclxuXHJcblx0X2NyZWF0ZUNsYXNzKENPREUzOSwgW3tcclxuXHRcdGtleTogXCJlbmNvZGVcIixcclxuXHRcdHZhbHVlOiBmdW5jdGlvbiBlbmNvZGUoKSB7XHJcblx0XHRcdC8vIEZpcnN0IGNoYXJhY3RlciBpcyBhbHdheXMgYSAqXHJcblx0XHRcdHZhciByZXN1bHQgPSBnZXRFbmNvZGluZyhcIipcIik7XHJcblxyXG5cdFx0XHQvLyBUYWtlIGV2ZXJ5IGNoYXJhY3RlciBhbmQgYWRkIHRoZSBiaW5hcnkgcmVwcmVzZW50YXRpb24gdG8gdGhlIHJlc3VsdFxyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZGF0YS5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdHJlc3VsdCArPSBnZXRFbmNvZGluZyh0aGlzLmRhdGFbaV0pICsgXCIwXCI7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIExhc3QgY2hhcmFjdGVyIGlzIGFsd2F5cyBhICpcclxuXHRcdFx0cmVzdWx0ICs9IGdldEVuY29kaW5nKFwiKlwiKTtcclxuXHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRkYXRhOiByZXN1bHQsXHJcblx0XHRcdFx0dGV4dDogdGhpcy50ZXh0XHJcblx0XHRcdH07XHJcblx0XHR9XHJcblx0fSwge1xyXG5cdFx0a2V5OiBcInZhbGlkXCIsXHJcblx0XHR2YWx1ZTogZnVuY3Rpb24gdmFsaWQoKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmRhdGEuc2VhcmNoKC9eWzAtOUEtWlxcLVxcLlxcIFxcJFxcL1xcK1xcJV0rJC8pICE9PSAtMTtcclxuXHRcdH1cclxuXHR9XSk7XHJcblxyXG5cdHJldHVybiBDT0RFMzk7XHJcbn0oX0JhcmNvZGUzLmRlZmF1bHQpO1xyXG5cclxuLy8gQWxsIGNoYXJhY3RlcnMuIFRoZSBwb3NpdGlvbiBpbiB0aGUgYXJyYXkgaXMgdGhlIChjaGVja3N1bSkgdmFsdWVcclxuXHJcblxyXG52YXIgY2hhcmFjdGVycyA9IFtcIjBcIiwgXCIxXCIsIFwiMlwiLCBcIjNcIiwgXCI0XCIsIFwiNVwiLCBcIjZcIiwgXCI3XCIsIFwiOFwiLCBcIjlcIiwgXCJBXCIsIFwiQlwiLCBcIkNcIiwgXCJEXCIsIFwiRVwiLCBcIkZcIiwgXCJHXCIsIFwiSFwiLCBcIklcIiwgXCJKXCIsIFwiS1wiLCBcIkxcIiwgXCJNXCIsIFwiTlwiLCBcIk9cIiwgXCJQXCIsIFwiUVwiLCBcIlJcIiwgXCJTXCIsIFwiVFwiLCBcIlVcIiwgXCJWXCIsIFwiV1wiLCBcIlhcIiwgXCJZXCIsIFwiWlwiLCBcIi1cIiwgXCIuXCIsIFwiIFwiLCBcIiRcIiwgXCIvXCIsIFwiK1wiLCBcIiVcIiwgXCIqXCJdO1xyXG5cclxuLy8gVGhlIGRlY2ltYWwgcmVwcmVzZW50YXRpb24gb2YgdGhlIGNoYXJhY3RlcnMsIGlzIGNvbnZlcnRlZCB0byB0aGVcclxuLy8gY29ycmVzcG9uZGluZyBiaW5hcnkgd2l0aCB0aGUgZ2V0RW5jb2RpbmcgZnVuY3Rpb25cclxudmFyIGVuY29kaW5ncyA9IFsyMDk1NywgMjk3ODMsIDIzNjM5LCAzMDQ4NSwgMjA5NTEsIDI5ODEzLCAyMzY2OSwgMjA4NTUsIDI5Nzg5LCAyMzY0NSwgMjk5NzUsIDIzODMxLCAzMDUzMywgMjIyOTUsIDMwMTQ5LCAyNDAwNSwgMjE2MjMsIDI5OTgxLCAyMzgzNywgMjIzMDEsIDMwMDIzLCAyMzg3OSwgMzA1NDUsIDIyMzQzLCAzMDE2MSwgMjQwMTcsIDIxOTU5LCAzMDA2NSwgMjM5MjEsIDIyMzg1LCAyOTAxNSwgMTgyNjMsIDI5MTQxLCAxNzg3OSwgMjkwNDUsIDE4MjkzLCAxNzc4MywgMjkwMjEsIDE4MjY5LCAxNzQ3NywgMTc0ODksIDE3NjgxLCAyMDc1MywgMzU3NzBdO1xyXG5cclxuLy8gR2V0IHRoZSBiaW5hcnkgcmVwcmVzZW50YXRpb24gb2YgYSBjaGFyYWN0ZXIgYnkgY29udmVydGluZyB0aGUgZW5jb2RpbmdzXHJcbi8vIGZyb20gZGVjaW1hbCB0byBiaW5hcnlcclxuZnVuY3Rpb24gZ2V0RW5jb2RpbmcoY2hhcmFjdGVyKSB7XHJcblx0cmV0dXJuIGdldEJpbmFyeShjaGFyYWN0ZXJWYWx1ZShjaGFyYWN0ZXIpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0QmluYXJ5KGNoYXJhY3RlclZhbHVlKSB7XHJcblx0cmV0dXJuIGVuY29kaW5nc1tjaGFyYWN0ZXJWYWx1ZV0udG9TdHJpbmcoMik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldENoYXJhY3RlcihjaGFyYWN0ZXJWYWx1ZSkge1xyXG5cdHJldHVybiBjaGFyYWN0ZXJzW2NoYXJhY3RlclZhbHVlXTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2hhcmFjdGVyVmFsdWUoY2hhcmFjdGVyKSB7XHJcblx0cmV0dXJuIGNoYXJhY3RlcnMuaW5kZXhPZihjaGFyYWN0ZXIpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBtb2Q0M2NoZWNrc3VtKGRhdGEpIHtcclxuXHR2YXIgY2hlY2tzdW0gPSAwO1xyXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xyXG5cdFx0Y2hlY2tzdW0gKz0gY2hhcmFjdGVyVmFsdWUoZGF0YVtpXSk7XHJcblx0fVxyXG5cclxuXHRjaGVja3N1bSA9IGNoZWNrc3VtICUgNDM7XHJcblx0cmV0dXJuIGNoZWNrc3VtO1xyXG59XHJcblxyXG5leHBvcnRzLkNPREUzOSA9IENPREUzOTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///758\n");

/***/ }),

/***/ 759:
/*!**************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/Barcode.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nvar Barcode = function Barcode(data, options) {\n  _classCallCheck(this, Barcode);\n\n  this.data = data;\n  this.text = options.text || data;\n  this.options = options;\n};\n\nexports.default = Barcode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9CYXJjb2RlLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIkJhcmNvZGUiLCJkYXRhIiwib3B0aW9ucyIsInRleHQiLCJkZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUM1Q0MsT0FBSyxFQUFFLElBRHFDLEVBQTdDOzs7QUFJQSxTQUFTQyxlQUFULENBQXlCQyxRQUF6QixFQUFtQ0MsV0FBbkMsRUFBZ0QsQ0FBRSxJQUFJLEVBQUVELFFBQVEsWUFBWUMsV0FBdEIsQ0FBSixFQUF3QyxDQUFFLE1BQU0sSUFBSUMsU0FBSixDQUFjLG1DQUFkLENBQU4sQ0FBMkQsQ0FBRTs7QUFFekosSUFBSUMsT0FBTyxHQUFHLFNBQVNBLE9BQVQsQ0FBaUJDLElBQWpCLEVBQXVCQyxPQUF2QixFQUFnQztBQUM3Q04saUJBQWUsQ0FBQyxJQUFELEVBQU9JLE9BQVAsQ0FBZjs7QUFFQSxPQUFLQyxJQUFMLEdBQVlBLElBQVo7QUFDQSxPQUFLRSxJQUFMLEdBQVlELE9BQU8sQ0FBQ0MsSUFBUixJQUFnQkYsSUFBNUI7QUFDQSxPQUFLQyxPQUFMLEdBQWVBLE9BQWY7QUFDQSxDQU5EOztBQVFBUixPQUFPLENBQUNVLE9BQVIsR0FBa0JKLE9BQWxCIiwiZmlsZSI6Ijc1OS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XHJcblx0dmFsdWU6IHRydWVcclxufSk7XHJcblxyXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxyXG5cclxudmFyIEJhcmNvZGUgPSBmdW5jdGlvbiBCYXJjb2RlKGRhdGEsIG9wdGlvbnMpIHtcclxuXHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmFyY29kZSk7XHJcblxyXG5cdHRoaXMuZGF0YSA9IGRhdGE7XHJcblx0dGhpcy50ZXh0ID0gb3B0aW9ucy50ZXh0IHx8IGRhdGE7XHJcblx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxufTtcclxuXHJcbmV4cG9ydHMuZGVmYXVsdCA9IEJhcmNvZGU7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///759\n");

/***/ }),

/***/ 760:
/*!********************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/CODE128/index.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.CODE128C = exports.CODE128B = exports.CODE128A = exports.CODE128 = undefined;\n\nvar _CODE128_AUTO = __webpack_require__(/*! ./CODE128_AUTO.js */ 761);\n\nvar _CODE128_AUTO2 = _interopRequireDefault(_CODE128_AUTO);\n\nvar _CODE128A = __webpack_require__(/*! ./CODE128A.js */ 765);\n\nvar _CODE128A2 = _interopRequireDefault(_CODE128A);\n\nvar _CODE128B = __webpack_require__(/*! ./CODE128B.js */ 766);\n\nvar _CODE128B2 = _interopRequireDefault(_CODE128B);\n\nvar _CODE128C = __webpack_require__(/*! ./CODE128C.js */ 767);\n\nvar _CODE128C2 = _interopRequireDefault(_CODE128C);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nexports.CODE128 = _CODE128_AUTO2.default;\nexports.CODE128A = _CODE128A2.default;\nexports.CODE128B = _CODE128B2.default;\nexports.CODE128C = _CODE128C2.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9DT0RFMTI4L2luZGV4LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQ09ERTEyOEMiLCJDT0RFMTI4QiIsIkNPREUxMjhBIiwiQ09ERTEyOCIsInVuZGVmaW5lZCIsIl9DT0RFMTI4X0FVVE8iLCJyZXF1aXJlIiwiX0NPREUxMjhfQVVUTzIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX0NPREUxMjhBIiwiX0NPREUxMjhBMiIsIl9DT0RFMTI4QiIsIl9DT0RFMTI4QjIiLCJfQ09ERTEyOEMiLCJfQ09ERTEyOEMyIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxPQUFLLEVBQUUsSUFEb0MsRUFBN0M7O0FBR0FELE9BQU8sQ0FBQ0UsUUFBUixHQUFtQkYsT0FBTyxDQUFDRyxRQUFSLEdBQW1CSCxPQUFPLENBQUNJLFFBQVIsR0FBbUJKLE9BQU8sQ0FBQ0ssT0FBUixHQUFrQkMsU0FBM0U7O0FBRUEsSUFBSUMsYUFBYSxHQUFHQyxtQkFBTyxDQUFDLDRCQUFELENBQTNCOztBQUVBLElBQUlDLGNBQWMsR0FBR0Msc0JBQXNCLENBQUNILGFBQUQsQ0FBM0M7O0FBRUEsSUFBSUksU0FBUyxHQUFHSCxtQkFBTyxDQUFDLHdCQUFELENBQXZCOztBQUVBLElBQUlJLFVBQVUsR0FBR0Ysc0JBQXNCLENBQUNDLFNBQUQsQ0FBdkM7O0FBRUEsSUFBSUUsU0FBUyxHQUFHTCxtQkFBTyxDQUFDLHdCQUFELENBQXZCOztBQUVBLElBQUlNLFVBQVUsR0FBR0osc0JBQXNCLENBQUNHLFNBQUQsQ0FBdkM7O0FBRUEsSUFBSUUsU0FBUyxHQUFHUCxtQkFBTyxDQUFDLHdCQUFELENBQXZCOztBQUVBLElBQUlRLFVBQVUsR0FBR04sc0JBQXNCLENBQUNLLFNBQUQsQ0FBdkM7O0FBRUEsU0FBU0wsc0JBQVQsQ0FBZ0NPLEdBQWhDLEVBQXFDLENBQUUsT0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCLEVBQUVFLE9BQU8sRUFBRUYsR0FBWCxFQUFyQyxDQUF3RDs7QUFFL0ZqQixPQUFPLENBQUNLLE9BQVIsR0FBa0JJLGNBQWMsQ0FBQ1UsT0FBakM7QUFDQW5CLE9BQU8sQ0FBQ0ksUUFBUixHQUFtQlEsVUFBVSxDQUFDTyxPQUE5QjtBQUNBbkIsT0FBTyxDQUFDRyxRQUFSLEdBQW1CVyxVQUFVLENBQUNLLE9BQTlCO0FBQ0FuQixPQUFPLENBQUNFLFFBQVIsR0FBbUJjLFVBQVUsQ0FBQ0csT0FBOUIiLCJmaWxlIjoiNzYwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XHJcbiAgdmFsdWU6IHRydWVcclxufSk7XHJcbmV4cG9ydHMuQ09ERTEyOEMgPSBleHBvcnRzLkNPREUxMjhCID0gZXhwb3J0cy5DT0RFMTI4QSA9IGV4cG9ydHMuQ09ERTEyOCA9IHVuZGVmaW5lZDtcclxuXHJcbnZhciBfQ09ERTEyOF9BVVRPID0gcmVxdWlyZSgnLi9DT0RFMTI4X0FVVE8uanMnKTtcclxuXHJcbnZhciBfQ09ERTEyOF9BVVRPMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NPREUxMjhfQVVUTyk7XHJcblxyXG52YXIgX0NPREUxMjhBID0gcmVxdWlyZSgnLi9DT0RFMTI4QS5qcycpO1xyXG5cclxudmFyIF9DT0RFMTI4QTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9DT0RFMTI4QSk7XHJcblxyXG52YXIgX0NPREUxMjhCID0gcmVxdWlyZSgnLi9DT0RFMTI4Qi5qcycpO1xyXG5cclxudmFyIF9DT0RFMTI4QjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9DT0RFMTI4Qik7XHJcblxyXG52YXIgX0NPREUxMjhDID0gcmVxdWlyZSgnLi9DT0RFMTI4Qy5qcycpO1xyXG5cclxudmFyIF9DT0RFMTI4QzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9DT0RFMTI4Qyk7XHJcblxyXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxyXG5cclxuZXhwb3J0cy5DT0RFMTI4ID0gX0NPREUxMjhfQVVUTzIuZGVmYXVsdDtcclxuZXhwb3J0cy5DT0RFMTI4QSA9IF9DT0RFMTI4QTIuZGVmYXVsdDtcclxuZXhwb3J0cy5DT0RFMTI4QiA9IF9DT0RFMTI4QjIuZGVmYXVsdDtcclxuZXhwb3J0cy5DT0RFMTI4QyA9IF9DT0RFMTI4QzIuZGVmYXVsdDsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///760\n");

/***/ }),

/***/ 761:
/*!***************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/CODE128/CODE128_AUTO.js ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _CODE2 = __webpack_require__(/*! ./CODE128 */ 762);\n\nvar _CODE3 = _interopRequireDefault(_CODE2);\n\nvar _auto = __webpack_require__(/*! ./auto */ 764);\n\nvar _auto2 = _interopRequireDefault(_auto);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}\n\nvar CODE128AUTO = function (_CODE) {\n  _inherits(CODE128AUTO, _CODE);\n\n  function CODE128AUTO(data, options) {\n    _classCallCheck(this, CODE128AUTO);\n\n    // ASCII value ranges 0-127, 200-211\n    if (/^[\\x00-\\x7F\\xC8-\\xD3]+$/.test(data)) {\n      var _this = _possibleConstructorReturn(this, (CODE128AUTO.__proto__ || Object.getPrototypeOf(CODE128AUTO)).call(this, (0, _auto2.default)(data), options));\n    } else {\n      var _this = _possibleConstructorReturn(this, (CODE128AUTO.__proto__ || Object.getPrototypeOf(CODE128AUTO)).call(this, data, options));\n    }\n    return _possibleConstructorReturn(_this);\n  }\n\n  return CODE128AUTO;\n}(_CODE3.default);\n\nexports.default = CODE128AUTO;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9DT0RFMTI4L0NPREUxMjhfQVVUTy5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9DT0RFMiIsInJlcXVpcmUiLCJfQ09ERTMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2F1dG8iLCJfYXV0bzIiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJjYWxsIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJwcm90b3R5cGUiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQ09ERTEyOEFVVE8iLCJfQ09ERSIsImRhdGEiLCJvcHRpb25zIiwidGVzdCIsIl90aGlzIiwiZ2V0UHJvdG90eXBlT2YiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzVDQyxPQUFLLEVBQUUsSUFEcUMsRUFBN0M7OztBQUlBLElBQUlDLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQyxvQkFBRCxDQUFwQjs7QUFFQSxJQUFJQyxNQUFNLEdBQUdDLHNCQUFzQixDQUFDSCxNQUFELENBQW5DOztBQUVBLElBQUlJLEtBQUssR0FBR0gsbUJBQU8sQ0FBQyxpQkFBRCxDQUFuQjs7QUFFQSxJQUFJSSxNQUFNLEdBQUdGLHNCQUFzQixDQUFDQyxLQUFELENBQW5DOztBQUVBLFNBQVNELHNCQUFULENBQWdDRyxHQUFoQyxFQUFxQyxDQUFF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dCc7XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcclxuXHR2YWx1ZTogdHJ1ZVxyXG59KTtcclxuXHJcbnZhciBfQ09ERTIgPSByZXF1aXJlKCcuL0NPREUxMjgnKTtcclxuXHJcbnZhciBfQ09ERTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9DT0RFMik7XHJcblxyXG52YXIgX2F1dG8gPSByZXF1aXJlKCcuL2F1dG8nKTtcclxuXHJcbnZhciBfYXV0bzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hdXRvKTtcclxuXHJcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XHJcblxyXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxyXG5cclxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XHJcblxyXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cclxuXHJcbnZhciBDT0RFMTI4QVVUTyA9IGZ1bmN0aW9uIChfQ09ERSkge1xyXG5cdF9pbmhlcml0cyhDT0RFMTI4QVVUTywgX0NPREUpO1xyXG5cclxuXHRmdW5jdGlvbiBDT0RFMTI4QVVUTyhkYXRhLCBvcHRpb25zKSB7XHJcblx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ09ERTEyOEFVVE8pO1xyXG5cclxuXHRcdC8vIEFTQ0lJIHZhbHVlIHJhbmdlcyAwLTEyNywgMjAwLTIxMVxyXG5cdFx0aWYgKC9eW1xceDAwLVxceDdGXFx4QzgtXFx4RDNdKyQvLnRlc3QoZGF0YSkpIHtcclxuXHRcdFx0dmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKENPREUxMjhBVVRPLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ09ERTEyOEFVVE8pKS5jYWxsKHRoaXMsICgwLCBfYXV0bzIuZGVmYXVsdCkoZGF0YSksIG9wdGlvbnMpKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDT0RFMTI4QVVUTy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENPREUxMjhBVVRPKSkuY2FsbCh0aGlzLCBkYXRhLCBvcHRpb25zKSk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMpO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIENPREUxMjhBVVRPO1xyXG59KF9DT0RFMy5kZWZhdWx0KTtcclxuXHJcbmV4cG9ydHMuZGVmYXVsdCA9IENPREUxMjhBVVRPOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///761\n");

/***/ }),

/***/ 762:
/*!**********************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/CODE128/CODE128.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _Barcode2 = __webpack_require__(/*! ../Barcode.js */ 759);\n\nvar _Barcode3 = _interopRequireDefault(_Barcode2);\n\nvar _constants = __webpack_require__(/*! ./constants */ 763);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}\n\n// This is the master class,\n// it does require the start code to be included in the string\nvar CODE128 = function (_Barcode) {\n  _inherits(CODE128, _Barcode);\n\n  function CODE128(data, options) {\n    _classCallCheck(this, CODE128);\n\n    // Get array of ascii codes from data\n    var _this = _possibleConstructorReturn(this, (CODE128.__proto__ || Object.getPrototypeOf(CODE128)).call(this, data.substring(1), options));\n\n    _this.bytes = data.split('').map(function (char) {\n      return char.charCodeAt(0);\n    });\n    return _this;\n  }\n\n  _createClass(CODE128, [{\n    key: 'valid',\n    value: function valid() {\n      // ASCII value ranges 0-127, 200-211\n      return /^[\\x00-\\x7F\\xC8-\\xD3]+$/.test(this.data);\n\n    }\n\n    // The public encoding function\n  },\n  {\n    key: 'encode',\n    value: function encode() {\n      var bytes = this.bytes;\n      // Remove the start code from the bytes and set its index\n      var startIndex = bytes.shift() - 105;\n      // Get start set by index\n      var startSet = _constants.SET_BY_CODE[startIndex];\n\n      if (startSet === undefined) {\n        throw new RangeError('The encoding does not start with a start character.');\n      }\n\n      if (this.shouldEncodeAsEan128() === true) {\n        bytes.unshift(_constants.FNC1);\n      }\n\n      // Start encode with the right type\n      var encodingResult = CODE128.next(bytes, 1, startSet);\n\n      return {\n        text: this.text === this.data ? this.text.replace(/[^\\x20-\\x7E]/g, '') : this.text,\n        data:\n        // Add the start bits\n        CODE128.getBar(startIndex) +\n        // Add the encoded bits\n        encodingResult.result +\n        // Add the checksum\n        CODE128.getBar((encodingResult.checksum + startIndex) % _constants.MODULO) +\n        // Add the end bits\n        CODE128.getBar(_constants.STOP) };\n\n    }\n\n    // GS1-128/EAN-128\n  },\n  {\n    key: 'shouldEncodeAsEan128',\n    value: function shouldEncodeAsEan128() {\n      var isEAN128 = this.options.ean128 || false;\n      if (typeof isEAN128 === 'string') {\n        isEAN128 = isEAN128.toLowerCase() === 'true';\n      }\n      return isEAN128;\n    }\n\n    // Get a bar symbol by index\n  }],\n  [{\n    key: 'getBar',\n    value: function getBar(index) {\n      return _constants.BARS[index] ? _constants.BARS[index].toString() : '';\n    }\n\n    // Correct an index by a set and shift it from the bytes array\n  },\n  {\n    key: 'correctIndex',\n    value: function correctIndex(bytes, set) {\n      if (set === _constants.SET_A) {\n        var charCode = bytes.shift();\n        return charCode < 32 ? charCode + 64 : charCode - 32;\n      } else if (set === _constants.SET_B) {\n        return bytes.shift() - 32;\n      } else {\n        return (bytes.shift() - 48) * 10 + bytes.shift() - 48;\n      }\n    } },\n  {\n    key: 'next',\n    value: function next(bytes, pos, set) {\n      if (!bytes.length) {\n        return { result: '', checksum: 0 };\n      }\n\n      var nextCode = void 0,\n      index = void 0;\n\n      // Special characters\n      if (bytes[0] >= 200) {\n        index = bytes.shift() - 105;\n        var nextSet = _constants.SWAP[index];\n\n        // Swap to other set\n        if (nextSet !== undefined) {\n          nextCode = CODE128.next(bytes, pos + 1, nextSet);\n        }\n        // Continue on current set but encode a special character\n        else {\n            // Shift\n            if ((set === _constants.SET_A || set === _constants.SET_B) && index === _constants.SHIFT) {\n              // Convert the next character so that is encoded correctly\n              bytes[0] = set === _constants.SET_A ? bytes[0] > 95 ? bytes[0] - 96 : bytes[0] : bytes[0] < 32 ? bytes[0] + 96 : bytes[0];\n            }\n            nextCode = CODE128.next(bytes, pos + 1, set);\n          }\n      }\n      // Continue encoding\n      else {\n          index = CODE128.correctIndex(bytes, set);\n          nextCode = CODE128.next(bytes, pos + 1, set);\n        }\n\n      // Get the correct binary encoding and calculate the weight\n      var enc = CODE128.getBar(index);\n      var weight = index * pos;\n\n      return {\n        result: enc + nextCode.result,\n        checksum: weight + nextCode.checksum };\n\n    } }]);\n\n\n  return CODE128;\n}(_Barcode3.default);\n\nexports.default = CODE128;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///762\n");

/***/ }),

/***/ 763:
/*!************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/CODE128/constants.js ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _SET_BY_CODE;\n\nfunction _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}\n\n// constants for internal usage\nvar SET_A = exports.SET_A = 0;\nvar SET_B = exports.SET_B = 1;\nvar SET_C = exports.SET_C = 2;\n\n// Special characters\nvar SHIFT = exports.SHIFT = 98;\nvar START_A = exports.START_A = 103;\nvar START_B = exports.START_B = 104;\nvar START_C = exports.START_C = 105;\nvar MODULO = exports.MODULO = 103;\nvar STOP = exports.STOP = 106;\nvar FNC1 = exports.FNC1 = 207;\n\n// Get set by start code\nvar SET_BY_CODE = exports.SET_BY_CODE = (_SET_BY_CODE = {}, _defineProperty(_SET_BY_CODE, START_A, SET_A), _defineProperty(_SET_BY_CODE, START_B, SET_B), _defineProperty(_SET_BY_CODE, START_C, SET_C), _SET_BY_CODE);\n\n// Get next set by code\nvar SWAP = exports.SWAP = {\n  101: SET_A,\n  100: SET_B,\n  99: SET_C };\n\n\nvar A_START_CHAR = exports.A_START_CHAR = String.fromCharCode(208); // START_A + 105\nvar B_START_CHAR = exports.B_START_CHAR = String.fromCharCode(209); // START_B + 105\nvar C_START_CHAR = exports.C_START_CHAR = String.fromCharCode(210); // START_C + 105\n\n// 128A (Code Set A)\n// ASCII characters 00 to 95 (0–9, A–Z and control codes), special characters, and FNC 1–4\nvar A_CHARS = exports.A_CHARS = \"[\\x00-\\x5F\\xC8-\\xCF]\";\n\n// 128B (Code Set B)\n// ASCII characters 32 to 127 (0–9, A–Z, a–z), special characters, and FNC 1–4\nvar B_CHARS = exports.B_CHARS = \"[\\x20-\\x7F\\xC8-\\xCF]\";\n\n// 128C (Code Set C)\n// 00–99 (encodes two digits with a single code point) and FNC1\nvar C_CHARS = exports.C_CHARS = \"(\\xCF*[0-9]{2}\\xCF*)\";\n\n// CODE128 includes 107 symbols:\n// 103 data symbols, 3 start symbols (A, B and C), and 1 stop symbol (the last one)\n// Each symbol consist of three black bars (1) and three white spaces (0).\nvar BARS = exports.BARS = [11011001100, 11001101100, 11001100110, 10010011000, 10010001100, 10001001100, 10011001000, 10011000100, 10001100100, 11001001000, 11001000100, 11000100100, 10110011100, 10011011100, 10011001110, 10111001100, 10011101100, 10011100110, 11001110010, 11001011100, 11001001110, 11011100100, 11001110100, 11101101110, 11101001100, 11100101100, 11100100110, 11101100100, 11100110100, 11100110010, 11011011000, 11011000110, 11000110110, 10100011000, 10001011000, 10001000110, 10110001000, 10001101000, 10001100010, 11010001000, 11000101000, 11000100010, 10110111000, 10110001110, 10001101110, 10111011000, 10111000110, 10001110110, 11101110110, 11010001110, 11000101110, 11011101000, 11011100010, 11011101110, 11101011000, 11101000110, 11100010110, 11101101000, 11101100010, 11100011010, 11101111010, 11001000010, 11110001010, 10100110000, 10100001100, 10010110000, 10010000110, 10000101100, 10000100110, 10110010000, 10110000100, 10011010000, 10011000010, 10000110100, 10000110010, 11000010010, 11001010000, 11110111010, 11000010100, 10001111010, 10100111100, 10010111100, 10010011110, 10111100100, 10011110100, 10011110010, 11110100100, 11110010100, 11110010010, 11011011110, 11011110110, 11110110110, 10101111000, 10100011110, 10001011110, 10111101000, 10111100010, 11110101000, 11110100010, 10111011110, 10111101110, 11101011110, 11110101110, 11010000100, 11010010000, 11010011100, 1100011101011];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///763\n");

/***/ }),

/***/ 764:
/*!*******************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/CODE128/auto.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _constants = __webpack_require__(/*! ./constants */ 763);\n\n// Match Set functions\nvar matchSetALength = function matchSetALength(string) {\n  return string.match(new RegExp('^' + _constants.A_CHARS + '*'))[0].length;\n};\nvar matchSetBLength = function matchSetBLength(string) {\n  return string.match(new RegExp('^' + _constants.B_CHARS + '*'))[0].length;\n};\nvar matchSetC = function matchSetC(string) {\n  return string.match(new RegExp('^' + _constants.C_CHARS + '*'))[0];\n};\n\n// CODE128A or CODE128B\nfunction autoSelectFromAB(string, isA) {\n  var ranges = isA ? _constants.A_CHARS : _constants.B_CHARS;\n  var untilC = string.match(new RegExp('^(' + ranges + '+?)(([0-9]{2}){2,})([^0-9]|$)'));\n\n  if (untilC) {\n    return untilC[1] + String.fromCharCode(204) + autoSelectFromC(string.substring(untilC[1].length));\n  }\n\n  var chars = string.match(new RegExp('^' + ranges + '+'))[0];\n\n  if (chars.length === string.length) {\n    return string;\n  }\n\n  return chars + String.fromCharCode(isA ? 205 : 206) + autoSelectFromAB(string.substring(chars.length), !isA);\n}\n\n// CODE128C\nfunction autoSelectFromC(string) {\n  var cMatch = matchSetC(string);\n  var length = cMatch.length;\n\n  if (length === string.length) {\n    return string;\n  }\n\n  string = string.substring(length);\n\n  // Select A/B depending on the longest match\n  var isA = matchSetALength(string) >= matchSetBLength(string);\n  return cMatch + String.fromCharCode(isA ? 206 : 205) + autoSelectFromAB(string, isA);\n}\n\n// Detect Code Set (A, B or C) and format the string\n\nexports.default = function (string) {\n  var newString = void 0;\n  var cLength = matchSetC(string).length;\n\n  // Select 128C if the string start with enough digits\n  if (cLength >= 2) {\n    newString = _constants.C_START_CHAR + autoSelectFromC(string);\n  } else {\n    // Select A/B depending on the longest match\n    var isA = matchSetALength(string) > matchSetBLength(string);\n    newString = (isA ? _constants.A_START_CHAR : _constants.B_START_CHAR) + autoSelectFromAB(string, isA);\n  }\n\n  return newString.replace(/[\\xCD\\xCE]([^])[\\xCD\\xCE]/, // Any sequence between 205 and 206 characters\n  function (match, char) {\n    return String.fromCharCode(203) + char;\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9DT0RFMTI4L2F1dG8uanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfY29uc3RhbnRzIiwicmVxdWlyZSIsIm1hdGNoU2V0QUxlbmd0aCIsInN0cmluZyIsIm1hdGNoIiwiUmVnRXhwIiwiQV9DSEFSUyIsImxlbmd0aCIsIm1hdGNoU2V0Qkxlbmd0aCIsIkJfQ0hBUlMiLCJtYXRjaFNldEMiLCJDX0NIQVJTIiwiYXV0b1NlbGVjdEZyb21BQiIsImlzQSIsInJhbmdlcyIsInVudGlsQyIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImF1dG9TZWxlY3RGcm9tQyIsInN1YnN0cmluZyIsImNoYXJzIiwiY01hdGNoIiwiZGVmYXVsdCIsIm5ld1N0cmluZyIsImNMZW5ndGgiLCJDX1NUQVJUX0NIQVIiLCJBX1NUQVJUX0NIQVIiLCJCX1NUQVJUX0NIQVIiLCJyZXBsYWNlIiwiY2hhciJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDNUNDLE9BQUssRUFBRSxJQURxQyxFQUE3Qzs7O0FBSUEsSUFBSUMsVUFBVSxHQUFHQyxtQkFBTyxDQUFDLHNCQUFELENBQXhCOztBQUVBO0FBQ0EsSUFBSUMsZUFBZSxHQUFHLFNBQVNBLGVBQVQsQ0FBeUJDLE1BQXpCLEVBQWlDO0FBQ3RELFNBQU9BLE1BQU0sQ0FBQ0MsS0FBUCxDQUFhLElBQUlDLE1BQUosQ0FBVyxNQUFNTCxVQUFVLENBQUNNLE9BQWpCLEdBQTJCLEdBQXRDLENBQWIsRUFBeUQsQ0FBekQsRUFBNERDLE1BQW5FO0FBQ0EsQ0FGRDtBQUdBLElBQUlDLGVBQWUsR0FBRyxTQUFTQSxlQUFULENBQXlCTCxNQUF6QixFQUFpQztBQUN0RCxTQUFPQSxNQUFNLENBQUNDLEtBQVAsQ0FBYSxJQUFJ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QUFuRDtBQUNBb0IsYUFBUyxHQUFHLENBQUNWLEdBQUcsR0FBR2IsVUFBVSxDQUFDMEIsWUFBZCxHQUE2QjFCLFVBQVUsQ0FBQzJCLFlBQTVDLElBQTREZixnQkFBZ0IsQ0FBQ1QsTUFBRCxFQUFTVSxHQUFULENBQXhGO0FBQ0E7O0FBRUQsU0FBT1UsU0FBUyxDQUFDSyxPQUFWLENBQWtCLDJCQUFsQixFQUErQztBQUN0RCxZQUFVeEIsS0FBVixFQUFpQnlCLElBQWpCLEVBQXVCO0FBQ3RCLFdBQU9iLE1BQU0sQ0FBQ0MsWUFBUCxDQUFvQixHQUFwQixJQUEyQlksSUFBbEM7QUFDQSxHQUhNLENBQVA7QUFJQSxDQWpCRCIsImZpbGUiOiI3NjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcclxuXHR2YWx1ZTogdHJ1ZVxyXG59KTtcclxuXHJcbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKTtcclxuXHJcbi8vIE1hdGNoIFNldCBmdW5jdGlvbnNcclxudmFyIG1hdGNoU2V0QUxlbmd0aCA9IGZ1bmN0aW9uIG1hdGNoU2V0QUxlbmd0aChzdHJpbmcpIHtcclxuXHRyZXR1cm4gc3RyaW5nLm1hdGNoKG5ldyBSZWdFeHAoJ14nICsgX2NvbnN0YW50cy5BX0NIQVJTICsgJyonKSlbMF0ubGVuZ3RoO1xyXG59O1xyXG52YXIgbWF0Y2hTZXRCTGVuZ3RoID0gZnVuY3Rpb24gbWF0Y2hTZXRCTGVuZ3RoKHN0cmluZykge1xyXG5cdHJldHVybiBzdHJpbmcubWF0Y2gobmV3IFJlZ0V4cCgnXicgKyBfY29uc3RhbnRzLkJfQ0hBUlMgKyAnKicpKVswXS5sZW5ndGg7XHJcbn07XHJcbnZhciBtYXRjaFNldEMgPSBmdW5jdGlvbiBtYXRjaFNldEMoc3RyaW5nKSB7XHJcblx0cmV0dXJuIHN0cmluZy5tYXRjaChuZXcgUmVnRXhwKCdeJyArIF9jb25zdGFudHMuQ19DSEFSUyArICcqJykpWzBdO1xyXG59O1xyXG5cclxuLy8gQ09ERTEyOEEgb3IgQ09ERTEyOEJcclxuZnVuY3Rpb24gYXV0b1NlbGVjdEZyb21BQihzdHJpbmcsIGlzQSkge1xyXG5cdHZhciByYW5nZXMgPSBpc0EgPyBfY29uc3RhbnRzLkFfQ0hBUlMgOiBfY29uc3RhbnRzLkJfQ0hBUlM7XHJcblx0dmFyIHVudGlsQyA9IHN0cmluZy5tYXRjaChuZXcgUmVnRXhwKCdeKCcgKyByYW5nZXMgKyAnKz8pKChbMC05XXsyfSl7Mix9KShbXjAtOV18JCknKSk7XHJcblxyXG5cdGlmICh1bnRpbEMpIHtcclxuXHRcdHJldHVybiB1bnRpbENbMV0gKyBTdHJpbmcuZnJvbUNoYXJDb2RlKDIwNCkgKyBhdXRvU2VsZWN0RnJvbUMoc3RyaW5nLnN1YnN0cmluZyh1bnRpbENbMV0ubGVuZ3RoKSk7XHJcblx0fVxyXG5cclxuXHR2YXIgY2hhcnMgPSBzdHJpbmcubWF0Y2gobmV3IFJlZ0V4cCgnXicgKyByYW5nZXMgKyAnKycpKVswXTtcclxuXHJcblx0aWYgKGNoYXJzLmxlbmd0aCA9PT0gc3RyaW5nLmxlbmd0aCkge1xyXG5cdFx0cmV0dXJuIHN0cmluZztcclxuXHR9XHJcblxyXG5cdHJldHVybiBjaGFycyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaXNBID8gMjA1IDogMjA2KSArIGF1dG9TZWxlY3RGcm9tQUIoc3RyaW5nLnN1YnN0cmluZyhjaGFycy5sZW5ndGgpLCAhaXNBKTtcclxufVxyXG5cclxuLy8gQ09ERTEyOENcclxuZnVuY3Rpb24gYXV0b1NlbGVjdEZyb21DKHN0cmluZykge1xyXG5cdHZhciBjTWF0Y2ggPSBtYXRjaFNldEMoc3RyaW5nKTtcclxuXHR2YXIgbGVuZ3RoID0gY01hdGNoLmxlbmd0aDtcclxuXHJcblx0aWYgKGxlbmd0aCA9PT0gc3RyaW5nLmxlbmd0aCkge1xyXG5cdFx0cmV0dXJuIHN0cmluZztcclxuXHR9XHJcblxyXG5cdHN0cmluZyA9IHN0cmluZy5zdWJzdHJpbmcobGVuZ3RoKTtcclxuXHJcblx0Ly8gU2VsZWN0IEEvQiBkZXBlbmRpbmcgb24gdGhlIGxvbmdlc3QgbWF0Y2hcclxuXHR2YXIgaXNBID0gbWF0Y2hTZXRBTGVuZ3RoKHN0cmluZykgPj0gbWF0Y2hTZXRCTGVuZ3RoKHN0cmluZyk7XHJcblx0cmV0dXJuIGNNYXRjaCArIFN0cmluZy5mcm9tQ2hhckNvZGUoaXNBID8gMjA2IDogMjA1KSArIGF1dG9TZWxlY3RGcm9tQUIoc3RyaW5nLCBpc0EpO1xyXG59XHJcblxyXG4vLyBEZXRlY3QgQ29kZSBTZXQgKEEsIEIgb3IgQykgYW5kIGZvcm1hdCB0aGUgc3RyaW5nXHJcblxyXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XHJcblx0dmFyIG5ld1N0cmluZyA9IHZvaWQgMDtcclxuXHR2YXIgY0xlbmd0aCA9IG1hdGNoU2V0QyhzdHJpbmcpLmxlbmd0aDtcclxuXHJcblx0Ly8gU2VsZWN0IDEyOEMgaWYgdGhlIHN0cmluZyBzdGFydCB3aXRoIGVub3VnaCBkaWdpdHNcclxuXHRpZiAoY0xlbmd0aCA+PSAyKSB7XHJcblx0XHRuZXdTdHJpbmcgPSBfY29uc3RhbnRzLkNfU1RBUlRfQ0hBUiArIGF1dG9TZWxlY3RGcm9tQyhzdHJpbmcpO1xyXG5cdH0gZWxzZSB7XHJcblx0XHQvLyBTZWxlY3QgQS9CIGRlcGVuZGluZyBvbiB0aGUgbG9uZ2VzdCBtYXRjaFxyXG5cdFx0dmFyIGlzQSA9IG1hdGNoU2V0QUxlbmd0aChzdHJpbmcpID4gbWF0Y2hTZXRCTGVuZ3RoKHN0cmluZyk7XHJcblx0XHRuZXdTdHJpbmcgPSAoaXNBID8gX2NvbnN0YW50cy5BX1NUQVJUX0NIQVIgOiBfY29uc3RhbnRzLkJfU1RBUlRfQ0hBUikgKyBhdXRvU2VsZWN0RnJvbUFCKHN0cmluZywgaXNBKTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBuZXdTdHJpbmcucmVwbGFjZSgvW1xceENEXFx4Q0VdKFteXSlbXFx4Q0RcXHhDRV0vLCAvLyBBbnkgc2VxdWVuY2UgYmV0d2VlbiAyMDUgYW5kIDIwNiBjaGFyYWN0ZXJzXHJcblx0ZnVuY3Rpb24gKG1hdGNoLCBjaGFyKSB7XHJcblx0XHRyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSgyMDMpICsgY2hhcjtcclxuXHR9KTtcclxufTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///764\n");

/***/ }),

/***/ 765:
/*!***********************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/CODE128/CODE128A.js ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _CODE2 = __webpack_require__(/*! ./CODE128.js */ 762);\n\nvar _CODE3 = _interopRequireDefault(_CODE2);\n\nvar _constants = __webpack_require__(/*! ./constants */ 763);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}\n\nvar CODE128A = function (_CODE) {\n  _inherits(CODE128A, _CODE);\n\n  function CODE128A(string, options) {\n    _classCallCheck(this, CODE128A);\n\n    return _possibleConstructorReturn(this, (CODE128A.__proto__ || Object.getPrototypeOf(CODE128A)).call(this, _constants.A_START_CHAR + string, options));\n  }\n\n  _createClass(CODE128A, [{\n    key: 'valid',\n    value: function valid() {\n      return new RegExp('^' + _constants.A_CHARS + '+$').test(this.data);\n    } }]);\n\n\n  return CODE128A;\n}(_CODE3.default);\n\nexports.default = CODE128A;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9DT0RFMTI4L0NPREUxMjhBLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJrZXkiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3RvdHlwZSIsIl9DT0RFMiIsInJlcXVpcmUiLCJfQ09ERTMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2NvbnN0YW50cyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJUeXBlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJjYWxsIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQ09ERTEyOEEiLCJfQ09ERSIsInN0cmluZyIsIm9wdGlvbnMiLCJnZXRQcm90b3R5cGVPZiIsIkFfU1RBUlRfQ0hBUiIsInZhbGlkIiwiUmVnRXhwIiwiQV9DSEFSUyIsInRlc3QiLCJkYXRhIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUM1Q0MsT0FBSyxFQUFFLElBRHFDLEVBQTdDOzs7QUFJQSxJQUFJQyxZQUFZLEdBQUcsWUFBWSxDQUFFLFNBQVNDLGdCQUFULENBQTBCQyxNQUExQixFQUFrQ0MsS0FBbEMsRUFBeUMsQ0FBRSxLQUFL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Qy9CUixXQUFTLENBQUNPLFFBQUQsRUFBV0MsS0FBWCxDQUFUOztBQUVBLFdBQVNELFFBQVQsQ0FBa0JFLE1BQWxCLEVBQTBCQyxPQUExQixFQUFtQztBQUNsQ2pCLG1CQUFlLENBQUMsSUFBRCxFQUFPYyxRQUFQLENBQWY7O0FBRUEsV0FBT1gsMEJBQTBCLENBQUMsSUFBRCxFQUFPLENBQUNXLFFBQVEsQ0FBQ0QsU0FBVCxJQUFzQnhDLE1BQU0sQ0FBQzZDLGNBQVAsQ0FBc0JKLFFBQXRCLENBQXZCLEVBQXdEVCxJQUF4RCxDQUE2RCxJQUE3RCxFQUFtRVQsVUFBVSxDQUFDdUIsWUFBWCxHQUEwQkgsTUFBN0YsRUFBcUdDLE9BQXJHLENBQVAsQ0FBakM7QUFDQTs7QUFFRHhDLGNBQVksQ0FBQ3FDLFFBQUQsRUFBVyxDQUFDO0FBQ3ZCM0IsT0FBRyxFQUFFLE9BRGtCO0FBRXZCWCxTQUFLLEVBQUUsU0FBUzRDLEtBQVQsR0FBaUI7QUFDdkIsYUFBTyxJQUFJQyxNQUFKLENBQVcsTUFBTXpCLFVBQVUsQ0FBQzBCLE9BQWpCLEdBQTJCLElBQXRDLEVBQTRDQyxJQUE1QyxDQUFpRCxLQUFLQyxJQUF0RCxDQUFQO0FBQ0EsS0FKc0IsRUFBRCxDQUFYLENBQVo7OztBQU9BLFNBQU9WLFFBQVA7QUFDQSxDQWpCYyxDQWlCYnBCLE1BQU0sQ0FBQ0ssT0FqQk0sQ0FBZjs7QUFtQkF4QixPQUFPLENBQUN3QixPQUFSLEdBQWtCZSxRQUFsQiIsImZpbGUiOiI3NjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcclxuXHR2YWx1ZTogdHJ1ZVxyXG59KTtcclxuXHJcbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XHJcblxyXG52YXIgX0NPREUyID0gcmVxdWlyZSgnLi9DT0RFMTI4LmpzJyk7XHJcblxyXG52YXIgX0NPREUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ09ERTIpO1xyXG5cclxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xyXG5cclxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cclxuXHJcbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XHJcblxyXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cclxuXHJcbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxyXG5cclxudmFyIENPREUxMjhBID0gZnVuY3Rpb24gKF9DT0RFKSB7XHJcblx0X2luaGVyaXRzKENPREUxMjhBLCBfQ09ERSk7XHJcblxyXG5cdGZ1bmN0aW9uIENPREUxMjhBKHN0cmluZywgb3B0aW9ucykge1xyXG5cdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIENPREUxMjhBKTtcclxuXHJcblx0XHRyZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKENPREUxMjhBLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ09ERTEyOEEpKS5jYWxsKHRoaXMsIF9jb25zdGFudHMuQV9TVEFSVF9DSEFSICsgc3RyaW5nLCBvcHRpb25zKSk7XHJcblx0fVxyXG5cclxuXHRfY3JlYXRlQ2xhc3MoQ09ERTEyOEEsIFt7XHJcblx0XHRrZXk6ICd2YWxpZCcsXHJcblx0XHR2YWx1ZTogZnVuY3Rpb24gdmFsaWQoKSB7XHJcblx0XHRcdHJldHVybiBuZXcgUmVnRXhwKCdeJyArIF9jb25zdGFudHMuQV9DSEFSUyArICcrJCcpLnRlc3QodGhpcy5kYXRhKTtcclxuXHRcdH1cclxuXHR9XSk7XHJcblxyXG5cdHJldHVybiBDT0RFMTI4QTtcclxufShfQ09ERTMuZGVmYXVsdCk7XHJcblxyXG5leHBvcnRzLmRlZmF1bHQgPSBDT0RFMTI4QTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///765\n");

/***/ }),

/***/ 766:
/*!***********************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/CODE128/CODE128B.js ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _CODE2 = __webpack_require__(/*! ./CODE128.js */ 762);\n\nvar _CODE3 = _interopRequireDefault(_CODE2);\n\nvar _constants = __webpack_require__(/*! ./constants */ 763);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}\n\nvar CODE128B = function (_CODE) {\n  _inherits(CODE128B, _CODE);\n\n  function CODE128B(string, options) {\n    _classCallCheck(this, CODE128B);\n\n    return _possibleConstructorReturn(this, (CODE128B.__proto__ || Object.getPrototypeOf(CODE128B)).call(this, _constants.B_START_CHAR + string, options));\n  }\n\n  _createClass(CODE128B, [{\n    key: 'valid',\n    value: function valid() {\n      return new RegExp('^' + _constants.B_CHARS + '+$').test(this.data);\n    } }]);\n\n\n  return CODE128B;\n}(_CODE3.default);\n\nexports.default = CODE128B;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9DT0RFMTI4L0NPREUxMjhCLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJrZXkiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3RvdHlwZSIsIl9DT0RFMiIsInJlcXVpcmUiLCJfQ09ERTMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2NvbnN0YW50cyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJUeXBlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJjYWxsIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQ09ERTEyOEIiLCJfQ09ERSIsInN0cmluZyIsIm9wdGlvbnMiLCJnZXRQcm90b3R5cGVPZiIsIkJfU1RBUlRfQ0hBUiIsInZhbGlkIiwiUmVnRXhwIiwiQl9DSEFSUyIsInRlc3QiLCJkYXRhIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUM1Q0MsT0FBSyxFQUFFLElBRHFDLEVBQTdDOzs7QUFJQSxJQUFJQyxZQUFZLEdBQUcsWUFBWSxDQUFFLFNBQVNDLGdCQUFULENBQTBCQyxNQUExQixFQUFrQ0MsS0FBbEMsRUFBeUMsQ0FBRSxLQUFL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Qy9CUixXQUFTLENBQUNPLFFBQUQsRUFBV0MsS0FBWCxDQUFUOztBQUVBLFdBQVNELFFBQVQsQ0FBa0JFLE1BQWxCLEVBQTBCQyxPQUExQixFQUFtQztBQUNsQ2pCLG1CQUFlLENBQUMsSUFBRCxFQUFPYyxRQUFQLENBQWY7O0FBRUEsV0FBT1gsMEJBQTBCLENBQUMsSUFBRCxFQUFPLENBQUNXLFFBQVEsQ0FBQ0QsU0FBVCxJQUFzQnhDLE1BQU0sQ0FBQzZDLGNBQVAsQ0FBc0JKLFFBQXRCLENBQXZCLEVBQXdEVCxJQUF4RCxDQUE2RCxJQUE3RCxFQUFtRVQsVUFBVSxDQUFDdUIsWUFBWCxHQUEwQkgsTUFBN0YsRUFBcUdDLE9BQXJHLENBQVAsQ0FBakM7QUFDQTs7QUFFRHhDLGNBQVksQ0FBQ3FDLFFBQUQsRUFBVyxDQUFDO0FBQ3ZCM0IsT0FBRyxFQUFFLE9BRGtCO0FBRXZCWCxTQUFLLEVBQUUsU0FBUzRDLEtBQVQsR0FBaUI7QUFDdkIsYUFBTyxJQUFJQyxNQUFKLENBQVcsTUFBTXpCLFVBQVUsQ0FBQzBCLE9BQWpCLEdBQTJCLElBQXRDLEVBQTRDQyxJQUE1QyxDQUFpRCxLQUFLQyxJQUF0RCxDQUFQO0FBQ0EsS0FKc0IsRUFBRCxDQUFYLENBQVo7OztBQU9BLFNBQU9WLFFBQVA7QUFDQSxDQWpCYyxDQWlCYnBCLE1BQU0sQ0FBQ0ssT0FqQk0sQ0FBZjs7QUFtQkF4QixPQUFPLENBQUN3QixPQUFSLEdBQWtCZSxRQUFsQiIsImZpbGUiOiI3NjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcclxuXHR2YWx1ZTogdHJ1ZVxyXG59KTtcclxuXHJcbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XHJcblxyXG52YXIgX0NPREUyID0gcmVxdWlyZSgnLi9DT0RFMTI4LmpzJyk7XHJcblxyXG52YXIgX0NPREUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ09ERTIpO1xyXG5cclxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xyXG5cclxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cclxuXHJcbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XHJcblxyXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cclxuXHJcbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxyXG5cclxudmFyIENPREUxMjhCID0gZnVuY3Rpb24gKF9DT0RFKSB7XHJcblx0X2luaGVyaXRzKENPREUxMjhCLCBfQ09ERSk7XHJcblxyXG5cdGZ1bmN0aW9uIENPREUxMjhCKHN0cmluZywgb3B0aW9ucykge1xyXG5cdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIENPREUxMjhCKTtcclxuXHJcblx0XHRyZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKENPREUxMjhCLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ09ERTEyOEIpKS5jYWxsKHRoaXMsIF9jb25zdGFudHMuQl9TVEFSVF9DSEFSICsgc3RyaW5nLCBvcHRpb25zKSk7XHJcblx0fVxyXG5cclxuXHRfY3JlYXRlQ2xhc3MoQ09ERTEyOEIsIFt7XHJcblx0XHRrZXk6ICd2YWxpZCcsXHJcblx0XHR2YWx1ZTogZnVuY3Rpb24gdmFsaWQoKSB7XHJcblx0XHRcdHJldHVybiBuZXcgUmVnRXhwKCdeJyArIF9jb25zdGFudHMuQl9DSEFSUyArICcrJCcpLnRlc3QodGhpcy5kYXRhKTtcclxuXHRcdH1cclxuXHR9XSk7XHJcblxyXG5cdHJldHVybiBDT0RFMTI4QjtcclxufShfQ09ERTMuZGVmYXVsdCk7XHJcblxyXG5leHBvcnRzLmRlZmF1bHQgPSBDT0RFMTI4QjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///766\n");

/***/ }),

/***/ 767:
/*!***********************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/CODE128/CODE128C.js ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _CODE2 = __webpack_require__(/*! ./CODE128.js */ 762);\n\nvar _CODE3 = _interopRequireDefault(_CODE2);\n\nvar _constants = __webpack_require__(/*! ./constants */ 763);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}\n\nvar CODE128C = function (_CODE) {\n  _inherits(CODE128C, _CODE);\n\n  function CODE128C(string, options) {\n    _classCallCheck(this, CODE128C);\n\n    return _possibleConstructorReturn(this, (CODE128C.__proto__ || Object.getPrototypeOf(CODE128C)).call(this, _constants.C_START_CHAR + string, options));\n  }\n\n  _createClass(CODE128C, [{\n    key: 'valid',\n    value: function valid() {\n      return new RegExp('^' + _constants.C_CHARS + '+$').test(this.data);\n    } }]);\n\n\n  return CODE128C;\n}(_CODE3.default);\n\nexports.default = CODE128C;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9DT0RFMTI4L0NPREUxMjhDLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJrZXkiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3RvdHlwZSIsIl9DT0RFMiIsInJlcXVpcmUiLCJfQ09ERTMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2NvbnN0YW50cyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJUeXBlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJjYWxsIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQ09ERTEyOEMiLCJfQ09ERSIsInN0cmluZyIsIm9wdGlvbnMiLCJnZXRQcm90b3R5cGVPZiIsIkNfU1RBUlRfQ0hBUiIsInZhbGlkIiwiUmVnRXhwIiwiQ19DSEFSUyIsInRlc3QiLCJkYXRhIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUM1Q0MsT0FBSyxFQUFFLElBRHFDLEVBQTdDOzs7QUFJQSxJQUFJQyxZQUFZLEdBQUcsWUFBWSxDQUFFLFNBQVNDLGdCQUFULENBQTBCQyxNQUExQixFQUFrQ0MsS0FBbEMsRUFBeUMsQ0FBRSxLQUFL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Qy9CUixXQUFTLENBQUNPLFFBQUQsRUFBV0MsS0FBWCxDQUFUOztBQUVBLFdBQVNELFFBQVQsQ0FBa0JFLE1BQWxCLEVBQTBCQyxPQUExQixFQUFtQztBQUNsQ2pCLG1CQUFlLENBQUMsSUFBRCxFQUFPYyxRQUFQLENBQWY7O0FBRUEsV0FBT1gsMEJBQTBCLENBQUMsSUFBRCxFQUFPLENBQUNXLFFBQVEsQ0FBQ0QsU0FBVCxJQUFzQnhDLE1BQU0sQ0FBQzZDLGNBQVAsQ0FBc0JKLFFBQXRCLENBQXZCLEVBQXdEVCxJQUF4RCxDQUE2RCxJQUE3RCxFQUFtRVQsVUFBVSxDQUFDdUIsWUFBWCxHQUEwQkgsTUFBN0YsRUFBcUdDLE9BQXJHLENBQVAsQ0FBakM7QUFDQTs7QUFFRHhDLGNBQVksQ0FBQ3FDLFFBQUQsRUFBVyxDQUFDO0FBQ3ZCM0IsT0FBRyxFQUFFLE9BRGtCO0FBRXZCWCxTQUFLLEVBQUUsU0FBUzRDLEtBQVQsR0FBaUI7QUFDdkIsYUFBTyxJQUFJQyxNQUFKLENBQVcsTUFBTXpCLFVBQVUsQ0FBQzBCLE9BQWpCLEdBQTJCLElBQXRDLEVBQTRDQyxJQUE1QyxDQUFpRCxLQUFLQyxJQUF0RCxDQUFQO0FBQ0EsS0FKc0IsRUFBRCxDQUFYLENBQVo7OztBQU9BLFNBQU9WLFFBQVA7QUFDQSxDQWpCYyxDQWlCYnBCLE1BQU0sQ0FBQ0ssT0FqQk0sQ0FBZjs7QUFtQkF4QixPQUFPLENBQUN3QixPQUFSLEdBQWtCZSxRQUFsQiIsImZpbGUiOiI3NjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcclxuXHR2YWx1ZTogdHJ1ZVxyXG59KTtcclxuXHJcbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XHJcblxyXG52YXIgX0NPREUyID0gcmVxdWlyZSgnLi9DT0RFMTI4LmpzJyk7XHJcblxyXG52YXIgX0NPREUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ09ERTIpO1xyXG5cclxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xyXG5cclxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cclxuXHJcbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XHJcblxyXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cclxuXHJcbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxyXG5cclxudmFyIENPREUxMjhDID0gZnVuY3Rpb24gKF9DT0RFKSB7XHJcblx0X2luaGVyaXRzKENPREUxMjhDLCBfQ09ERSk7XHJcblxyXG5cdGZ1bmN0aW9uIENPREUxMjhDKHN0cmluZywgb3B0aW9ucykge1xyXG5cdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIENPREUxMjhDKTtcclxuXHJcblx0XHRyZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKENPREUxMjhDLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ09ERTEyOEMpKS5jYWxsKHRoaXMsIF9jb25zdGFudHMuQ19TVEFSVF9DSEFSICsgc3RyaW5nLCBvcHRpb25zKSk7XHJcblx0fVxyXG5cclxuXHRfY3JlYXRlQ2xhc3MoQ09ERTEyOEMsIFt7XHJcblx0XHRrZXk6ICd2YWxpZCcsXHJcblx0XHR2YWx1ZTogZnVuY3Rpb24gdmFsaWQoKSB7XHJcblx0XHRcdHJldHVybiBuZXcgUmVnRXhwKCdeJyArIF9jb25zdGFudHMuQ19DSEFSUyArICcrJCcpLnRlc3QodGhpcy5kYXRhKTtcclxuXHRcdH1cclxuXHR9XSk7XHJcblxyXG5cdHJldHVybiBDT0RFMTI4QztcclxufShfQ09ERTMuZGVmYXVsdCk7XHJcblxyXG5leHBvcnRzLmRlZmF1bHQgPSBDT0RFMTI4QzsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///767\n");

/***/ }),

/***/ 768:
/*!********************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/EAN_UPC/index.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.UPCE = exports.UPC = exports.EAN2 = exports.EAN5 = exports.EAN8 = exports.EAN13 = undefined;\n\nvar _EAN = __webpack_require__(/*! ./EAN13.js */ 769);\n\nvar _EAN2 = _interopRequireDefault(_EAN);\n\nvar _EAN3 = __webpack_require__(/*! ./EAN8.js */ 773);\n\nvar _EAN4 = _interopRequireDefault(_EAN3);\n\nvar _EAN5 = __webpack_require__(/*! ./EAN5.js */ 774);\n\nvar _EAN6 = _interopRequireDefault(_EAN5);\n\nvar _EAN7 = __webpack_require__(/*! ./EAN2.js */ 775);\n\nvar _EAN8 = _interopRequireDefault(_EAN7);\n\nvar _UPC = __webpack_require__(/*! ./UPC.js */ 776);\n\nvar _UPC2 = _interopRequireDefault(_UPC);\n\nvar _UPCE = __webpack_require__(/*! ./UPCE.js */ 777);\n\nvar _UPCE2 = _interopRequireDefault(_UPCE);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nexports.EAN13 = _EAN2.default;\nexports.EAN8 = _EAN4.default;\nexports.EAN5 = _EAN6.default;\nexports.EAN2 = _EAN8.default;\nexports.UPC = _UPC2.default;\nexports.UPCE = _UPCE2.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9FQU5fVVBDL2luZGV4LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiVVBDRSIsIlVQQyIsIkVBTjIiLCJFQU41IiwiRUFOOCIsIkVBTjEzIiwidW5kZWZpbmVkIiwiX0VBTiIsInJlcXVpcmUiLCJfRUFOMiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfRUFOMyIsIl9FQU40IiwiX0VBTjUiLCJfRUFONiIsIl9FQU43IiwiX0VBTjgiLCJfVVBDIiwiX1VQQzIiLCJfVVBDRSIsIl9VUENFMiIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsT0FBSyxFQUFFLElBRG9DLEVBQTdDOztBQUdBRCxPQUFPLENBQUNFLElBQVIsR0FBZUYsT0FBTyxDQUFDRyxHQUFSLEdBQWNILE9BQU8sQ0FBQ0ksSUFBUixHQUFlSixPQUFPLENBQUNLLElBQVIsR0FBZUwsT0FBTyxDQUFDTSxJQUFSLEdBQWVOLE9BQU8sQ0FBQ08sS0FBUixHQUFnQkMsU0FBMUY7O0FBRUEsSUFBSUMsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLHFCQUFELENBQWxCOztBQUVBLElBQUlDLEtBQUssR0FBR0Msc0JBQXNCLENBQUNILElBQUQsQ0FBbEM7O0FBRUEsSUFBSUksS0FBSyxHQUFHSCxtQkFBTyxDQUFDLG9CQUFELENBQW5COztBQUVBLElBQUlJLEtBQUssR0FBR0Ysc0JBQXNCLENBQUNDLEtBQUQsQ0FBbEM7O0FBRUEsSUFBSUUsS0FBSyxHQUFHTCxtQkFBTyxDQUFDLG9CQUFELENBQW5COztBQUVBLElBQUlNLEtBQUssR0FBR0osc0JBQXNCLENBQUNHLEtBQUQsQ0FBbEM7O0FBRUEsSUFBSUUsS0FBSyxHQUFHUCxtQkFBTyxDQUFDLG9CQUFELENBQW5COztBQUVBLElBQUlRLEtBQUssR0FBR04sc0JBQXNCLENBQUNLLEtBQUQsQ0FBbEM7O0FBRUEsSUFBSUUsSUFBSSxHQUFHVCxtQkFBTyxDQUFDLG1CQUFELENBQWxCOztBQUVBLElBQUlVLEtBQUssR0FBR1Isc0JBQXNCLENBQUNPLElBQUQsQ0FBbEM7O0FBRUEsSUFBSUUsS0FBSyxHQUFHWCxtQkFBTyxDQUFDLG9CQUFELENBQW5COztBQUVBLElBQUlZLE1BQU0sR0FBR1Ysc0JBQXNCLENBQUNTLEtBQUQsQ0FBbkM7O0FBRUEsU0FBU1Qsc0JBQVQsQ0FBZ0NXLEdBQWhDLEVBQXFDLENBQUUsT0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCLEVBQUVFLE9BQU8sRUFBRUYsR0FBWCxFQUFyQyxDQUF3RDs7QUFFL0Z2QixPQUFPLENBQUNPLEtBQVIsR0FBZ0JJLEtBQUssQ0FBQ2MsT0FBdEI7QUFDQXpCLE9BQU8sQ0FBQ00sSUFBUixHQUFlUSxLQUFLLENBQUNXLE9BQXJCO0FBQ0F6QixPQUFPLENBQUNLLElBQVIsR0FBZVcsS0FBSyxDQUFDUyxPQUFyQjtBQUNBekIsT0FBTyxDQUFDSSxJQUFSLEdBQWVjLEtBQUssQ0FBQ08sT0FBckI7QUFDQXpCLE9BQU8sQ0FBQ0csR0FBUixHQUFjaUIsS0FBSyxDQUFDSyxPQUFwQjtBQUNBekIsT0FBTyxDQUFDRSxJQUFSLEdBQWVvQixNQUFNLENBQUNHLE9BQXRCIiwiZmlsZSI6Ijc2OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xyXG4gIHZhbHVlOiB0cnVlXHJcbn0pO1xyXG5leHBvcnRzLlVQQ0UgPSBleHBvcnRzLlVQQyA9IGV4cG9ydHMuRUFOMiA9IGV4cG9ydHMuRUFONSA9IGV4cG9ydHMuRUFOOCA9IGV4cG9ydHMuRUFOMTMgPSB1bmRlZmluZWQ7XHJcblxyXG52YXIgX0VBTiA9IHJlcXVpcmUoJy4vRUFOMTMuanMnKTtcclxuXHJcbnZhciBfRUFOMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0VBTik7XHJcblxyXG52YXIgX0VBTjMgPSByZXF1aXJlKCcuL0VBTjguanMnKTtcclxuXHJcbnZhciBfRUFONCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0VBTjMpO1xyXG5cclxudmFyIF9FQU41ID0gcmVxdWlyZSgnLi9FQU41LmpzJyk7XHJcblxyXG52YXIgX0VBTjYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9FQU41KTtcclxuXHJcbnZhciBfRUFONyA9IHJlcXVpcmUoJy4vRUFOMi5qcycpO1xyXG5cclxudmFyIF9FQU44ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRUFONyk7XHJcblxyXG52YXIgX1VQQyA9IHJlcXVpcmUoJy4vVVBDLmpzJyk7XHJcblxyXG52YXIgX1VQQzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9VUEMpO1xyXG5cclxudmFyIF9VUENFID0gcmVxdWlyZSgnLi9VUENFLmpzJyk7XHJcblxyXG52YXIgX1VQQ0UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVVBDRSk7XHJcblxyXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxyXG5cclxuZXhwb3J0cy5FQU4xMyA9IF9FQU4yLmRlZmF1bHQ7XHJcbmV4cG9ydHMuRUFOOCA9IF9FQU40LmRlZmF1bHQ7XHJcbmV4cG9ydHMuRUFONSA9IF9FQU42LmRlZmF1bHQ7XHJcbmV4cG9ydHMuRUFOMiA9IF9FQU44LmRlZmF1bHQ7XHJcbmV4cG9ydHMuVVBDID0gX1VQQzIuZGVmYXVsdDtcclxuZXhwb3J0cy5VUENFID0gX1VQQ0UyLmRlZmF1bHQ7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///768\n");

/***/ }),

/***/ 769:
/*!********************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/EAN_UPC/EAN13.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _get = function get(object, property, receiver) {if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {var parent = Object.getPrototypeOf(object);if (parent === null) {return undefined;} else {return get(parent, property, receiver);}} else if (\"value\" in desc) {return desc.value;} else {var getter = desc.get;if (getter === undefined) {return undefined;}return getter.call(receiver);}};\n\nvar _constants = __webpack_require__(/*! ./constants */ 770);\n\nvar _EAN2 = __webpack_require__(/*! ./EAN */ 771);\n\nvar _EAN3 = _interopRequireDefault(_EAN2);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} // Encoding documentation:\n// https://en.wikipedia.org/wiki/International_Article_Number_(EAN)#Binary_encoding_of_data_digits_into_EAN-13_barcode\n\n// Calculate the checksum digit\n// https://en.wikipedia.org/wiki/International_Article_Number_(EAN)#Calculation_of_checksum_digit\nvar checksum = function checksum(number) {\n  var res = number.substr(0, 12).split('').map(function (n) {\n    return +n;\n  }).reduce(function (sum, a, idx) {\n    return idx % 2 ? sum + a * 3 : sum + a;\n  }, 0);\n\n  return (10 - res % 10) % 10;\n};\n\nvar EAN13 = function (_EAN) {\n  _inherits(EAN13, _EAN);\n\n  function EAN13(data, options) {\n    _classCallCheck(this, EAN13);\n\n    // Add checksum if it does not exist\n    if (data.search(/^[0-9]{12}$/) !== -1) {\n      data += checksum(data);\n    }\n\n    // Adds a last character to the end of the barcode\n    var _this = _possibleConstructorReturn(this, (EAN13.__proto__ || Object.getPrototypeOf(EAN13)).call(this, data, options));\n\n    _this.lastChar = options.lastChar;\n    return _this;\n  }\n\n  _createClass(EAN13, [{\n    key: 'valid',\n    value: function valid() {\n      return this.data.search(/^[0-9]{13}$/) !== -1 && +this.data[12] === checksum(this.data);\n    } },\n  {\n    key: 'leftText',\n    value: function leftText() {\n      return _get(EAN13.prototype.__proto__ || Object.getPrototypeOf(EAN13.prototype), 'leftText', this).call(this, 1, 6);\n    } },\n  {\n    key: 'leftEncode',\n    value: function leftEncode() {\n      var data = this.data.substr(1, 6);\n      var structure = _constants.EAN13_STRUCTURE[this.data[0]];\n      return _get(EAN13.prototype.__proto__ || Object.getPrototypeOf(EAN13.prototype), 'leftEncode', this).call(this, data, structure);\n    } },\n  {\n    key: 'rightText',\n    value: function rightText() {\n      return _get(EAN13.prototype.__proto__ || Object.getPrototypeOf(EAN13.prototype), 'rightText', this).call(this, 7, 6);\n    } },\n  {\n    key: 'rightEncode',\n    value: function rightEncode() {\n      var data = this.data.substr(7, 6);\n      return _get(EAN13.prototype.__proto__ || Object.getPrototypeOf(EAN13.prototype), 'rightEncode', this).call(this, data, 'RRRRRR');\n    }\n\n    // The \"standard\" way of printing EAN13 barcodes with guard bars\n  },\n  {\n    key: 'encodeGuarded',\n    value: function encodeGuarded() {\n      var data = _get(EAN13.prototype.__proto__ || Object.getPrototypeOf(EAN13.prototype), 'encodeGuarded', this).call(this);\n\n      // Extend data with left digit & last character\n      if (this.options.displayValue) {\n        data.unshift({\n          data: '000000000000',\n          text: this.text.substr(0, 1),\n          options: { textAlign: 'left', fontSize: this.fontSize } });\n\n\n        if (this.options.lastChar) {\n          data.push({\n            data: '00' });\n\n          data.push({\n            data: '00000',\n            text: this.options.lastChar,\n            options: { fontSize: this.fontSize } });\n\n        }\n      }\n\n      return data;\n    } }]);\n\n\n  return EAN13;\n}(_EAN3.default);\n\nexports.default = EAN13;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///769\n");

/***/ }),

/***/ 770:
/*!************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/EAN_UPC/constants.js ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n// Standard start end and middle bits\nvar SIDE_BIN = exports.SIDE_BIN = '101';\nvar MIDDLE_BIN = exports.MIDDLE_BIN = '01010';\n\nvar BINARIES = exports.BINARIES = {\n  'L': [// The L (left) type of encoding\n  '0001101', '0011001', '0010011', '0111101', '0100011', '0110001', '0101111', '0111011', '0110111', '0001011'],\n  'G': [// The G type of encoding\n  '0100111', '0110011', '0011011', '0100001', '0011101', '0111001', '0000101', '0010001', '0001001', '0010111'],\n  'R': [// The R (right) type of encoding\n  '1110010', '1100110', '1101100', '1000010', '1011100', '1001110', '1010000', '1000100', '1001000', '1110100'],\n  'O': [// The O (odd) encoding for UPC-E\n  '0001101', '0011001', '0010011', '0111101', '0100011', '0110001', '0101111', '0111011', '0110111', '0001011'],\n  'E': [// The E (even) encoding for UPC-E\n  '0100111', '0110011', '0011011', '0100001', '0011101', '0111001', '0000101', '0010001', '0001001', '0010111'] };\n\n\n// Define the EAN-2 structure\nvar EAN2_STRUCTURE = exports.EAN2_STRUCTURE = ['LL', 'LG', 'GL', 'GG'];\n\n// Define the EAN-5 structure\nvar EAN5_STRUCTURE = exports.EAN5_STRUCTURE = ['GGLLL', 'GLGLL', 'GLLGL', 'GLLLG', 'LGGLL', 'LLGGL', 'LLLGG', 'LGLGL', 'LGLLG', 'LLGLG'];\n\n// Define the EAN-13 structure\nvar EAN13_STRUCTURE = exports.EAN13_STRUCTURE = ['LLLLLL', 'LLGLGG', 'LLGGLG', 'LLGGGL', 'LGLLGG', 'LGGLLG', 'LGGGLL', 'LGLGLG', 'LGLGGL', 'LGGLGL'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9FQU5fVVBDL2NvbnN0YW50cy5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlNJREVfQklOIiwiTUlERExFX0JJTiIsIkJJTkFSSUVTIiwiRUFOMl9TVFJVQ1RVUkUiLCJFQU41X1NUUlVDVFVSRSIsIkVBTjEzX1NUUlVDVFVSRSJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDNUNDLE9BQUssRUFBRSxJQURxQyxFQUE3Qzs7QUFHQTtBQUNBLElBQUlDLFFBQVEsR0FBR0YsT0FBTyxDQUFDRSxRQUFSLEdBQW1CLEtBQWxDO0FBQ0EsSUFBSUMsVUFBVSxHQUFHSCxPQUFPLENBQUNHLFVBQVIsR0FBcUIsT0FBdEM7O0FBRUEsSUFBSUMsUUFBUSxHQUFHSixPQUFPLENBQUNJLFFBQVIsR0FBbUI7QUFDakMsT0FBSyxDQUFDO0FBQ04sV0FESyxFQUNNLFNBRE4sRUFDaUIsU0FEakIsRUFDNEIsU0FENUIsRUFDdUMsU0FEdkMsRUFDa0QsU0FEbEQsRUFDNkQsU0FEN0QsRUFDd0UsU0FEeEUsRUFDbUYsU0FEbkYsRUFDOEYsU0FEOUYsQ0FENEI7QUFHakMsT0FBSyxDQUFDO0FBQ04sV0FESyxFQUNNLFNBRE4sRUFDaUIsU0FEakIsRUFDNEIsU0FENUIsRUFDdUMsU0FEdkMsRUFDa0QsU0FEbEQsRUFDNkQsU0FEN0QsRUFDd0UsU0FEeEUsRUFDbUYsU0FEbkYsRUFDOEYsU0FEOUYsQ0FINEI7QUFLakMsT0FBSyxDQUFDO0FBQ04sV0FESyxFQUNNLFNBRE4sRUFDaUIsU0FEakIsRUFDNEIsU0FENUIsRUFDdUMsU0FEdkMsRUFDa0QsU0FEbEQsRUFDNkQsU0FEN0QsRUFDd0UsU0FEeEUsRUFDbUYsU0FEbkYsRUFDOEYsU0FEOUYsQ0FMNEI7QUFPakMsT0FBSyxDQUFDO0FBQ04sV0FESyxFQUNNLFNBRE4sRUFDaUIsU0FEakIsRUFDNEIsU0FENUIsRUFDdUMsU0FEdkMsRUFDa0QsU0FEbEQsRUFDNkQsU0FEN0QsRUFDd0UsU0FEeEUsRUFDbUYsU0FEbkYsRUFDOEYsU0FEOUYsQ0FQNEI7QUFTakMsT0FBSyxDQUFDO0FBQ04sV0FESyxFQUNNLFNBRE4sRUFDaUIsU0FEakIsRUFDNEIsU0FENUIsRUFDdUMsU0FEdkMsRUFDa0QsU0FEbEQsRUFDNkQsU0FEN0QsRUFDd0UsU0FEeEUsRUFDbUYsU0FEbkYsRUFDOEYsU0FEOUYsQ0FUNEIsRUFBbEM7OztBQWFBO0FBQ0EsSUFBSUMsY0FBYyxHQUFHTCxPQUFPLENBQUNLLGNBQVIsR0FBeUIsQ0FBQyxJQUFELEVBQU8sSUFBUCxFQUFhLElBQWIsRUFBbUIsSUFBbkIsQ0FBOUM7O0FBRUE7QUFDQSxJQUFJQyxjQUFjLEdBQUdOLE9BQU8sQ0FBQ00sY0FBUixHQUF5QixDQUFDLE9BQUQsRUFBVSxPQUFWLEVBQW1CLE9BQW5CLEVBQTRCLE9BQTVCLEVBQXFDLE9BQXJDLEVBQThDLE9BQTlDLEVBQXVELE9BQXZELEVBQWdFLE9BQWhFLEVBQXlFLE9BQXpFLEVBQWtGLE9BQWxGLENBQTlDOztBQUVBO0FBQ0EsSUFBSUMsZUFBZSxHQUFHUCxPQUFPLENBQUNPLGVBQVIsR0FBMEIsQ0FBQyxRQUFELEVBQVcsUUFBWCxFQUFxQixRQUFyQixFQUErQixRQUEvQixFQUF5QyxRQUF6QyxFQUFtRCxRQUFuRCxFQUE2RCxRQUE3RCxFQUF1RSxRQUF2RSxFQUFpRixRQUFqRixFQUEyRixRQUEzRixDQUFoRCIsImZpbGUiOiI3NzAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcclxuXHR2YWx1ZTogdHJ1ZVxyXG59KTtcclxuLy8gU3RhbmRhcmQgc3RhcnQgZW5kIGFuZCBtaWRkbGUgYml0c1xyXG52YXIgU0lERV9CSU4gPSBleHBvcnRzLlNJREVfQklOID0gJzEwMSc7XHJcbnZhciBNSURETEVfQklOID0gZXhwb3J0cy5NSURETEVfQklOID0gJzAxMDEwJztcclxuXHJcbnZhciBCSU5BUklFUyA9IGV4cG9ydHMuQklOQVJJRVMgPSB7XHJcblx0J0wnOiBbLy8gVGhlIEwgKGxlZnQpIHR5cGUgb2YgZW5jb2RpbmdcclxuXHQnMDAwMTEwMScsICcwMDExMDAxJywgJzAwMTAwMTEnLCAnMDExMTEwMScsICcwMTAwMDExJywgJzAxMTAwMDEnLCAnMDEwMTExMScsICcwMTExMDExJywgJzAxMTAxMTEnLCAnMDAwMTAxMSddLFxyXG5cdCdHJzogWy8vIFRoZSBHIHR5cGUgb2YgZW5jb2RpbmdcclxuXHQnMDEwMDExMScsICcwMTEwMDExJywgJzAwMTEwMTEnLCAnMDEwMDAwMScsICcwMDExMTAxJywgJzAxMTEwMDEnLCAnMDAwMDEwMScsICcwMDEwMDAxJywgJzAwMDEwMDEnLCAnMDAxMDExMSddLFxyXG5cdCdSJzogWy8vIFRoZSBSIChyaWdodCkgdHlwZSBvZiBlbmNvZGluZ1xyXG5cdCcxMTEwMDEwJywgJzExMDAxMTAnLCAnMTEwMTEwMCcsICcxMDAwMDEwJywgJzEwMTExMDAnLCAnMTAwMTExMCcsICcxMDEwMDAwJywgJzEwMDAxMDAnLCAnMTAwMTAwMCcsICcxMTEwMTAwJ10sXHJcblx0J08nOiBbLy8gVGhlIE8gKG9kZCkgZW5jb2RpbmcgZm9yIFVQQy1FXHJcblx0JzAwMDExMDEnLCAnMDAxMTAwMScsICcwMDEwMDExJywgJzAxMTExMDEnLCAnMDEwMDAxMScsICcwMTEwMDAxJywgJzAxMDExMTEnLCAnMDExMTAxMScsICcwMTEwMTExJywgJzAwMDEwMTEnXSxcclxuXHQnRSc6IFsvLyBUaGUgRSAoZXZlbikgZW5jb2RpbmcgZm9yIFVQQy1FXHJcblx0JzAxMDAxMTEnLCAnMDExMDAxMScsICcwMDExMDExJywgJzAxMDAwMDEnLCAnMDAxMTEwMScsICcwMTExMDAxJywgJzAwMDAxMDEnLCAnMDAxMDAwMScsICcwMDAxMDAxJywgJzAwMTAxMTEnXVxyXG59O1xyXG5cclxuLy8gRGVmaW5lIHRoZSBFQU4tMiBzdHJ1Y3R1cmVcclxudmFyIEVBTjJfU1RSVUNUVVJFID0gZXhwb3J0cy5FQU4yX1NUUlVDVFVSRSA9IFsnTEwnLCAnTEcnLCAnR0wnLCAnR0cnXTtcclxuXHJcbi8vIERlZmluZSB0aGUgRUFOLTUgc3RydWN0dXJlXHJcbnZhciBFQU41X1NUUlVDVFVSRSA9IGV4cG9ydHMuRUFONV9TVFJVQ1RVUkUgPSBbJ0dHTExMJywgJ0dMR0xMJywgJ0dMTEdMJywgJ0dMTExHJywgJ0xHR0xMJywgJ0xMR0dMJywgJ0xMTEdHJywgJ0xHTEdMJywgJ0xHTExHJywgJ0xMR0xHJ107XHJcblxyXG4vLyBEZWZpbmUgdGhlIEVBTi0xMyBzdHJ1Y3R1cmVcclxudmFyIEVBTjEzX1NUUlVDVFVSRSA9IGV4cG9ydHMuRUFOMTNfU1RSVUNUVVJFID0gWydMTExMTEwnLCAnTExHTEdHJywgJ0xMR0dMRycsICdMTEdHR0wnLCAnTEdMTEdHJywgJ0xHR0xMRycsICdMR0dHTEwnLCAnTEdMR0xHJywgJ0xHTEdHTCcsICdMR0dMR0wnXTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///770\n");

/***/ }),

/***/ 771:
/*!******************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/EAN_UPC/EAN.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _constants = __webpack_require__(/*! ./constants */ 770);\n\nvar _encoder = __webpack_require__(/*! ./encoder */ 772);\n\nvar _encoder2 = _interopRequireDefault(_encoder);\n\nvar _Barcode2 = __webpack_require__(/*! ../Barcode */ 759);\n\nvar _Barcode3 = _interopRequireDefault(_Barcode2);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}\n\n// Base class for EAN8 & EAN13\nvar EAN = function (_Barcode) {\n  _inherits(EAN, _Barcode);\n\n  function EAN(data, options) {\n    _classCallCheck(this, EAN);\n\n    // Make sure the font is not bigger than the space between the guard bars\n    var _this = _possibleConstructorReturn(this, (EAN.__proto__ || Object.getPrototypeOf(EAN)).call(this, data, options));\n\n    _this.fontSize = !options.flat && options.fontSize > options.width * 10 ? options.width * 10 : options.fontSize;\n\n    // Make the guard bars go down half the way of the text\n    _this.guardHeight = options.height + _this.fontSize / 2 + options.textMargin;\n    return _this;\n  }\n\n  _createClass(EAN, [{\n    key: 'encode',\n    value: function encode() {\n      return this.options.flat ? this.encodeFlat() : this.encodeGuarded();\n    } },\n  {\n    key: 'leftText',\n    value: function leftText(from, to) {\n      return this.text.substr(from, to);\n    } },\n  {\n    key: 'leftEncode',\n    value: function leftEncode(data, structure) {\n      return (0, _encoder2.default)(data, structure);\n    } },\n  {\n    key: 'rightText',\n    value: function rightText(from, to) {\n      return this.text.substr(from, to);\n    } },\n  {\n    key: 'rightEncode',\n    value: function rightEncode(data, structure) {\n      return (0, _encoder2.default)(data, structure);\n    } },\n  {\n    key: 'encodeGuarded',\n    value: function encodeGuarded() {\n      var textOptions = { fontSize: this.fontSize };\n      var guardOptions = { height: this.guardHeight };\n\n      return [{ data: _constants.SIDE_BIN, options: guardOptions }, { data: this.leftEncode(), text: this.leftText(), options: textOptions }, { data: _constants.MIDDLE_BIN, options: guardOptions }, { data: this.rightEncode(), text: this.rightText(), options: textOptions }, { data: _constants.SIDE_BIN, options: guardOptions }];\n    } },\n  {\n    key: 'encodeFlat',\n    value: function encodeFlat() {\n      var data = [_constants.SIDE_BIN, this.leftEncode(), _constants.MIDDLE_BIN, this.rightEncode(), _constants.SIDE_BIN];\n\n      return {\n        data: data.join(''),\n        text: this.text };\n\n    } }]);\n\n\n  return EAN;\n}(_Barcode3.default);\n\nexports.default = EAN;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///771\n");

/***/ }),

/***/ 772:
/*!**********************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/EAN_UPC/encoder.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _constants = __webpack_require__(/*! ./constants */ 770);\n\n// Encode data string\nvar encode = function encode(data, structure, separator) {\n  var encoded = data.split('').map(function (val, idx) {\n    return _constants.BINARIES[structure[idx]];\n  }).map(function (val, idx) {\n    return val ? val[data[idx]] : '';\n  });\n\n  if (separator) {\n    var last = data.length - 1;\n    encoded = encoded.map(function (val, idx) {\n      return idx < last ? val + separator : val;\n    });\n  }\n\n  return encoded.join('');\n};\n\nexports.default = encode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9FQU5fVVBDL2VuY29kZXIuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfY29uc3RhbnRzIiwicmVxdWlyZSIsImVuY29kZSIsImRhdGEiLCJzdHJ1Y3R1cmUiLCJzZXBhcmF0b3IiLCJlbmNvZGVkIiwic3BsaXQiLCJtYXAiLCJ2YWwiLCJpZHgiLCJCSU5BUklFUyIsImxhc3QiLCJsZW5ndGgiLCJqb2luIiwiZGVmYXVsdCJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDNUNDLE9BQUssRUFBRSxJQURxQyxFQUE3Qzs7O0FBSUEsSUFBSUMsVUFBVSxHQUFHQyxtQkFBTyxDQUFDLHNCQUFELENBQXhCOztBQUVBO0FBQ0EsSUFBSUMsTUFBTSxHQUFHLFNBQVNBLE1BQVQsQ0FBZ0JDLElBQWhCLEVBQXNCQyxTQUF0QixFQUFpQ0MsU0FBakMsRUFBNEM7QUFDeEQsTUFBSUMsT0FBTyxHQUFHSCxJQUFJLENBQUNJLEtBQUwsQ0FBVyxFQUFYLEVBQWVDLEdBQWYsQ0FBbUIsVUFBVUMsR0FBVixFQUFlQyxHQUFmLEVBQW9CO0FBQ3BELFdBQU9WLFVBQVUsQ0FBQ1csUUFBWCxDQUFvQlAsU0FBUyxDQUFDTSxHQUFELENBQTdCLENBQVA7QUFDQSxHQUZhLEVBRVhGLEdBRlcsQ0FFUCxVQUFVQyxHQUFWLEVBQWVDLEdBQWYsRUFBb0I7QUFDMUIsV0FBT0QsR0FBRyxHQUFHQSxHQUFHLENBQUNOLElBQUksQ0FBQ08sR0FBRCxDQUFMLENBQU4sR0FBb0IsRUFBOUI7QUFDQSxHQUphLENBQWQ7O0FBTUEsTUFBSUwsU0FBSixFQUFlO0FBQ2QsUUFBSU8sSUFBSSxHQUFHVCxJQUFJLENBQUNVLE1BQUwsR0FBYyxDQUF6QjtBQUNBUCxXQUFPLEdBQUdBLE9BQU8sQ0FBQ0UsR0FBUixDQUFZLFVBQVVDLEdBQVYsRUFBZUMsR0FBZixFQUFvQjtBQUN6QyxhQUFPQSxHQUFHLEdBQUdFLElBQU4sR0FBYUgsR0FBRyxHQUFHSixTQUFuQixHQUErQkksR0FBdEM7QUFDQSxLQUZTLENBQVY7QUFHQTs7QUFFRCxTQUFPSCxPQUFPLENBQUNRLElBQVIsQ0FBYSxFQUFiLENBQVA7QUFDQSxDQWZEOztBQWlCQWhCLE9BQU8sQ0FBQ2lCLE9BQVIsR0FBa0JiLE1BQWxCIiwiZmlsZSI6Ijc3Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xyXG5cdHZhbHVlOiB0cnVlXHJcbn0pO1xyXG5cclxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xyXG5cclxuLy8gRW5jb2RlIGRhdGEgc3RyaW5nXHJcbnZhciBlbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgc3RydWN0dXJlLCBzZXBhcmF0b3IpIHtcclxuXHR2YXIgZW5jb2RlZCA9IGRhdGEuc3BsaXQoJycpLm1hcChmdW5jdGlvbiAodmFsLCBpZHgpIHtcclxuXHRcdHJldHVybiBfY29uc3RhbnRzLkJJTkFSSUVTW3N0cnVjdHVyZVtpZHhdXTtcclxuXHR9KS5tYXAoZnVuY3Rpb24gKHZhbCwgaWR4KSB7XHJcblx0XHRyZXR1cm4gdmFsID8gdmFsW2RhdGFbaWR4XV0gOiAnJztcclxuXHR9KTtcclxuXHJcblx0aWYgKHNlcGFyYXRvcikge1xyXG5cdFx0dmFyIGxhc3QgPSBkYXRhLmxlbmd0aCAtIDE7XHJcblx0XHRlbmNvZGVkID0gZW5jb2RlZC5tYXAoZnVuY3Rpb24gKHZhbCwgaWR4KSB7XHJcblx0XHRcdHJldHVybiBpZHggPCBsYXN0ID8gdmFsICsgc2VwYXJhdG9yIDogdmFsO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZW5jb2RlZC5qb2luKCcnKTtcclxufTtcclxuXHJcbmV4cG9ydHMuZGVmYXVsdCA9IGVuY29kZTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///772\n");

/***/ }),

/***/ 773:
/*!*******************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/EAN_UPC/EAN8.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _get = function get(object, property, receiver) {if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {var parent = Object.getPrototypeOf(object);if (parent === null) {return undefined;} else {return get(parent, property, receiver);}} else if (\"value\" in desc) {return desc.value;} else {var getter = desc.get;if (getter === undefined) {return undefined;}return getter.call(receiver);}};\n\nvar _EAN2 = __webpack_require__(/*! ./EAN */ 771);\n\nvar _EAN3 = _interopRequireDefault(_EAN2);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} // Encoding documentation:\n// http://www.barcodeisland.com/ean8.phtml\n\n// Calculate the checksum digit\nvar checksum = function checksum(number) {\n  var res = number.substr(0, 7).split('').map(function (n) {\n    return +n;\n  }).reduce(function (sum, a, idx) {\n    return idx % 2 ? sum + a : sum + a * 3;\n  }, 0);\n\n  return (10 - res % 10) % 10;\n};\n\nvar EAN8 = function (_EAN) {\n  _inherits(EAN8, _EAN);\n\n  function EAN8(data, options) {\n    _classCallCheck(this, EAN8);\n\n    // Add checksum if it does not exist\n    if (data.search(/^[0-9]{7}$/) !== -1) {\n      data += checksum(data);\n    }\n\n    return _possibleConstructorReturn(this, (EAN8.__proto__ || Object.getPrototypeOf(EAN8)).call(this, data, options));\n  }\n\n  _createClass(EAN8, [{\n    key: 'valid',\n    value: function valid() {\n      return this.data.search(/^[0-9]{8}$/) !== -1 && +this.data[7] === checksum(this.data);\n    } },\n  {\n    key: 'leftText',\n    value: function leftText() {\n      return _get(EAN8.prototype.__proto__ || Object.getPrototypeOf(EAN8.prototype), 'leftText', this).call(this, 0, 4);\n    } },\n  {\n    key: 'leftEncode',\n    value: function leftEncode() {\n      var data = this.data.substr(0, 4);\n      return _get(EAN8.prototype.__proto__ || Object.getPrototypeOf(EAN8.prototype), 'leftEncode', this).call(this, data, 'LLLL');\n    } },\n  {\n    key: 'rightText',\n    value: function rightText() {\n      return _get(EAN8.prototype.__proto__ || Object.getPrototypeOf(EAN8.prototype), 'rightText', this).call(this, 4, 4);\n    } },\n  {\n    key: 'rightEncode',\n    value: function rightEncode() {\n      var data = this.data.substr(4, 4);\n      return _get(EAN8.prototype.__proto__ || Object.getPrototypeOf(EAN8.prototype), 'rightEncode', this).call(this, data, 'RRRR');\n    } }]);\n\n\n  return EAN8;\n}(_EAN3.default);\n\nexports.default = EAN8;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///773\n");

/***/ }),

/***/ 774:
/*!*******************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/EAN_UPC/EAN5.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _constants = __webpack_require__(/*! ./constants */ 770);\n\nvar _encoder = __webpack_require__(/*! ./encoder */ 772);\n\nvar _encoder2 = _interopRequireDefault(_encoder);\n\nvar _Barcode2 = __webpack_require__(/*! ../Barcode */ 759);\n\nvar _Barcode3 = _interopRequireDefault(_Barcode2);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} // Encoding documentation:\n// https://en.wikipedia.org/wiki/EAN_5#Encoding\n\nvar checksum = function checksum(data) {\n  var result = data.split('').map(function (n) {\n    return +n;\n  }).reduce(function (sum, a, idx) {\n    return idx % 2 ? sum + a * 9 : sum + a * 3;\n  }, 0);\n  return result % 10;\n};\n\nvar EAN5 = function (_Barcode) {\n  _inherits(EAN5, _Barcode);\n\n  function EAN5(data, options) {\n    _classCallCheck(this, EAN5);\n\n    return _possibleConstructorReturn(this, (EAN5.__proto__ || Object.getPrototypeOf(EAN5)).call(this, data, options));\n  }\n\n  _createClass(EAN5, [{\n    key: 'valid',\n    value: function valid() {\n      return this.data.search(/^[0-9]{5}$/) !== -1;\n    } },\n  {\n    key: 'encode',\n    value: function encode() {\n      var structure = _constants.EAN5_STRUCTURE[checksum(this.data)];\n      return {\n        data: '1011' + (0, _encoder2.default)(this.data, structure, '01'),\n        text: this.text };\n\n    } }]);\n\n\n  return EAN5;\n}(_Barcode3.default);\n\nexports.default = EAN5;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///774\n");

/***/ }),

/***/ 775:
/*!*******************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/EAN_UPC/EAN2.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _constants = __webpack_require__(/*! ./constants */ 770);\n\nvar _encoder = __webpack_require__(/*! ./encoder */ 772);\n\nvar _encoder2 = _interopRequireDefault(_encoder);\n\nvar _Barcode2 = __webpack_require__(/*! ../Barcode */ 759);\n\nvar _Barcode3 = _interopRequireDefault(_Barcode2);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} // Encoding documentation:\n// https://en.wikipedia.org/wiki/EAN_2#Encoding\n\nvar EAN2 = function (_Barcode) {\n  _inherits(EAN2, _Barcode);\n\n  function EAN2(data, options) {\n    _classCallCheck(this, EAN2);\n\n    return _possibleConstructorReturn(this, (EAN2.__proto__ || Object.getPrototypeOf(EAN2)).call(this, data, options));\n  }\n\n  _createClass(EAN2, [{\n    key: 'valid',\n    value: function valid() {\n      return this.data.search(/^[0-9]{2}$/) !== -1;\n    } },\n  {\n    key: 'encode',\n    value: function encode() {\n      // Choose the structure based on the number mod 4\n      var structure = _constants.EAN2_STRUCTURE[parseInt(this.data) % 4];\n      return {\n        // Start bits + Encode the two digits with 01 in between\n        data: '1011' + (0, _encoder2.default)(this.data, structure, '01'),\n        text: this.text };\n\n    } }]);\n\n\n  return EAN2;\n}(_Barcode3.default);\n\nexports.default = EAN2;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///775\n");

/***/ }),

/***/ 776:
/*!******************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/EAN_UPC/UPC.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nexports.checksum = checksum;\n\nvar _encoder = __webpack_require__(/*! ./encoder */ 772);\n\nvar _encoder2 = _interopRequireDefault(_encoder);\n\nvar _Barcode2 = __webpack_require__(/*! ../Barcode.js */ 759);\n\nvar _Barcode3 = _interopRequireDefault(_Barcode2);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} // Encoding documentation:\n// https://en.wikipedia.org/wiki/Universal_Product_Code#Encoding\n\nvar UPC = function (_Barcode) {\n  _inherits(UPC, _Barcode);\n\n  function UPC(data, options) {\n    _classCallCheck(this, UPC);\n\n    // Add checksum if it does not exist\n    if (data.search(/^[0-9]{11}$/) !== -1) {\n      data += checksum(data);\n    }\n\n    var _this = _possibleConstructorReturn(this, (UPC.__proto__ || Object.getPrototypeOf(UPC)).call(this, data, options));\n\n    _this.displayValue = options.displayValue;\n\n    // Make sure the font is not bigger than the space between the guard bars\n    if (options.fontSize > options.width * 10) {\n      _this.fontSize = options.width * 10;\n    } else {\n      _this.fontSize = options.fontSize;\n    }\n\n    // Make the guard bars go down half the way of the text\n    _this.guardHeight = options.height + _this.fontSize / 2 + options.textMargin;\n    return _this;\n  }\n\n  _createClass(UPC, [{\n    key: \"valid\",\n    value: function valid() {\n      return this.data.search(/^[0-9]{12}$/) !== -1 && this.data[11] == checksum(this.data);\n    } },\n  {\n    key: \"encode\",\n    value: function encode() {\n      if (this.options.flat) {\n        return this.flatEncoding();\n      } else {\n        return this.guardedEncoding();\n      }\n    } },\n  {\n    key: \"flatEncoding\",\n    value: function flatEncoding() {\n      var result = \"\";\n\n      result += \"101\";\n      result += (0, _encoder2.default)(this.data.substr(0, 6), \"LLLLLL\");\n      result += \"01010\";\n      result += (0, _encoder2.default)(this.data.substr(6, 6), \"RRRRRR\");\n      result += \"101\";\n\n      return {\n        data: result,\n        text: this.text };\n\n    } },\n  {\n    key: \"guardedEncoding\",\n    value: function guardedEncoding() {\n      var result = [];\n\n      // Add the first digit\n      if (this.displayValue) {\n        result.push({\n          data: \"00000000\",\n          text: this.text.substr(0, 1),\n          options: { textAlign: \"left\", fontSize: this.fontSize } });\n\n      }\n\n      // Add the guard bars\n      result.push({\n        data: \"101\" + (0, _encoder2.default)(this.data[0], \"L\"),\n        options: { height: this.guardHeight } });\n\n\n      // Add the left side\n      result.push({\n        data: (0, _encoder2.default)(this.data.substr(1, 5), \"LLLLL\"),\n        text: this.text.substr(1, 5),\n        options: { fontSize: this.fontSize } });\n\n\n      // Add the middle bits\n      result.push({\n        data: \"01010\",\n        options: { height: this.guardHeight } });\n\n\n      // Add the right side\n      result.push({\n        data: (0, _encoder2.default)(this.data.substr(6, 5), \"RRRRR\"),\n        text: this.text.substr(6, 5),\n        options: { fontSize: this.fontSize } });\n\n\n      // Add the end bits\n      result.push({\n        data: (0, _encoder2.default)(this.data[11], \"R\") + \"101\",\n        options: { height: this.guardHeight } });\n\n\n      // Add the last digit\n      if (this.displayValue) {\n        result.push({\n          data: \"00000000\",\n          text: this.text.substr(11, 1),\n          options: { textAlign: \"right\", fontSize: this.fontSize } });\n\n      }\n\n      return result;\n    } }]);\n\n\n  return UPC;\n}(_Barcode3.default);\n\n// Calulate the checksum digit\n// https://en.wikipedia.org/wiki/International_Article_Number_(EAN)#Calculation_of_checksum_digit\n\n\nfunction checksum(number) {\n  var result = 0;\n\n  var i;\n  for (i = 1; i < 11; i += 2) {\n    result += parseInt(number[i]);\n  }\n  for (i = 0; i < 11; i += 2) {\n    result += parseInt(number[i]) * 3;\n  }\n\n  return (10 - result % 10) % 10;\n}\n\nexports.default = UPC;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///776\n");

/***/ }),

/***/ 777:
/*!*******************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/EAN_UPC/UPCE.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _encoder = __webpack_require__(/*! ./encoder */ 772);\n\nvar _encoder2 = _interopRequireDefault(_encoder);\n\nvar _Barcode2 = __webpack_require__(/*! ../Barcode.js */ 759);\n\nvar _Barcode3 = _interopRequireDefault(_Barcode2);\n\nvar _UPC = __webpack_require__(/*! ./UPC.js */ 776);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} // Encoding documentation:\n// https://en.wikipedia.org/wiki/Universal_Product_Code#Encoding\n//\n// UPC-E documentation:\n// https://en.wikipedia.org/wiki/Universal_Product_Code#UPC-E\n\nvar EXPANSIONS = [\"XX00000XXX\", \"XX10000XXX\", \"XX20000XXX\", \"XXX00000XX\", \"XXXX00000X\", \"XXXXX00005\", \"XXXXX00006\", \"XXXXX00007\", \"XXXXX00008\", \"XXXXX00009\"];\n\nvar PARITIES = [[\"EEEOOO\", \"OOOEEE\"], [\"EEOEOO\", \"OOEOEE\"], [\"EEOOEO\", \"OOEEOE\"], [\"EEOOOE\", \"OOEEEO\"], [\"EOEEOO\", \"OEOOEE\"], [\"EOOEEO\", \"OEEOOE\"], [\"EOOOEE\", \"OEEEOO\"], [\"EOEOEO\", \"OEOEOE\"], [\"EOEOOE\", \"OEOEEO\"], [\"EOOEOE\", \"OEEOEO\"]];\n\nvar UPCE = function (_Barcode) {\n  _inherits(UPCE, _Barcode);\n\n  function UPCE(data, options) {\n    _classCallCheck(this, UPCE);\n\n    var _this = _possibleConstructorReturn(this, (UPCE.__proto__ || Object.getPrototypeOf(UPCE)).call(this, data, options));\n    // Code may be 6 or 8 digits;\n    // A 7 digit code is ambiguous as to whether the extra digit\n    // is a UPC-A check or number system digit.\n\n\n    _this.isValid = false;\n    if (data.search(/^[0-9]{6}$/) !== -1) {\n      _this.middleDigits = data;\n      _this.upcA = expandToUPCA(data, \"0\");\n      _this.text = options.text || '' + _this.upcA[0] + data + _this.upcA[_this.upcA.length - 1];\n      _this.isValid = true;\n    } else if (data.search(/^[01][0-9]{7}$/) !== -1) {\n      _this.middleDigits = data.substring(1, data.length - 1);\n      _this.upcA = expandToUPCA(_this.middleDigits, data[0]);\n\n      if (_this.upcA[_this.upcA.length - 1] === data[data.length - 1]) {\n        _this.isValid = true;\n      } else {\n        // checksum mismatch\n        return _possibleConstructorReturn(_this);\n      }\n    } else {\n      return _possibleConstructorReturn(_this);\n    }\n\n    _this.displayValue = options.displayValue;\n\n    // Make sure the font is not bigger than the space between the guard bars\n    if (options.fontSize > options.width * 10) {\n      _this.fontSize = options.width * 10;\n    } else {\n      _this.fontSize = options.fontSize;\n    }\n\n    // Make the guard bars go down half the way of the text\n    _this.guardHeight = options.height + _this.fontSize / 2 + options.textMargin;\n    return _this;\n  }\n\n  _createClass(UPCE, [{\n    key: 'valid',\n    value: function valid() {\n      return this.isValid;\n    } },\n  {\n    key: 'encode',\n    value: function encode() {\n      if (this.options.flat) {\n        return this.flatEncoding();\n      } else {\n        return this.guardedEncoding();\n      }\n    } },\n  {\n    key: 'flatEncoding',\n    value: function flatEncoding() {\n      var result = \"\";\n\n      result += \"101\";\n      result += this.encodeMiddleDigits();\n      result += \"010101\";\n\n      return {\n        data: result,\n        text: this.text };\n\n    } },\n  {\n    key: 'guardedEncoding',\n    value: function guardedEncoding() {\n      var result = [];\n\n      // Add the UPC-A number system digit beneath the quiet zone\n      if (this.displayValue) {\n        result.push({\n          data: \"00000000\",\n          text: this.text[0],\n          options: { textAlign: \"left\", fontSize: this.fontSize } });\n\n      }\n\n      // Add the guard bars\n      result.push({\n        data: \"101\",\n        options: { height: this.guardHeight } });\n\n\n      // Add the 6 UPC-E digits\n      result.push({\n        data: this.encodeMiddleDigits(),\n        text: this.text.substring(1, 7),\n        options: { fontSize: this.fontSize } });\n\n\n      // Add the end bits\n      result.push({\n        data: \"010101\",\n        options: { height: this.guardHeight } });\n\n\n      // Add the UPC-A check digit beneath the quiet zone\n      if (this.displayValue) {\n        result.push({\n          data: \"00000000\",\n          text: this.text[7],\n          options: { textAlign: \"right\", fontSize: this.fontSize } });\n\n      }\n\n      return result;\n    } },\n  {\n    key: 'encodeMiddleDigits',\n    value: function encodeMiddleDigits() {\n      var numberSystem = this.upcA[0];\n      var checkDigit = this.upcA[this.upcA.length - 1];\n      var parity = PARITIES[parseInt(checkDigit)][parseInt(numberSystem)];\n      return (0, _encoder2.default)(this.middleDigits, parity);\n    } }]);\n\n\n  return UPCE;\n}(_Barcode3.default);\n\nfunction expandToUPCA(middleDigits, numberSystem) {\n  var lastUpcE = parseInt(middleDigits[middleDigits.length - 1]);\n  var expansion = EXPANSIONS[lastUpcE];\n\n  var result = \"\";\n  var digitIndex = 0;\n  for (var i = 0; i < expansion.length; i++) {\n    var c = expansion[i];\n    if (c === 'X') {\n      result += middleDigits[digitIndex++];\n    } else {\n      result += c;\n    }\n  }\n\n  result = '' + numberSystem + result;\n  return '' + result + (0, _UPC.checksum)(result);\n}\n\nexports.default = UPCE;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///777\n");

/***/ }),

/***/ 778:
/*!****************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/ITF/index.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.ITF14 = exports.ITF = undefined;\n\nvar _ITF = __webpack_require__(/*! ./ITF */ 779);\n\nvar _ITF2 = _interopRequireDefault(_ITF);\n\nvar _ITF3 = __webpack_require__(/*! ./ITF14 */ 781);\n\nvar _ITF4 = _interopRequireDefault(_ITF3);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nexports.ITF = _ITF2.default;\nexports.ITF14 = _ITF4.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9JVEYvaW5kZXguanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJJVEYxNCIsIklURiIsInVuZGVmaW5lZCIsIl9JVEYiLCJyZXF1aXJlIiwiX0lURjIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX0lURjMiLCJfSVRGNCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsT0FBSyxFQUFFLElBRG9DLEVBQTdDOztBQUdBRCxPQUFPLENBQUNFLEtBQVIsR0FBZ0JGLE9BQU8sQ0FBQ0csR0FBUixHQUFjQyxTQUE5Qjs7QUFFQSxJQUFJQyxJQUFJLEdBQUdDLG1CQUFPLENBQUMsZ0JBQUQsQ0FBbEI7O0FBRUEsSUFBSUMsS0FBSyxHQUFHQyxzQkFBc0IsQ0FBQ0gsSUFBRCxDQUFsQzs7QUFFQSxJQUFJSSxLQUFLLEdBQUdILG1CQUFPLENBQUMsa0JBQUQsQ0FBbkI7O0FBRUEsSUFBSUksS0FBSyxHQUFHRixzQkFBc0IsQ0FBQ0MsS0FBRCxDQUFsQzs7QUFFQSxTQUFTRCxzQkFBVCxDQUFnQ0csR0FBaEMsRUFBcUMsQ0FBRSxPQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEIsRUFBRUUsT0FBTyxFQUFFRixHQUFYLEVBQXJDLENBQXdEOztBQUUvRlgsT0FBTyxDQUFDRyxHQUFSLEdBQWNJLEtBQUssQ0FBQ00sT0FBcEI7QUFDQWIsT0FBTyxDQUFDRSxLQUFSLEdBQWdCUSxLQUFLLENBQUNHLE9BQXRCIiwiZmlsZSI6Ijc3OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xyXG4gIHZhbHVlOiB0cnVlXHJcbn0pO1xyXG5leHBvcnRzLklURjE0ID0gZXhwb3J0cy5JVEYgPSB1bmRlZmluZWQ7XHJcblxyXG52YXIgX0lURiA9IHJlcXVpcmUoJy4vSVRGJyk7XHJcblxyXG52YXIgX0lURjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9JVEYpO1xyXG5cclxudmFyIF9JVEYzID0gcmVxdWlyZSgnLi9JVEYxNCcpO1xyXG5cclxudmFyIF9JVEY0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSVRGMyk7XHJcblxyXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxyXG5cclxuZXhwb3J0cy5JVEYgPSBfSVRGMi5kZWZhdWx0O1xyXG5leHBvcnRzLklURjE0ID0gX0lURjQuZGVmYXVsdDsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///778\n");

/***/ }),

/***/ 779:
/*!**************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/ITF/ITF.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _constants = __webpack_require__(/*! ./constants */ 780);\n\nvar _Barcode2 = __webpack_require__(/*! ../Barcode */ 759);\n\nvar _Barcode3 = _interopRequireDefault(_Barcode2);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}\n\nvar ITF = function (_Barcode) {\n  _inherits(ITF, _Barcode);\n\n  function ITF() {\n    _classCallCheck(this, ITF);\n\n    return _possibleConstructorReturn(this, (ITF.__proto__ || Object.getPrototypeOf(ITF)).apply(this, arguments));\n  }\n\n  _createClass(ITF, [{\n    key: 'valid',\n    value: function valid() {\n      return this.data.search(/^([0-9]{2})+$/) !== -1;\n    } },\n  {\n    key: 'encode',\n    value: function encode() {\n      var _this2 = this;\n\n      // Calculate all the digit pairs\n      var encoded = this.data.match(/.{2}/g).map(function (pair) {\n        return _this2.encodePair(pair);\n      }).join('');\n\n      return {\n        data: _constants.START_BIN + encoded + _constants.END_BIN,\n        text: this.text };\n\n    }\n\n    // Calculate the data of a number pair\n  },\n  {\n    key: 'encodePair',\n    value: function encodePair(pair) {\n      var second = _constants.BINARIES[pair[1]];\n\n      return _constants.BINARIES[pair[0]].split('').map(function (first, idx) {\n        return (first === '1' ? '111' : '1') + (second[idx] === '1' ? '000' : '0');\n      }).join('');\n    } }]);\n\n\n  return ITF;\n}(_Barcode3.default);\n\nexports.default = ITF;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9JVEYvSVRGLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJrZXkiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3RvdHlwZSIsIl9jb25zdGFudHMiLCJyZXF1aXJlIiwiX0JhcmNvZGUyIiwiX0JhcmNvZGUzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJUeXBlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJjYWxsIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiSVRGIiwiX0JhcmNvZGUiLCJnZXRQcm90b3R5cGVPZiIsImFwcGx5IiwiYXJndW1lbnRzIiwidmFsaWQiLCJkYXRhIiwic2VhcmNoIiwiZW5jb2RlIiwiX3RoaXMyIiwiZW5jb2RlZCIsIm1hdGNoIiwibWFwIiwicGFpciIsImVuY29kZVBhaXIiLCJqb2luIiwiU1RBUlRfQklOIiwiRU5EX0JJTiIsInRleHQiLCJzZWNvbmQiLCJCSU5BUklFUyIsInNwbGl0IiwiZmlyc3QiLCJpZHgiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzVDQyxPQUFL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SUFGTCxFQUFQOztBQUlBOztBQUVEO0FBaEJFLEdBTGU7QUF1QmY7QUFDRjdDLE9BQUcsRUFBRSxZQURIO0FBRUZYLFNBQUssRUFBRSxTQUFTb0QsVUFBVCxDQUFvQkQsSUFBcEIsRUFBMEI7QUFDaEMsVUFBSU0sTUFBTSxHQUFHekMsVUFBVSxDQUFDMEMsUUFBWCxDQUFvQlAsSUFBSSxDQUFDLENBQUQsQ0FBeEIsQ0FBYjs7QUFFQSxhQUFPbkMsVUFBVSxDQUFDMEMsUUFBWCxDQUFvQlAsSUFBSSxDQUFDLENBQUQsQ0FBeEIsRUFBNkJRLEtBQTdCLENBQW1DLEVBQW5DLEVBQXVDVCxHQUF2QyxDQUEyQyxVQUFVVSxLQUFWLEVBQWlCQyxHQUFqQixFQUFzQjtBQUN2RSxlQUFPLENBQUNELEtBQUssS0FBSyxHQUFWLEdBQWdCLEtBQWhCLEdBQXdCLEdBQXpCLEtBQWlDSCxNQUFNLENBQUNJLEdBQUQsQ0FBTixLQUFnQixHQUFoQixHQUFzQixLQUF0QixHQUE4QixHQUEvRCxDQUFQO0FBQ0EsT0FGTSxFQUVKUixJQUZJLENBRUMsRUFGRCxDQUFQO0FBR0EsS0FSQyxFQXZCZSxDQUFOLENBQVo7OztBQWtDQSxTQUFPZixHQUFQO0FBQ0EsQ0E1Q1MsQ0E0Q1JuQixTQUFTLENBQUNJLE9BNUNGLENBQVY7O0FBOENBeEIsT0FBTyxDQUFDd0IsT0FBUixHQUFrQmUsR0FBbEIiLCJmaWxlIjoiNzc5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XHJcblx0dmFsdWU6IHRydWVcclxufSk7XHJcblxyXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xyXG5cclxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xyXG5cclxudmFyIF9CYXJjb2RlMiA9IHJlcXVpcmUoJy4uL0JhcmNvZGUnKTtcclxuXHJcbnZhciBfQmFyY29kZTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9CYXJjb2RlMik7XHJcblxyXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxyXG5cclxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cclxuXHJcbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxyXG5cclxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XHJcblxyXG52YXIgSVRGID0gZnVuY3Rpb24gKF9CYXJjb2RlKSB7XHJcblx0X2luaGVyaXRzKElURiwgX0JhcmNvZGUpO1xyXG5cclxuXHRmdW5jdGlvbiBJVEYoKSB7XHJcblx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgSVRGKTtcclxuXHJcblx0XHRyZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKElURi5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKElURikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xyXG5cdH1cclxuXHJcblx0X2NyZWF0ZUNsYXNzKElURiwgW3tcclxuXHRcdGtleTogJ3ZhbGlkJyxcclxuXHRcdHZhbHVlOiBmdW5jdGlvbiB2YWxpZCgpIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZGF0YS5zZWFyY2goL14oWzAtOV17Mn0pKyQvKSAhPT0gLTE7XHJcblx0XHR9XHJcblx0fSwge1xyXG5cdFx0a2V5OiAnZW5jb2RlJyxcclxuXHRcdHZhbHVlOiBmdW5jdGlvbiBlbmNvZGUoKSB7XHJcblx0XHRcdHZhciBfdGhpczIgPSB0aGlzO1xyXG5cclxuXHRcdFx0Ly8gQ2FsY3VsYXRlIGFsbCB0aGUgZGlnaXQgcGFpcnNcclxuXHRcdFx0dmFyIGVuY29kZWQgPSB0aGlzLmRhdGEubWF0Y2goLy57Mn0vZykubWFwKGZ1bmN0aW9uIChwYWlyKSB7XHJcblx0XHRcdFx0cmV0dXJuIF90aGlzMi5lbmNvZGVQYWlyKHBhaXIpO1xyXG5cdFx0XHR9KS5qb2luKCcnKTtcclxuXHJcblx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0ZGF0YTogX2NvbnN0YW50cy5TVEFSVF9CSU4gKyBlbmNvZGVkICsgX2NvbnN0YW50cy5FTkRfQklOLFxyXG5cdFx0XHRcdHRleHQ6IHRoaXMudGV4dFxyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENhbGN1bGF0ZSB0aGUgZGF0YSBvZiBhIG51bWJlciBwYWlyXHJcblxyXG5cdH0sIHtcclxuXHRcdGtleTogJ2VuY29kZVBhaXInLFxyXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGVuY29kZVBhaXIocGFpcikge1xyXG5cdFx0XHR2YXIgc2Vjb25kID0gX2NvbnN0YW50cy5CSU5BUklFU1twYWlyWzFdXTtcclxuXHJcblx0XHRcdHJldHVybiBfY29uc3RhbnRzLkJJTkFSSUVTW3BhaXJbMF1dLnNwbGl0KCcnKS5tYXAoZnVuY3Rpb24gKGZpcnN0LCBpZHgpIHtcclxuXHRcdFx0XHRyZXR1cm4gKGZpcnN0ID09PSAnMScgPyAnMTExJyA6ICcxJykgKyAoc2Vjb25kW2lkeF0gPT09ICcxJyA/ICcwMDAnIDogJzAnKTtcclxuXHRcdFx0fSkuam9pbignJyk7XHJcblx0XHR9XHJcblx0fV0pO1xyXG5cclxuXHRyZXR1cm4gSVRGO1xyXG59KF9CYXJjb2RlMy5kZWZhdWx0KTtcclxuXHJcbmV4cG9ydHMuZGVmYXVsdCA9IElURjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///779\n");

/***/ }),

/***/ 78:
/*!***********************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/utils/common.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__, uni) {var _hydrogenJsSdk = _interopRequireDefault(__webpack_require__(/*! hydrogen-js-sdk */ 14));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\nmodule.exports = {\n  //入库时增加产品数量\n  enterAddGoodNum: function enterAddGoodNum(products) {\n    return new Promise(function (resolve, reject) {var _loop = function _loop(\n      i) {\n        var num = 0;\n        var query = _hydrogenJsSdk.default.Query('Goods');\n        query.get(products[i].objectId).then(function (res) {\n          console.log(__f__(products[i], \" at utils\\\\common.js:10\"));\n\n          if (products[i].selectd_model) {var _iteratorNormalCompletion = true;var _didIteratorError = false;var _iteratorError = undefined;try {\n              for (var _iterator = products[i].selected_model[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {var model = _step.value;var _iteratorNormalCompletion2 = true;var _didIteratorError2 = false;var _iteratorError2 = undefined;try {\n                  for (var _iterator2 = products[i].models[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {var item = _step2.value;\n                    if (item.id == model.id) {\n                      item.reserve = Number(item.reserve) + Number(model.num);\n                    }\n                  }} catch (err) {_didIteratorError2 = true;_iteratorError2 = err;} finally {try {if (!_iteratorNormalCompletion2 && _iterator2.return != null) {_iterator2.return();}} finally {if (_didIteratorError2) {throw _iteratorError2;}}}\n              }} catch (err) {_didIteratorError = true;_iteratorError = err;} finally {try {if (!_iteratorNormalCompletion && _iterator.return != null) {_iterator.return();}} finally {if (_didIteratorError) {throw _iteratorError;}}}\n            num = Number(products[i].reserve) + Number(products[i].num);\n            res.set('models', products[i].models);\n          } else {\n            num = Number(products[i].reserve) + Number(products[i].num);\n          }\n          res.set('reserve', num);\n          res.set('stocktype', num > products[i].warning_num ? 1 : 0);\n          res.save();\n\n          if (i == products.length - 1) {\n            resolve(true);\n          }\n        }).catch(function (err) {\n          console.log(__f__(err, \" at utils\\\\common.js:33\"));\n        });};for (var i = 0; i < products.length; i++) {_loop(i);\n      }\n    });\n  },\n\n\n  //出库时减少产品数量\n  outRedGoodNum: function outRedGoodNum(products) {var _this = this;\n    return new Promise(function (resolve, reject) {var _loop2 = function _loop2(\n      i) {\n        var num = 0;\n        var query = _hydrogenJsSdk.default.Query('Goods');\n        query.get(products[i].objectId).then(function (res) {\n          //console.log(res)\n\n          if (products[i].selectd_model) {var _iteratorNormalCompletion3 = true;var _didIteratorError3 = false;var _iteratorError3 = undefined;try {\n              for (var _iterator3 = products[i].selectd_model[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {var model = _step3.value;var _iteratorNormalCompletion4 = true;var _didIteratorError4 = false;var _iteratorError4 = undefined;try {\n                  for (var _iterator4 = products[i].models[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {var item = _step4.value;\n                    num += Number(item.reserve);\n                    if (item.id == model.id) {\n                      item.reserve = Number(item.reserve) - Number(model.num);\n                    }\n                  }} catch (err) {_didIteratorError4 = true;_iteratorError4 = err;} finally {try {if (!_iteratorNormalCompletion4 && _iterator4.return != null) {_iterator4.return();}} finally {if (_didIteratorError4) {throw _iteratorError4;}}}\n              }} catch (err) {_didIteratorError3 = true;_iteratorError3 = err;} finally {try {if (!_iteratorNormalCompletion3 && _iterator3.return != null) {_iterator3.return();}} finally {if (_didIteratorError3) {throw _iteratorError3;}}}\n            num = Number(products[i].reserve) - Number(products[i].num);\n            res.set('models', products[i].models);\n          } else {\n            num = Number(products[i].reserve) - Number(products[i].num);\n          }\n\n          res.set('reserve', num);\n          res.set('stocktype', num >= products[i].warning_num ? 1 : 0);\n          res.save();\n\n          if (products[i].warning_num >= num) {\n            _this.log(products[i].goodsName + \"出库了\" + products[i].num + \"件，已经低于预警数量\" + products[i].warning_num, -2, products[i].objectId);\n          }\n          _this.record_staffOut(Number(products[i].num));\n\n          if (i == products.length - 1) {\n            resolve(true);\n          }\n        }).catch(function (err) {\n          console.log(__f__(err, \" at utils\\\\common.js:77\"));\n        });};for (var i = 0; i < products.length; i++) {_loop2(i);\n      }\n    });\n  },\n\n  //清除缓存\n  handleData: function handleData() {\n    uni.removeStorageSync(\"warehouse\");\n    uni.removeStorageSync(\"stock\");\n    uni.removeStorageSync(\"custom\");\n    uni.removeStorageSync(\"category\");\n    uni.removeStorageSync(\"class_user\");\n    uni.removeStorageSync(\"second_class\");\n  },\n\n  //日志功能\n  log: function log(_log, type, id) {\n    var pointer = _hydrogenJsSdk.default.Pointer('_User');\n    var userid = pointer.set(uni.getStorageSync(\"uid\"));\n\n    var query = _hydrogenJsSdk.default.Query('logs');\n    query.set(\"parent\", userid);\n    query.set(\"log\", _log);\n    query.set(\"detail_id\", id);\n    query.set(\"type\", type);\n    query.save().then(function (res) {\n      console.log(__f__(res, \" at utils\\\\common.js:104\"));\n    }).catch(function (err) {\n      console.log(__f__(err, \" at utils\\\\common.js:106\"));\n    });\n  },\n\n  //记录门店的出库数量\n  record_shopOut: function record_shopOut(id, have_out) {\n    console.log(__f__(id, have_out, \" at utils\\\\common.js:112\"));\n    var query = _hydrogenJsSdk.default.Query('shops');\n    query.set('id', id); //需要修改的objectId\n    query.set('have_out', have_out);\n    query.save().then(function (res) {\n      console.log(__f__(res, \" at utils\\\\common.js:117\"));\n    }).catch(function (err) {\n      console.log(__f__(err, \" at utils\\\\common.js:119\"));\n    });\n  },\n\n  //记录员工的出库数量\n  record_staffOut: function record_staffOut(have_out) {\n    console.log(__f__(have_out, uni.getStorageSync(\"user\").have_out, \" at utils\\\\common.js:125\"));\n    if (uni.getStorageSync(\"identity\") == 1) {} else {\n      var query = _hydrogenJsSdk.default.Query('staffs');\n      query.set('id', uni.getStorageSync(\"user\").objectId); //需要修改的objectId\n      query.set('have_out', Number(have_out) + uni.getStorageSync(\"user\").have_out);\n      query.save().then(function (res) {\n        console.log(__f__(res, \" at utils\\\\common.js:131\"));\n      }).catch(function (err) {\n        console.log(__f__(err, \" at utils\\\\common.js:133\"));\n      });\n    }\n\n  },\n\n  //获得库存成本和总库存\n  get_allCost: function get_allCost() {\n    var userid = uni.getStorageSync(\"uid\");\n    console.log(__f__(userid, \" at utils\\\\common.js:142\"));\n    var query = _hydrogenJsSdk.default.Query(\"Goods\");\n    query.equalTo(\"userId\", \"==\", userid);\n    query.find().then(function (res) {\n      console.log(__f__(res, \" at utils\\\\common.js:146\"));\n      var reserve_money = 0;\n      var all_reserve = 0;var _iteratorNormalCompletion5 = true;var _didIteratorError5 = false;var _iteratorError5 = undefined;try {\n        for (var _iterator5 = res[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {var item = _step5.value;\n          console.log(__f__(item, \" at utils\\\\common.js:150\"));\n          reserve_money += Number(item.costPrice) * item.reserve;\n          all_reserve += item.reserve;\n        }} catch (err) {_didIteratorError5 = true;_iteratorError5 = err;} finally {try {if (!_iteratorNormalCompletion5 && _iterator5.return != null) {_iterator5.return();}} finally {if (_didIteratorError5) {throw _iteratorError5;}}}\n    });\n  },\n\n  //获取时间\n  getDay: function getDay(day, is_full) {\n    var that = this;\n    var today = new Date();\n    var targetday_milliseconds = today.getTime() + 1000 * 60 * 60 * 24 * day;\n    today.setTime(targetday_milliseconds);\n    var tYear = today.getFullYear();\n    var tMonth = today.getMonth();\n    var tDate = today.getDate();\n    tMonth = that.handleMonth(tMonth + 1);\n    tDate = that.handleMonth(tDate);\n    if (is_full) {\n      return tYear + \"-\" + tMonth + \"-\" + tDate + \" 00:00:00\";\n    } else {\n      return tYear + \"-\" + tMonth + \"-\" + tDate;\n    }\n\n  },\n\n  js_date_time: function js_date_time(unixtime, is_full) {\n    var date = new Date(unixtime);\n    var y = date.getFullYear();\n    var m = date.getMonth() + 1;\n    m = m < 10 ? '0' + m : m;\n    var d = date.getDate();\n    d = d < 10 ? '0' + d : d;\n    var h = date.getHours();\n    h = h < 10 ? '0' + h : h;\n    var minute = date.getMinutes();\n    var second = date.getSeconds();\n    minute = minute < 10 ? '0' + minute : minute;\n    second = second < 10 ? '0' + second : second;\n    // return y + '-' + m + '-' + d + ' ' + h + ':' + minute + ':' + second;//年月日时分秒\n    if (is_full) {\n      return y + '-' + m + '-' + d + ' ' + h + ':' + minute;\n    } else {\n      return y + '-' + m + '-' + d;\n    }\n  },\n\n  handleMonth: function handleMonth(month) {\n    var m = month;\n    if (month.toString().length == 1) {\n      m = \"0\" + month;\n    }\n    return m;\n  } };\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///78\n");

/***/ }),

/***/ 780:
/*!********************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/ITF/constants.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nvar START_BIN = exports.START_BIN = '1010';\nvar END_BIN = exports.END_BIN = '11101';\n\nvar BINARIES = exports.BINARIES = ['00110', '10001', '01001', '11000', '00101', '10100', '01100', '00011', '10010', '01010'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9JVEYvY29uc3RhbnRzLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiU1RBUlRfQklOIiwiRU5EX0JJTiIsIkJJTkFSSUVTIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUM1Q0MsT0FBSyxFQUFFLElBRHFDLEVBQTdDOztBQUdBLElBQUlDLFNBQVMsR0FBR0YsT0FBTyxDQUFDRSxTQUFSLEdBQW9CLE1BQXBDO0FBQ0EsSUFBSUMsT0FBTyxHQUFHSCxPQUFPLENBQUNHLE9BQVIsR0FBa0IsT0FBaEM7O0FBRUEsSUFBSUMsUUFBUSxHQUFHSixPQUFPLENBQUNJLFFBQVIsR0FBbUIsQ0FBQyxPQUFELEVBQVUsT0FBVixFQUFtQixPQUFuQixFQUE0QixPQUE1QixFQUFxQyxPQUFyQyxFQUE4QyxPQUE5QyxFQUF1RCxPQUF2RCxFQUFnRSxPQUFoRSxFQUF5RSxPQUF6RSxFQUFrRixPQUFsRixDQUFsQyIsImZpbGUiOiI3ODAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcclxuXHR2YWx1ZTogdHJ1ZVxyXG59KTtcclxudmFyIFNUQVJUX0JJTiA9IGV4cG9ydHMuU1RBUlRfQklOID0gJzEwMTAnO1xyXG52YXIgRU5EX0JJTiA9IGV4cG9ydHMuRU5EX0JJTiA9ICcxMTEwMSc7XHJcblxyXG52YXIgQklOQVJJRVMgPSBleHBvcnRzLkJJTkFSSUVTID0gWycwMDExMCcsICcxMDAwMScsICcwMTAwMScsICcxMTAwMCcsICcwMDEwMScsICcxMDEwMCcsICcwMTEwMCcsICcwMDAxMScsICcxMDAxMCcsICcwMTAxMCddOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///780\n");

/***/ }),

/***/ 781:
/*!****************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/ITF/ITF14.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _ITF2 = __webpack_require__(/*! ./ITF */ 779);\n\nvar _ITF3 = _interopRequireDefault(_ITF2);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}\n\n// Calculate the checksum digit\nvar checksum = function checksum(data) {\n  var res = data.substr(0, 13).split('').map(function (num) {\n    return parseInt(num, 10);\n  }).reduce(function (sum, n, idx) {\n    return sum + n * (3 - idx % 2 * 2);\n  }, 0);\n\n  return Math.ceil(res / 10) * 10 - res;\n};\n\nvar ITF14 = function (_ITF) {\n  _inherits(ITF14, _ITF);\n\n  function ITF14(data, options) {\n    _classCallCheck(this, ITF14);\n\n    // Add checksum if it does not exist\n    if (data.search(/^[0-9]{13}$/) !== -1) {\n      data += checksum(data);\n    }\n    return _possibleConstructorReturn(this, (ITF14.__proto__ || Object.getPrototypeOf(ITF14)).call(this, data, options));\n  }\n\n  _createClass(ITF14, [{\n    key: 'valid',\n    value: function valid() {\n      return this.data.search(/^[0-9]{14}$/) !== -1 && +this.data[13] === checksum(this.data);\n    } }]);\n\n\n  return ITF14;\n}(_ITF3.default);\n\nexports.default = ITF14;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///781\n");

/***/ }),

/***/ 782:
/*!****************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/MSI/index.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.MSI1110 = exports.MSI1010 = exports.MSI11 = exports.MSI10 = exports.MSI = undefined;\n\nvar _MSI = __webpack_require__(/*! ./MSI.js */ 783);\n\nvar _MSI2 = _interopRequireDefault(_MSI);\n\nvar _MSI3 = __webpack_require__(/*! ./MSI10.js */ 784);\n\nvar _MSI4 = _interopRequireDefault(_MSI3);\n\nvar _MSI5 = __webpack_require__(/*! ./MSI11.js */ 786);\n\nvar _MSI6 = _interopRequireDefault(_MSI5);\n\nvar _MSI7 = __webpack_require__(/*! ./MSI1010.js */ 787);\n\nvar _MSI8 = _interopRequireDefault(_MSI7);\n\nvar _MSI9 = __webpack_require__(/*! ./MSI1110.js */ 788);\n\nvar _MSI10 = _interopRequireDefault(_MSI9);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nexports.MSI = _MSI2.default;\nexports.MSI10 = _MSI4.default;\nexports.MSI11 = _MSI6.default;\nexports.MSI1010 = _MSI8.default;\nexports.MSI1110 = _MSI10.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9NU0kvaW5kZXguanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJNU0kxMTEwIiwiTVNJMTAxMCIsIk1TSTExIiwiTVNJMTAiLCJNU0kiLCJ1bmRlZmluZWQiLCJfTVNJIiwicmVxdWlyZSIsIl9NU0kyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9NU0kzIiwiX01TSTQiLCJfTVNJNSIsIl9NU0k2IiwiX01TSTciLCJfTVNJOCIsIl9NU0k5IiwiX01TSTEwIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxPQUFLLEVBQUUsSUFEb0MsRUFBN0M7O0FBR0FELE9BQU8sQ0FBQ0UsT0FBUixHQUFrQkYsT0FBTyxDQUFDRyxPQUFSLEdBQWtCSCxPQUFPLENBQUNJLEtBQVIsR0FBZ0JKLE9BQU8sQ0FBQ0ssS0FBUixHQUFnQkwsT0FBTyxDQUFDTSxHQUFSLEdBQWNDLFNBQWxGOztBQUVBLElBQUlDLElBQUksR0FBR0MsbUJBQU8sQ0FBQyxtQkFBRCxDQUFsQjs7QUFFQSxJQUFJQyxLQUFLLEdBQUdDLHNCQUFzQixDQUFDSCxJQUFELENBQWxDOztBQUVBLElBQUlJLEtBQUssR0FBR0gsbUJBQU8sQ0FBQyxxQkFBRCxDQUFuQjs7QUFFQSxJQUFJSSxLQUFLLEdBQUdGLHNCQUFzQixDQUFDQyxLQUFELENBQWxDOztBQUVBLElBQUlFLEtBQUssR0FBR0wsbUJBQU8sQ0FBQyxxQkFBRCxDQUFuQjs7QUFFQSxJQUFJTSxLQUFLLEdBQUdKLHNCQUFzQixDQUFDRyxLQUFELENBQWxDOztBQUVBLElBQUlFLEtBQUssR0FBR1AsbUJBQU8sQ0FBQyx1QkFBRCxDQUFuQjs7QUFFQSxJQUFJUSxLQUFLLEdBQUdOLHNCQUFzQixDQUFDSyxLQUFELENBQWxDOztBQUVBLElBQUlFLEtBQUssR0FBR1QsbUJBQU8sQ0FBQyx1QkFBRCxDQUFuQjs7QUFFQSxJQUFJVSxNQUFNLEdBQUdSLHNCQUFzQixDQUFDTyxLQUFELENBQW5DOztBQUVBLFNBQVNQLHNCQUFULENBQWdDUyxHQUFoQyxFQUFxQyxDQUFFLE9BQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QixFQUFFRSxPQUFPLEVBQUVGLEdBQVgsRUFBckMsQ0FBd0Q7O0FBRS9GcEIsT0FBTyxDQUFDTSxHQUFSLEdBQWNJLEtBQUssQ0FBQ1ksT0FBcEI7QUFDQXRCLE9BQU8sQ0FBQ0ssS0FBUixHQUFnQlEsS0FBSyxDQUFDUyxPQUF0QjtBQUNBdEIsT0FBTyxDQUFDSSxLQUFSLEdBQWdCVyxLQUFLLENBQUNPLE9BQXRCO0FBQ0F0QixPQUFPLENBQUNHLE9BQVIsR0FBa0JjLEtBQUssQ0FBQ0ssT0FBeEI7QUFDQXRCLE9BQU8sQ0FBQ0UsT0FBUixHQUFrQmlCLE1BQU0sQ0FBQ0csT0FBekIiLCJmaWxlIjoiNzgyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XHJcbiAgdmFsdWU6IHRydWVcclxufSk7XHJcbmV4cG9ydHMuTVNJMTExMCA9IGV4cG9ydHMuTVNJMTAxMCA9IGV4cG9ydHMuTVNJMTEgPSBleHBvcnRzLk1TSTEwID0gZXhwb3J0cy5NU0kgPSB1bmRlZmluZWQ7XHJcblxyXG52YXIgX01TSSA9IHJlcXVpcmUoJy4vTVNJLmpzJyk7XHJcblxyXG52YXIgX01TSTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9NU0kpO1xyXG5cclxudmFyIF9NU0kzID0gcmVxdWlyZSgnLi9NU0kxMC5qcycpO1xyXG5cclxudmFyIF9NU0k0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTVNJMyk7XHJcblxyXG52YXIgX01TSTUgPSByZXF1aXJlKCcuL01TSTExLmpzJyk7XHJcblxyXG52YXIgX01TSTYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9NU0k1KTtcclxuXHJcbnZhciBfTVNJNyA9IHJlcXVpcmUoJy4vTVNJMTAxMC5qcycpO1xyXG5cclxudmFyIF9NU0k4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTVNJNyk7XHJcblxyXG52YXIgX01TSTkgPSByZXF1aXJlKCcuL01TSTExMTAuanMnKTtcclxuXHJcbnZhciBfTVNJMTAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9NU0k5KTtcclxuXHJcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XHJcblxyXG5leHBvcnRzLk1TSSA9IF9NU0kyLmRlZmF1bHQ7XHJcbmV4cG9ydHMuTVNJMTAgPSBfTVNJNC5kZWZhdWx0O1xyXG5leHBvcnRzLk1TSTExID0gX01TSTYuZGVmYXVsdDtcclxuZXhwb3J0cy5NU0kxMDEwID0gX01TSTguZGVmYXVsdDtcclxuZXhwb3J0cy5NU0kxMTEwID0gX01TSTEwLmRlZmF1bHQ7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///782\n");

/***/ }),

/***/ 783:
/*!**************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/MSI/MSI.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _Barcode2 = __webpack_require__(/*! ../Barcode.js */ 759);\n\nvar _Barcode3 = _interopRequireDefault(_Barcode2);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} // Encoding documentation\n// https://en.wikipedia.org/wiki/MSI_Barcode#Character_set_and_binary_lookup\n\nvar MSI = function (_Barcode) {\n  _inherits(MSI, _Barcode);\n\n  function MSI(data, options) {\n    _classCallCheck(this, MSI);\n\n    return _possibleConstructorReturn(this, (MSI.__proto__ || Object.getPrototypeOf(MSI)).call(this, data, options));\n  }\n\n  _createClass(MSI, [{\n    key: \"encode\",\n    value: function encode() {\n      // Start bits\n      var ret = \"110\";\n\n      for (var i = 0; i < this.data.length; i++) {\n        // Convert the character to binary (always 4 binary digits)\n        var digit = parseInt(this.data[i]);\n        var bin = digit.toString(2);\n        bin = addZeroes(bin, 4 - bin.length);\n\n        // Add 100 for every zero and 110 for every 1\n        for (var b = 0; b < bin.length; b++) {\n          ret += bin[b] == \"0\" ? \"100\" : \"110\";\n        }\n      }\n\n      // End bits\n      ret += \"1001\";\n\n      return {\n        data: ret,\n        text: this.text };\n\n    } },\n  {\n    key: \"valid\",\n    value: function valid() {\n      return this.data.search(/^[0-9]+$/) !== -1;\n    } }]);\n\n\n  return MSI;\n}(_Barcode3.default);\n\nfunction addZeroes(number, n) {\n  for (var i = 0; i < n; i++) {\n    number = \"0\" + number;\n  }\n  return number;\n}\n\nexports.default = MSI;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///783\n");

/***/ }),

/***/ 784:
/*!****************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/MSI/MSI10.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _MSI2 = __webpack_require__(/*! ./MSI.js */ 783);\n\nvar _MSI3 = _interopRequireDefault(_MSI2);\n\nvar _checksums = __webpack_require__(/*! ./checksums.js */ 785);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}\n\nvar MSI10 = function (_MSI) {\n  _inherits(MSI10, _MSI);\n\n  function MSI10(data, options) {\n    _classCallCheck(this, MSI10);\n\n    return _possibleConstructorReturn(this, (MSI10.__proto__ || Object.getPrototypeOf(MSI10)).call(this, data + (0, _checksums.mod10)(data), options));\n  }\n\n  return MSI10;\n}(_MSI3.default);\n\nexports.default = MSI10;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9NU0kvTVNJMTAuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfTVNJMiIsInJlcXVpcmUiLCJfTVNJMyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfY2hlY2tzdW1zIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiY2FsbCIsIlJlZmVyZW5jZUVycm9yIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwicHJvdG90eXBlIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIk1TSTEwIiwiX01TSSIsImRhdGEiLCJvcHRpb25zIiwiZ2V0UHJvdG90eXBlT2YiLCJtb2QxMCJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDNUNDLE9BQUssRUFBRSxJQURxQyxFQUE3Qzs7O0FBSUEsSUFBSUMsS0FBSyxHQUFHQyxtQkFBTyxDQUFDLG1CQUFELENBQW5COztBQUVBLElBQUlDLEtBQUssR0FBR0Msc0JBQXNCLENBQUNILEtBQUQsQ0FBbEM7O0FBRUEsSUFBSUksVUFBVSxHQUFHSCxtQkFBTyxDQUFDLHlCQUFELENBQXhCOztBQUVBLFNBQVNFLHNCQUFULENBQWdDRSxHQUFoQyxFQUFxQyxDQUFFLE9BQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QixFQUFFRSxPQUFPLEVBQUVGLEdBQVgsRUFBckMsQ0FBd0Q7O0FBRS9GLFNBQVNHLGVBQVQsQ0FBeUJDLFFBQXpCLEVBQW1DQyxXQUFuQyxFQUFnRCxDQUFFLElBQUksRUFBRUQsUUFBUSxZQUFZQyxXQUF0QixDQUFKLEVBQXdDLENBQUUsTUFBTSxJQUFJQyxTQUFKLENBQWMsbUNBQWQsQ0FBTixDQUEyRCxDQUFFOztBQUV6SixTQUFTQywwQkFBVCxDQUFvQ0MsSUFBcEMsRUFBMENDLElBQTFDLEVBQWdELENBQUUsSUFBSSxDQUFDRCxJQUFMLEVBQVcsQ0FBRSxNQUFNLElBQUlFLGNBQUosQ0FBbUIsMkRBQW5CLENBQU4sQ0FBd0YsQ0FBQyxPQUFPRCxJQUFJLEtBQUssT0FBT0EsSUFBUCxLQUFnQixRQUFoQixJQUE0QixPQUFPQSxJQUFQLEtBQWdCLFVBQWpELENBQUosR0FBbUVBLElBQW5FLEdBQTBFRCxJQUFqRixDQUF3Rjs7QUFFaFAsU0FBU0csU0FBVCxDQUFtQkMsUUFBbkIsRUFBNkJDLFVBQTdCLEVBQXlDLENBQUUsSUFBSSxPQUFPQSxVQUFQLEtBQXNCLFVBQXRCLElBQW9DQSxVQUFVLEtBQUssSUFBdkQsRUFBNkQsQ0FBRSxNQUFNLElBQUlQLFNBQUosQ0FBYyw2REFBNkQsT0FBT08sVUFBbEYsQ0FBTixDQUFzRyxDQUFDRCxRQUFRLENBQUNFLFNBQVQsR0FBcUJ2QixNQUFNLENBQUN3QixNQUFQLENBQWNGLFVBQVUsSUFBSUEsVUFBVSxDQUFDQyxTQUF2QyxFQUFrRCxFQUFFRSxXQUFXLEVBQUUsRUFBRXRCLEtBQUssRUFBRWtCLFFBQVQsRUFBbUJLLFVBQVUsRUFBRSxLQUEvQixFQUFzQ0MsUUFBUSxFQUFFLElBQWhELEVBQXNEQyxZQUFZLEVBQUUsSUFBcEUsRUFBZixFQUFsRCxDQUFyQixDQUFxSyxJQUFJTixVQUFKLEVBQWdCdEIsTUFBTSxDQUFDNkIsY0FBUCxHQUF3QjdCLE1BQU0sQ0FBQzZCLGNBQVAsQ0FBc0JSLFFBQXRCLEVBQWdDQyxVQUFoQyxDQUF4QixHQUFzRUQsUUFBUSxDQUFDUyxTQUFULEdBQXFCUixVQUEzRixDQUF3Rzs7QUFFOWUsSUFBSVMsS0FBSyxHQUFHLFVBQVVDLElBQVYsRUFBZ0I7QUFDM0JaLFdBQVMsQ0FBQ1csS0FBRCxFQUFRQyxJQUFSLENBQVQ7O0FBRUEsV0FBU0QsS0FBVCxDQUFlRSxJQUFmLEVBQXFCQyxPQUFyQixFQUE4QjtBQUM3QnRCLG1CQUFlLENBQUMsSUFBRCxFQUFPbUIsS0FBUCxDQUFmOztBQUVBLFdBQU9mLDBCQUEwQixDQUFDLElBQUQsRUFBTyxDQUFDZSxLQUFLLENBQUNELFNBQU4sSUFBbUI5QixNQUFNLENBQUNtQyxjQUFQLENBQXNCSixLQUF0QixDQUFwQixFQUFrRGIsSUFBbEQsQ0FBdUQsSUFBdkQsRUFBNkRlLElBQUksR0FBRyxDQUFDLEdBQUd6QixVQUFVLENBQUM0QixLQUFmLEVBQXNCSCxJQUF0QixDQUFwRSxFQUFpR0MsT0FBakcsQ0FBUCxDQUFqQztBQUNBOztBQUVELFNBQU9ILEtBQVA7QUFDQSxDQVZXLENBVVZ6QixLQUFLLENBQUNLLE9BVkksQ0FBWjs7QUFZQVQsT0FBTyxDQUFDUyxPQUFSLEdBQWtCb0IsS0FBbEIiLCJmaWxlIjoiNzg0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XHJcblx0dmFsdWU6IHRydWVcclxufSk7XHJcblxyXG52YXIgX01TSTIgPSByZXF1aXJlKCcuL01TSS5qcycpO1xyXG5cclxudmFyIF9NU0kzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTVNJMik7XHJcblxyXG52YXIgX2NoZWNrc3VtcyA9IHJlcXVpcmUoJy4vY2hlY2tzdW1zLmpzJyk7XHJcblxyXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxyXG5cclxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cclxuXHJcbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxyXG5cclxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XHJcblxyXG52YXIgTVNJMTAgPSBmdW5jdGlvbiAoX01TSSkge1xyXG5cdF9pbmhlcml0cyhNU0kxMCwgX01TSSk7XHJcblxyXG5cdGZ1bmN0aW9uIE1TSTEwKGRhdGEsIG9wdGlvbnMpIHtcclxuXHRcdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNU0kxMCk7XHJcblxyXG5cdFx0cmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChNU0kxMC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKE1TSTEwKSkuY2FsbCh0aGlzLCBkYXRhICsgKDAsIF9jaGVja3N1bXMubW9kMTApKGRhdGEpLCBvcHRpb25zKSk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gTVNJMTA7XHJcbn0oX01TSTMuZGVmYXVsdCk7XHJcblxyXG5leHBvcnRzLmRlZmF1bHQgPSBNU0kxMDsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///784\n");

/***/ }),

/***/ 785:
/*!********************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/MSI/checksums.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.mod10 = mod10;\nexports.mod11 = mod11;\nfunction mod10(number) {\n  var sum = 0;\n  for (var i = 0; i < number.length; i++) {\n    var n = parseInt(number[i]);\n    if ((i + number.length) % 2 === 0) {\n      sum += n;\n    } else {\n      sum += n * 2 % 10 + Math.floor(n * 2 / 10);\n    }\n  }\n  return (10 - sum % 10) % 10;\n}\n\nfunction mod11(number) {\n  var sum = 0;\n  var weights = [2, 3, 4, 5, 6, 7];\n  for (var i = 0; i < number.length; i++) {\n    var n = parseInt(number[number.length - 1 - i]);\n    sum += weights[i % weights.length] * n;\n  }\n  return (11 - sum % 11) % 11;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9NU0kvY2hlY2tzdW1zLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kMTAiLCJtb2QxMSIsIm51bWJlciIsInN1bSIsImkiLCJsZW5ndGgiLCJuIiwicGFyc2VJbnQiLCJNYXRoIiwiZmxvb3IiLCJ3ZWlnaHRzIl0sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUM1Q0MsT0FBSyxFQUFFLElBRHFDLEVBQTdDOztBQUdBRCxPQUFPLENBQUNFLEtBQVIsR0FBZ0JBLEtBQWhCO0FBQ0FGLE9BQU8sQ0FBQ0csS0FBUixHQUFnQkEsS0FBaEI7QUFDQSxTQUFTRCxLQUFULENBQWVFLE1BQWYsRUFBdUI7QUFDdEIsTUFBSUMsR0FBRyxHQUFHLENBQVY7QUFDQSxPQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdGLE1BQU0sQ0FBQ0csTUFBM0IsRUFBbUNELENBQUMsRUFBcEMsRUFBd0M7QUFDdkMsUUFBSUUsQ0FBQyxHQUFHQyxRQUFRLENBQUNMLE1BQU0sQ0FBQ0UsQ0FBRCxDQUFQLENBQWhCO0FBQ0EsUUFBSSxDQUFDQSxDQUFDLEdBQUdGLE1BQU0sQ0FBQ0csTUFBWixJQUFzQixDQUF0QixLQUE0QixDQUFoQyxFQUFtQztBQUNsQ0YsU0FBRyxJQUFJRyxDQUFQO0FBQ0EsS0FGRCxNQUVPO0FBQ05ILFNBQUcsSUFBSUcsQ0FBQyxHQUFHLENBQUosR0FBUSxFQUFSLEdBQWFFLElBQUksQ0FBQ0MsS0FBTCxDQUFXSCxDQUFDLEdBQUcsQ0FBSixHQUFRLEVBQW5CLENBQXBCO0FBQ0E7QUFDRDtBQUNELFNBQU8sQ0FBQyxLQUFLSCxHQUFHLEdBQUcsRUFBWixJQUFrQixFQUF6QjtBQUNBOztBQUVELFNBQVNGLEtBQVQsQ0FBZUMsTUFBZixFQUF1QjtBQUN0QixNQUFJQyxHQUFHLEdBQUcsQ0FBVjtBQUNBLE1BQUlPLE9BQU8sR0FBRyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVYsRUFBYSxDQUFiLEVBQWdCLENBQWhCLENBQWQ7QUFDQSxPQUFLLElBQUlOLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdGLE1BQU0sQ0FBQ0csTUFBM0IsRUFBbUNELENBQUMsRUFBcEMsRUFBd0M7QUFDdkMsUUFBSUUsQ0FBQyxHQUFHQyxRQUFRLENBQUNMLE1BQU0sQ0FBQ0EsTUFBTSxDQUFDRyxNQUFQLEdBQWdCLENBQWhCLEdBQW9CRCxDQUFyQixDQUFQLENBQWhCO0FBQ0FELE9BQUcsSUFBSU8sT0FBTyxDQUFDTixDQUFDLEdBQUdNLE9BQU8sQ0FBQ0wsTUFBYixDQUFQLEdBQThCQyxDQUFyQztBQUNBO0FBQ0QsU0FBTyxDQUFDLEtBQUtILEdBQUcsR0FBRyxFQUFaLElBQWtCLEVBQXpCO0FBQ0EiLCJmaWxlIjoiNzg1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcclxuXHR2YWx1ZTogdHJ1ZVxyXG59KTtcclxuZXhwb3J0cy5tb2QxMCA9IG1vZDEwO1xyXG5leHBvcnRzLm1vZDExID0gbW9kMTE7XHJcbmZ1bmN0aW9uIG1vZDEwKG51bWJlcikge1xyXG5cdHZhciBzdW0gPSAwO1xyXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbnVtYmVyLmxlbmd0aDsgaSsrKSB7XHJcblx0XHR2YXIgbiA9IHBhcnNlSW50KG51bWJlcltpXSk7XHJcblx0XHRpZiAoKGkgKyBudW1iZXIubGVuZ3RoKSAlIDIgPT09IDApIHtcclxuXHRcdFx0c3VtICs9IG47XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRzdW0gKz0gbiAqIDIgJSAxMCArIE1hdGguZmxvb3IobiAqIDIgLyAxMCk7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiAoMTAgLSBzdW0gJSAxMCkgJSAxMDtcclxufVxyXG5cclxuZnVuY3Rpb24gbW9kMTEobnVtYmVyKSB7XHJcblx0dmFyIHN1bSA9IDA7XHJcblx0dmFyIHdlaWdodHMgPSBbMiwgMywgNCwgNSwgNiwgN107XHJcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBudW1iZXIubGVuZ3RoOyBpKyspIHtcclxuXHRcdHZhciBuID0gcGFyc2VJbnQobnVtYmVyW251bWJlci5sZW5ndGggLSAxIC0gaV0pO1xyXG5cdFx0c3VtICs9IHdlaWdodHNbaSAlIHdlaWdodHMubGVuZ3RoXSAqIG47XHJcblx0fVxyXG5cdHJldHVybiAoMTEgLSBzdW0gJSAxMSkgJSAxMTtcclxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///785\n");

/***/ }),

/***/ 786:
/*!****************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/MSI/MSI11.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _MSI2 = __webpack_require__(/*! ./MSI.js */ 783);\n\nvar _MSI3 = _interopRequireDefault(_MSI2);\n\nvar _checksums = __webpack_require__(/*! ./checksums.js */ 785);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}\n\nvar MSI11 = function (_MSI) {\n  _inherits(MSI11, _MSI);\n\n  function MSI11(data, options) {\n    _classCallCheck(this, MSI11);\n\n    return _possibleConstructorReturn(this, (MSI11.__proto__ || Object.getPrototypeOf(MSI11)).call(this, data + (0, _checksums.mod11)(data), options));\n  }\n\n  return MSI11;\n}(_MSI3.default);\n\nexports.default = MSI11;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9NU0kvTVNJMTEuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfTVNJMiIsInJlcXVpcmUiLCJfTVNJMyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfY2hlY2tzdW1zIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiY2FsbCIsIlJlZmVyZW5jZUVycm9yIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwicHJvdG90eXBlIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIk1TSTExIiwiX01TSSIsImRhdGEiLCJvcHRpb25zIiwiZ2V0UHJvdG90eXBlT2YiLCJtb2QxMSJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDNUNDLE9BQUssRUFBRSxJQURxQyxFQUE3Qzs7O0FBSUEsSUFBSUMsS0FBSyxHQUFHQyxtQkFBTyxDQUFDLG1CQUFELENBQW5COztBQUVBLElBQUlDLEtBQUssR0FBR0Msc0JBQXNCLENBQUNILEtBQUQsQ0FBbEM7O0FBRUEsSUFBSUksVUFBVSxHQUFHSCxtQkFBTyxDQUFDLHlCQUFELENBQXhCOztBQUVBLFNBQVNFLHNCQUFULENBQWdDRSxHQUFoQyxFQUFxQyxDQUFFLE9BQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QixFQUFFRSxPQUFPLEVBQUVGLEdBQVgsRUFBckMsQ0FBd0Q7O0FBRS9GLFNBQVNHLGVBQVQsQ0FBeUJDLFFBQXpCLEVBQW1DQyxXQUFuQyxFQUFnRCxDQUFFLElBQUksRUFBRUQsUUFBUSxZQUFZQyxXQUF0QixDQUFKLEVBQXdDLENBQUUsTUFBTSxJQUFJQyxTQUFKLENBQWMsbUNBQWQsQ0FBTixDQUEyRCxDQUFFOztBQUV6SixTQUFTQywwQkFBVCxDQUFvQ0MsSUFBcEMsRUFBMENDLElBQTFDLEVBQWdELENBQUUsSUFBSSxDQUFDRCxJQUFMLEVBQVcsQ0FBRSxNQUFNLElBQUlFLGNBQUosQ0FBbUIsMkRBQW5CLENBQU4sQ0FBd0YsQ0FBQyxPQUFPRCxJQUFJLEtBQUssT0FBT0EsSUFBUCxLQUFnQixRQUFoQixJQUE0QixPQUFPQSxJQUFQLEtBQWdCLFVBQWpELENBQUosR0FBbUVBLElBQW5FLEdBQTBFRCxJQUFqRixDQUF3Rjs7QUFFaFAsU0FBU0csU0FBVCxDQUFtQkMsUUFBbkIsRUFBNkJDLFVBQTdCLEVBQXlDLENBQUUsSUFBSSxPQUFPQSxVQUFQLEtBQXNCLFVBQXRCLElBQW9DQSxVQUFVLEtBQUssSUFBdkQsRUFBNkQsQ0FBRSxNQUFNLElBQUlQLFNBQUosQ0FBYyw2REFBNkQsT0FBT08sVUFBbEYsQ0FBTixDQUFzRyxDQUFDRCxRQUFRLENBQUNFLFNBQVQsR0FBcUJ2QixNQUFNLENBQUN3QixNQUFQLENBQWNGLFVBQVUsSUFBSUEsVUFBVSxDQUFDQyxTQUF2QyxFQUFrRCxFQUFFRSxXQUFXLEVBQUUsRUFBRXRCLEtBQUssRUFBRWtCLFFBQVQsRUFBbUJLLFVBQVUsRUFBRSxLQUEvQixFQUFzQ0MsUUFBUSxFQUFFLElBQWhELEVBQXNEQyxZQUFZLEVBQUUsSUFBcEUsRUFBZixFQUFsRCxDQUFyQixDQUFxSyxJQUFJTixVQUFKLEVBQWdCdEIsTUFBTSxDQUFDNkIsY0FBUCxHQUF3QjdCLE1BQU0sQ0FBQzZCLGNBQVAsQ0FBc0JSLFFBQXRCLEVBQWdDQyxVQUFoQyxDQUF4QixHQUFzRUQsUUFBUSxDQUFDUyxTQUFULEdBQXFCUixVQUEzRixDQUF3Rzs7QUFFOWUsSUFBSVMsS0FBSyxHQUFHLFVBQVVDLElBQVYsRUFBZ0I7QUFDM0JaLFdBQVMsQ0FBQ1csS0FBRCxFQUFRQyxJQUFSLENBQVQ7O0FBRUEsV0FBU0QsS0FBVCxDQUFlRSxJQUFmLEVBQXFCQyxPQUFyQixFQUE4QjtBQUM3QnRCLG1CQUFlLENBQUMsSUFBRCxFQUFPbUIsS0FBUCxDQUFmOztBQUVBLFdBQU9mLDBCQUEwQixDQUFDLElBQUQsRUFBTyxDQUFDZSxLQUFLLENBQUNELFNBQU4sSUFBbUI5QixNQUFNLENBQUNtQyxjQUFQLENBQXNCSixLQUF0QixDQUFwQixFQUFrRGIsSUFBbEQsQ0FBdUQsSUFBdkQsRUFBNkRlLElBQUksR0FBRyxDQUFDLEdBQUd6QixVQUFVLENBQUM0QixLQUFmLEVBQXNCSCxJQUF0QixDQUFwRSxFQUFpR0MsT0FBakcsQ0FBUCxDQUFqQztBQUNBOztBQUVELFNBQU9ILEtBQVA7QUFDQSxDQVZXLENBVVZ6QixLQUFLLENBQUNLLE9BVkksQ0FBWjs7QUFZQVQsT0FBTyxDQUFDUyxPQUFSLEdBQWtCb0IsS0FBbEIiLCJmaWxlIjoiNzg2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XHJcblx0dmFsdWU6IHRydWVcclxufSk7XHJcblxyXG52YXIgX01TSTIgPSByZXF1aXJlKCcuL01TSS5qcycpO1xyXG5cclxudmFyIF9NU0kzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTVNJMik7XHJcblxyXG52YXIgX2NoZWNrc3VtcyA9IHJlcXVpcmUoJy4vY2hlY2tzdW1zLmpzJyk7XHJcblxyXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxyXG5cclxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cclxuXHJcbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxyXG5cclxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XHJcblxyXG52YXIgTVNJMTEgPSBmdW5jdGlvbiAoX01TSSkge1xyXG5cdF9pbmhlcml0cyhNU0kxMSwgX01TSSk7XHJcblxyXG5cdGZ1bmN0aW9uIE1TSTExKGRhdGEsIG9wdGlvbnMpIHtcclxuXHRcdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNU0kxMSk7XHJcblxyXG5cdFx0cmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChNU0kxMS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKE1TSTExKSkuY2FsbCh0aGlzLCBkYXRhICsgKDAsIF9jaGVja3N1bXMubW9kMTEpKGRhdGEpLCBvcHRpb25zKSk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gTVNJMTE7XHJcbn0oX01TSTMuZGVmYXVsdCk7XHJcblxyXG5leHBvcnRzLmRlZmF1bHQgPSBNU0kxMTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///786\n");

/***/ }),

/***/ 787:
/*!******************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/MSI/MSI1010.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _MSI2 = __webpack_require__(/*! ./MSI.js */ 783);\n\nvar _MSI3 = _interopRequireDefault(_MSI2);\n\nvar _checksums = __webpack_require__(/*! ./checksums.js */ 785);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}\n\nvar MSI1010 = function (_MSI) {\n  _inherits(MSI1010, _MSI);\n\n  function MSI1010(data, options) {\n    _classCallCheck(this, MSI1010);\n\n    data += (0, _checksums.mod10)(data);\n    data += (0, _checksums.mod10)(data);\n    return _possibleConstructorReturn(this, (MSI1010.__proto__ || Object.getPrototypeOf(MSI1010)).call(this, data, options));\n  }\n\n  return MSI1010;\n}(_MSI3.default);\n\nexports.default = MSI1010;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9NU0kvTVNJMTAxMC5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9NU0kyIiwicmVxdWlyZSIsIl9NU0kzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9jaGVja3N1bXMiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJjYWxsIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJwcm90b3R5cGUiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiTVNJMTAxMCIsIl9NU0kiLCJkYXRhIiwib3B0aW9ucyIsIm1vZDEwIiwiZ2V0UHJvdG90eXBlT2YiXSwibWFwcGluZ3MiOiJBQUFhOztBQUViQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzVDQyxPQUFLLEVBQUUsSUFEcUMsRUFBN0M7OztBQUlBLElBQUlDLEtBQUssR0FBR0MsbUJBQU8sQ0FBQyxtQkFBRCxDQUFuQjs7QUFFQSxJQUFJQyxLQUFLLEdBQUdDLHNCQUFzQixDQUFDSCxLQUFELENBQWxDOztBQUVBLElBQUlJLFVBQVUsR0FBR0gsbUJBQU8sQ0FBQyx5QkFBRCxDQUF4Qjs7QUFFQSxTQUFTRSxzQkFBVCxDQUFnQ0UsR0FBaEMsRUFBcUMsQ0FBRSxPQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEIsRUFBRUUsT0FBTyxFQUFFRixHQUFYLEVBQXJDLENBQXdEOztBQUUvRixTQUFTRyxlQUFULENBQXlCQyxRQUF6QixFQUFtQ0MsV0FBbkMsRUFBZ0QsQ0FBRSxJQUFJLEVBQUVELFFBQVEsWUFBWUMsV0FBdEIsQ0FBSixFQUF3QyxDQUFFLE1BQU0sSUFBSUMsU0FBSixDQUFjLG1DQUFkLENBQU4sQ0FBMkQsQ0FBRTs7QUFFekosU0FBU0MsMEJBQVQsQ0FBb0NDLElBQXBDLEVBQTBDQyxJQUExQyxFQUFnRCxDQUFFLElBQUksQ0FBQ0QsSUFBTCxFQUFXLENBQUUsTUFBTSxJQUFJRSxjQUFKLENBQW1CLDJEQUFuQixDQUFOLENBQXdGLENBQUMsT0FBT0QsSUFBSSxLQUFLLE9BQU9BLElBQVAsS0FBZ0IsUUFBaEIsSUFBNEIsT0FBT0EsSUFBUCxLQUFnQixVQUFqRCxDQUFKLEdBQW1FQSxJQUFuRSxHQUEwRUQsSUFBakYsQ0FBd0Y7O0FBRWhQLFNBQVNHLFNBQVQsQ0FBbUJDLFFBQW5CLEVBQTZCQyxVQUE3QixFQUF5QyxDQUFFLElBQUksT0FBT0EsVUFBUCxLQUFzQixVQUF0QixJQUFvQ0EsVUFBVSxLQUFLLElBQXZELEVBQTZELENBQUUsTUFBTSxJQUFJUCxTQUFKLENBQWMsNkRBQTZELE9BQU9PLFVBQWxGLENBQU4sQ0FBc0csQ0FBQ0QsUUFBUSxDQUFDRSxTQUFULEdBQXFCdkIsTUFBTSxDQUFDd0IsTUFBUCxDQUFjRixVQUFVLElBQUlBLFVBQVUsQ0FBQ0MsU0FBdkMsRUFBa0QsRUFBRUUsV0FBVyxFQUFFLEVBQUV0QixLQUFLLEVBQUVrQixRQUFULEVBQW1CSyxVQUFVLEVBQUUsS0FBL0IsRUFBc0NDLFFBQVEsRUFBRSxJQUFoRCxFQUFzREMsWUFBWSxFQUFFLElBQXBFLEVBQWYsRUFBbEQsQ0FBckIsQ0FBcUssSUFBSU4sVUFBSixFQUFnQnRCLE1BQU0sQ0FBQzZCLGNBQVAsR0FBd0I3QixNQUFNLENBQUM2QixjQUFQLENBQXNCUixRQUF0QixFQUFnQ0MsVUFBaEMsQ0FBeEIsR0FBc0VELFFBQVEsQ0FBQ1MsU0FBVCxHQUFxQlIsVUFBM0YsQ0FBd0c7O0FBRTllLElBQUlTLE9BQU8sR0FBRyxVQUFVQyxJQUFWLEVBQWdCO0FBQzdCWixXQUFTLENBQUNXLE9BQUQsRUFBVUMsSUFBVixDQUFUOztBQUVBLFdBQVNELE9BQVQsQ0FBaUJFLElBQWpCLEVBQXVCQyxPQUF2QixFQUFnQztBQUMvQnRCLG1CQUFlLENBQUMsSUFBRCxFQUFPbUIsT0FBUCxDQUFmOztBQUVBRSxRQUFJLElBQUksQ0FBQyxHQUFHekIsVUFBVSxDQUFDMkIsS0FBZixFQUFzQkYsSUFBdEIsQ0FBUjtBQUNBQSxRQUFJLElBQUksQ0FBQyxHQUFHekIsVUFBVSxDQUFDMkIsS0FBZixFQUFzQkYsSUFBdEIsQ0FBUjtBQUNBLFdBQU9qQiwwQkFBMEIsQ0FBQyxJQUFELEVBQU8sQ0FBQ2UsT0FBTyxDQUFDRCxTQUFSLElBQXFCOUIsTUFBTSxDQUFDb0MsY0FBUCxDQUFzQkwsT0FBdEIsQ0FBdEIsRUFBc0RiLElBQXRELENBQTJELElBQTNELEVBQWlFZSxJQUFqRSxFQUF1RUMsT0FBdkUsQ0FBUCxDQUFqQztBQUNBOztBQUVELFNBQU9ILE9BQVA7QUFDQSxDQVphLENBWVp6QixLQUFLLENBQUNLLE9BWk0sQ0FBZDs7QUFjQVQsT0FBTyxDQUFDUyxPQUFSLEdBQWtCb0IsT0FBbEIiLCJmaWxlIjoiNzg3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XHJcblx0dmFsdWU6IHRydWVcclxufSk7XHJcblxyXG52YXIgX01TSTIgPSByZXF1aXJlKCcuL01TSS5qcycpO1xyXG5cclxudmFyIF9NU0kzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTVNJMik7XHJcblxyXG52YXIgX2NoZWNrc3VtcyA9IHJlcXVpcmUoJy4vY2hlY2tzdW1zLmpzJyk7XHJcblxyXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxyXG5cclxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cclxuXHJcbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxyXG5cclxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XHJcblxyXG52YXIgTVNJMTAxMCA9IGZ1bmN0aW9uIChfTVNJKSB7XHJcblx0X2luaGVyaXRzKE1TSTEwMTAsIF9NU0kpO1xyXG5cclxuXHRmdW5jdGlvbiBNU0kxMDEwKGRhdGEsIG9wdGlvbnMpIHtcclxuXHRcdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNU0kxMDEwKTtcclxuXHJcblx0XHRkYXRhICs9ICgwLCBfY2hlY2tzdW1zLm1vZDEwKShkYXRhKTtcclxuXHRcdGRhdGEgKz0gKDAsIF9jaGVja3N1bXMubW9kMTApKGRhdGEpO1xyXG5cdFx0cmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChNU0kxMDEwLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTVNJMTAxMCkpLmNhbGwodGhpcywgZGF0YSwgb3B0aW9ucykpO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIE1TSTEwMTA7XHJcbn0oX01TSTMuZGVmYXVsdCk7XHJcblxyXG5leHBvcnRzLmRlZmF1bHQgPSBNU0kxMDEwOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///787\n");

/***/ }),

/***/ 788:
/*!******************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/MSI/MSI1110.js ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\n\nvar _MSI2 = __webpack_require__(/*! ./MSI.js */ 783);\n\nvar _MSI3 = _interopRequireDefault(_MSI2);\n\nvar _checksums = __webpack_require__(/*! ./checksums.js */ 785);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}\n\nvar MSI1110 = function (_MSI) {\n  _inherits(MSI1110, _MSI);\n\n  function MSI1110(data, options) {\n    _classCallCheck(this, MSI1110);\n\n    data += (0, _checksums.mod11)(data);\n    data += (0, _checksums.mod10)(data);\n    return _possibleConstructorReturn(this, (MSI1110.__proto__ || Object.getPrototypeOf(MSI1110)).call(this, data, options));\n  }\n\n  return MSI1110;\n}(_MSI3.default);\n\nexports.default = MSI1110;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy90a2ktYmFyY29kZS9iYXJjb2Rlcy9NU0kvTVNJMTExMC5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9NU0kyIiwicmVxdWlyZSIsIl9NU0kzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9jaGVja3N1bXMiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJjYWxsIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJwcm90b3R5cGUiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiTVNJMTExMCIsIl9NU0kiLCJkYXRhIiwib3B0aW9ucyIsIm1vZDExIiwibW9kMTAiLCJnZXRQcm90b3R5cGVPZiJdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWJBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDNUNDLE9BQUssRUFBRSxJQURxQyxFQUE3Qzs7O0FBSUEsSUFBSUMsS0FBSyxHQUFHQyxtQkFBTyxDQUFDLG1CQUFELENBQW5COztBQUVBLElBQUlDLEtBQUssR0FBR0Msc0JBQXNCLENBQUNILEtBQUQsQ0FBbEM7O0FBRUEsSUFBSUksVUFBVSxHQUFHSCxtQkFBTyxDQUFDLHlCQUFELENBQXhCOztBQUVBLFNBQVNFLHNCQUFULENBQWdDRSxHQUFoQyxFQUFxQyxDQUFFLE9BQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QixFQUFFRSxPQUFPLEVBQUVGLEdBQVgsRUFBckMsQ0FBd0Q7O0FBRS9GLFNBQVNHLGVBQVQsQ0FBeUJDLFFBQXpCLEVBQW1DQyxXQUFuQyxFQUFnRCxDQUFFLElBQUksRUFBRUQsUUFBUSxZQUFZQyxXQUF0QixDQUFKLEVBQXdDLENBQUUsTUFBTSxJQUFJQyxTQUFKLENBQWMsbUNBQWQsQ0FBTixDQUEyRCxDQUFFOztBQUV6SixTQUFTQywwQkFBVCxDQUFvQ0MsSUFBcEMsRUFBMENDLElBQTFDLEVBQWdELENBQUUsSUFBSSxDQUFDRCxJQUFMLEVBQVcsQ0FBRSxNQUFNLElBQUlFLGNBQUosQ0FBbUIsMkRBQW5CLENBQU4sQ0FBd0YsQ0FBQyxPQUFPRCxJQUFJLEtBQUssT0FBT0EsSUFBUCxLQUFnQixRQUFoQixJQUE0QixPQUFPQSxJQUFQLEtBQWdCLFVBQWpELENBQUosR0FBbUVBLElBQW5FLEdBQTBFRCxJQUFqRixDQUF3Rjs7QUFFaFAsU0FBU0csU0FBVCxDQUFtQkMsUUFBbkIsRUFBNkJDLFVBQTdCLEVBQXlDLENBQUUsSUFBSSxPQUFPQSxVQUFQLEtBQXNCLFVBQXRCLElBQW9DQSxVQUFVLEtBQUssSUFBdkQsRUFBNkQsQ0FBRSxNQUFNLElBQUlQLFNBQUosQ0FBYyw2REFBNkQsT0FBT08sVUFBbEYsQ0FBTixDQUFzRyxDQUFDRCxRQUFRLENBQUNFLFNBQVQsR0FBcUJ2QixNQUFNLENBQUN3QixNQUFQLENBQWNGLFVBQVUsSUFBSUEsVUFBVSxDQUFDQyxTQUF2QyxFQUFrRCxFQUFFRSxXQUFXLEVBQUUsRUFBRXRCLEtBQUssRUFBRWtCLFFBQVQsRUFBbUJLLFVBQVUsRUFBRSxLQUEvQixFQUFzQ0MsUUFBUSxFQUFFLElBQWhELEVBQXNEQyxZQUFZLEVBQUUsSUFBcEUsRUFBZixFQUFsRCxDQUFyQixDQUFxSyxJQUFJTixVQUFKLEVBQWdCdEIsTUFBTSxDQUFDNkIsY0FBUCxHQUF3QjdCLE1BQU0sQ0FBQzZCLGNBQVAsQ0FBc0JSLFFBQXRCLEVBQWdDQyxVQUFoQyxDQUF4QixHQUFzRUQsUUFBUSxDQUFDUyxTQUFULEdBQXFCUixVQUEzRixDQUF3Rzs7QUFFOWUsSUFBSVMsT0FBTyxHQUFHLFVBQVVDLElBQVYsRUFBZ0I7QUFDN0JaLFdBQVMsQ0FBQ1csT0FBRCxFQUFVQyxJQUFWLENBQVQ7O0FBRUEsV0FBU0QsT0FBVCxDQUFpQkUsSUFBakIsRUFBdUJDLE9BQXZCLEVBQWdDO0FBQy9CdEIsbUJBQWUsQ0FBQyxJQUFELEVBQU9tQixPQUFQLENBQWY7O0FBRUFFLFFBQUksSUFBSSxDQUFDLEdBQUd6QixVQUFVLENBQUMyQixLQUFmLEVBQXNCRixJQUF0QixDQUFSO0FBQ0FBLFFBQUksSUFBSSxDQUFDLEdBQUd6QixVQUFVLENBQUM0QixLQUFmLEVBQXNCSCxJQUF0QixDQUFSO0FBQ0EsV0FBT2pCLDBCQUEwQixDQUFDLElBQUQsRUFBTyxDQUFDZSxPQUFPLENBQUNELFNBQVIsSUFBcUI5QixNQUFNLENBQUNxQyxjQUFQLENBQXNCTixPQUF0QixDQUF0QixFQUFzRGIsSUFBdEQsQ0FBMkQsSUFBM0QsRUFBaUVlLElBQWpFLEVBQXVFQyxPQUF2RSxDQUFQLENBQWpDO0FBQ0E7O0FBRUQsU0FBT0gsT0FBUDtBQUNBLENBWmEsQ0FZWnpCLEtBQUssQ0FBQ0ssT0FaTSxDQUFkOztBQWNBVCxPQUFPLENBQUNTLE9BQVIsR0FBa0JvQixPQUFsQiIsImZpbGUiOiI3ODguanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcclxuXHR2YWx1ZTogdHJ1ZVxyXG59KTtcclxuXHJcbnZhciBfTVNJMiA9IHJlcXVpcmUoJy4vTVNJLmpzJyk7XHJcblxyXG52YXIgX01TSTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9NU0kyKTtcclxuXHJcbnZhciBfY2hlY2tzdW1zID0gcmVxdWlyZSgnLi9jaGVja3N1bXMuanMnKTtcclxuXHJcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XHJcblxyXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxyXG5cclxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XHJcblxyXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cclxuXHJcbnZhciBNU0kxMTEwID0gZnVuY3Rpb24gKF9NU0kpIHtcclxuXHRfaW5oZXJpdHMoTVNJMTExMCwgX01TSSk7XHJcblxyXG5cdGZ1bmN0aW9uIE1TSTExMTAoZGF0YSwgb3B0aW9ucykge1xyXG5cdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1TSTExMTApO1xyXG5cclxuXHRcdGRhdGEgKz0gKDAsIF9jaGVja3N1bXMubW9kMTEpKGRhdGEpO1xyXG5cdFx0ZGF0YSArPSAoMCwgX2NoZWNrc3Vtcy5tb2QxMCkoZGF0YSk7XHJcblx0XHRyZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKE1TSTExMTAuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihNU0kxMTEwKSkuY2FsbCh0aGlzLCBkYXRhLCBvcHRpb25zKSk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gTVNJMTExMDtcclxufShfTVNJMy5kZWZhdWx0KTtcclxuXHJcbmV4cG9ydHMuZGVmYXVsdCA9IE1TSTExMTA7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///788\n");

/***/ }),

/***/ 789:
/*!***********************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/pharmacode/index.js ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.pharmacode = undefined;\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _Barcode2 = __webpack_require__(/*! ../Barcode.js */ 759);\n\nvar _Barcode3 = _interopRequireDefault(_Barcode2);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} // Encoding documentation\n// http://www.gomaro.ch/ftproot/Laetus_PHARMA-CODE.pdf\n\nvar pharmacode = function (_Barcode) {\n  _inherits(pharmacode, _Barcode);\n\n  function pharmacode(data, options) {\n    _classCallCheck(this, pharmacode);\n\n    var _this = _possibleConstructorReturn(this, (pharmacode.__proto__ || Object.getPrototypeOf(pharmacode)).call(this, data, options));\n\n    _this.number = parseInt(data, 10);\n    return _this;\n  }\n\n  _createClass(pharmacode, [{\n    key: \"encode\",\n    value: function encode() {\n      var z = this.number;\n      var result = \"\";\n\n      // http://i.imgur.com/RMm4UDJ.png\n      // (source: http://www.gomaro.ch/ftproot/Laetus_PHARMA-CODE.pdf, page: 34)\n      while (!isNaN(z) && z != 0) {\n        if (z % 2 === 0) {\n          // Even\n          result = \"11100\" + result;\n          z = (z - 2) / 2;\n        } else {\n          // Odd\n          result = \"100\" + result;\n          z = (z - 1) / 2;\n        }\n      }\n\n      // Remove the two last zeroes\n      result = result.slice(0, -2);\n\n      return {\n        data: result,\n        text: this.text };\n\n    } },\n  {\n    key: \"valid\",\n    value: function valid() {\n      return this.number >= 3 && this.number <= 131070;\n    } }]);\n\n\n  return pharmacode;\n}(_Barcode3.default);\n\nexports.pharmacode = pharmacode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///789\n");

/***/ }),

/***/ 79:
/*!***********************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/utils/record.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni, __f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _hydrogenJsSdk = _interopRequireDefault(__webpack_require__(/*! hydrogen-js-sdk */ 14));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var _default =\n{\n\n  //得到记录的总条数\n  querycount: function querycount() {\n    var uid = uni.getStorageSync(\"uid\");\n\n    return new Promise(function (resolve, reject) {\n      var query = _hydrogenJsSdk.default.Query(\"Goods\");\n      query.equalTo(\"userId\", \"==\", uid);\n      query.equalTo(\"status\", \"!=\", -1);\n      query.count().then(function (res) {\n        resolve(res);\n        console.log(__f__(\"\\u5171\\u6709\".concat(res, \"\\u6761\\u8BB0\\u5F55\"), \" at utils\\\\record.js:14\"));\n      });\n    });\n  },\n\n  //得到今日概况\n  gettoday_detail: function gettoday_detail(start_date, end_date) {\n    var uid = uni.getStorageSync(\"uid\");\n    var get_reserve = 0; //入库数量\n    var out_reserve = 0; //出库数量\n    var get_reserve_real_money = 0;\n    var out_reserve_real_money = 0;\n    var get_reserve_num = 0;\n    var out_reserve_num = 0;\n    var params = {};\n\n    return new Promise(function (resolve, reject) {\n\n      var query = _hydrogenJsSdk.default.Query(\"order_opreations\");\n      query.equalTo(\"master\", \"==\", uid);\n      query.equalTo(\"createdAt\", \">=\", start_date);\n      query.equalTo(\"createdAt\", \"<=\", end_date);\n      query.select(\"real_money\", \"type\");\n      query.limit(1000);\n      query.find().then(function (res) {\n        for (var i = 0; i < res.length; i++) {\n          if (res[i].type == 1) {\n            get_reserve_num += res[i].real_money;\n          } else if (res[i].type == -1) {\n            out_reserve_num += res[i].real_money;\n          }\n        }\n\n        var query = _hydrogenJsSdk.default.Query(\"Bills\");\n        query.equalTo(\"userId\", \"==\", uid);\n        query.equalTo(\"createdAt\", \">=\", start_date);\n        query.equalTo(\"createdAt\", \"<=\", end_date);\n        query.select(\"goodsId\", \"num\", \"total_money\", \"type\");\n        query.limit(1000);\n        query.include(\"goodsId\");\n        query.find().then(function (res) {\n          //console.log(res)\n          for (var i = 0; i < res.length; i++) {\n            if (res[i].type == 1) {\n              get_reserve += res[i].num;\n              get_reserve_real_money += res[i].num * res[i].goodsId.retailPrice;\n              //get_reserve_num += res[i].total_money;\n            } else if (res[i].type == -1) {\n              out_reserve += res[i].num;\n              out_reserve_real_money += res[i].num * res[i].goodsId.costPrice;\n              //out_reserve_num += res[i].total_money;\n            }\n          }\n\n\n          params.get_reserve = get_reserve.toFixed(uni.getStorageSync(\"setting\").show_float);\n          params.out_reserve = out_reserve.toFixed(uni.getStorageSync(\"setting\").show_float);\n          params.get_reserve_real_money = get_reserve_real_money.toFixed(uni.getStorageSync(\"setting\").show_float);\n          params.out_reserve_real_money = out_reserve_real_money.toFixed(uni.getStorageSync(\"setting\").show_float);\n          params.get_reserve_num = get_reserve_num.toFixed(uni.getStorageSync(\"setting\").show_float);\n          params.out_reserve_num = out_reserve_num.toFixed(uni.getStorageSync(\"setting\").show_float);\n          params.get_reserve_get_num = (get_reserve_real_money - get_reserve_num).toFixed(uni.getStorageSync(\"setting\").show_float);\n          params.out_reserve_get_num = (out_reserve_num - out_reserve_real_money).toFixed(uni.getStorageSync(\"setting\").show_float);\n\n\n          console.log(__f__(get_reserve, \" at utils\\\\record.js:79\"));\n\n\n          //查询当日应收和实际收款\n          var should_get_money = 0;\n          var real_get_money = 0;\n          var query = _hydrogenJsSdk.default.Query(\"order_opreations\");\n          query.equalTo(\"master\", \"==\", uid);\n          query.equalTo(\"createdAt\", \">=\", start_date);\n          query.equalTo(\"createdAt\", \"<=\", end_date);\n          query.equalTo(\"type\", \"==\", -1);\n          query.find().then(function (res) {\n            //console.log(res);\n            for (var i = 0; i < res.length; i++) {\n              should_get_money += res[i].all_money;\n              real_get_money += res[i].real_money;\n            }\n\n            params.should_get_money = should_get_money;\n            params.real_get_money = real_get_money;\n          });\n\n          resolve(params);\n        });\n      });\n\n    });\n\n\n  },\n\n  //获得库存成本和总库存\n  loadallGoods: function loadallGoods() {var _this = this;\n    var uid = uni.getStorageSync(\"uid\");\n\n    return new Promise(function (resolve, reject) {\n      var total_reserve = 0;\n      var total_money = 0;\n      var length = 0;\n      var warn_num = 0;\n\n      var params = {};\n      _this.querycount().then(function (count) {\n        params.total_products = count;\n        var query = _hydrogenJsSdk.default.Query(\"Goods\");\n        query.equalTo(\"userId\", \"==\", uid);\n        query.equalTo(\"status\", \"!=\", -1);\n        query.select(\"reserve\", \"costPrice\", \"stocktype\");\n        query.limit(1000);\n        query.find().then(function (res) {var _iteratorNormalCompletion = true;var _didIteratorError = false;var _iteratorError = undefined;try {\n\n\n\n            for (var _iterator = res[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {var item = _step.value;\n              if (item.stocktype == 0) {\n                warn_num += 1;\n              }\n              total_reserve += item.reserve;\n              total_money += item.reserve * item.costPrice;\n              params.total_money = total_money.toFixed(uni.getStorageSync(\"print_setting\").show_float),\n              params.total_reserve = total_reserve.toFixed(uni.getStorageSync(\"print_setting\").show_float),\n\n              params.warn_num = warn_num;\n              resolve(params);\n            }} catch (err) {_didIteratorError = true;_iteratorError = err;} finally {try {if (!_iteratorNormalCompletion && _iterator.return != null) {_iterator.return();}} finally {if (_didIteratorError) {throw _iteratorError;}}}\n        });\n      });\n\n    });\n\n  } };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///79\n");

/***/ }),

/***/ 790:
/*!********************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/codabar/index.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.codabar = undefined;\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _Barcode2 = __webpack_require__(/*! ../Barcode.js */ 759);\n\nvar _Barcode3 = _interopRequireDefault(_Barcode2);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} // Encoding specification:\n// http://www.barcodeisland.com/codabar.phtml\n\nvar codabar = function (_Barcode) {\n  _inherits(codabar, _Barcode);\n\n  function codabar(data, options) {\n    _classCallCheck(this, codabar);\n\n    if (data.search(/^[0-9\\-\\$\\:\\.\\+\\/]+$/) === 0) {\n      data = \"A\" + data + \"A\";\n    }\n\n    var _this = _possibleConstructorReturn(this, (codabar.__proto__ || Object.getPrototypeOf(codabar)).call(this, data.toUpperCase(), options));\n\n    _this.text = _this.options.text || _this.text.replace(/[A-D]/g, '');\n    return _this;\n  }\n\n  _createClass(codabar, [{\n    key: \"valid\",\n    value: function valid() {\n      return this.data.search(/^[A-D][0-9\\-\\$\\:\\.\\+\\/]+[A-D]$/) !== -1;\n    } },\n  {\n    key: \"encode\",\n    value: function encode() {\n      var result = [];\n      var encodings = this.getEncodings();\n      for (var i = 0; i < this.data.length; i++) {\n        result.push(encodings[this.data.charAt(i)]);\n        // for all characters except the last, append a narrow-space (\"0\")\n        if (i !== this.data.length - 1) {\n          result.push(\"0\");\n        }\n      }\n      return {\n        text: this.text,\n        data: result.join('') };\n\n    } },\n  {\n    key: \"getEncodings\",\n    value: function getEncodings() {\n      return {\n        \"0\": \"101010011\",\n        \"1\": \"101011001\",\n        \"2\": \"101001011\",\n        \"3\": \"110010101\",\n        \"4\": \"101101001\",\n        \"5\": \"110101001\",\n        \"6\": \"100101011\",\n        \"7\": \"100101101\",\n        \"8\": \"100110101\",\n        \"9\": \"110100101\",\n        \"-\": \"101001101\",\n        \"$\": \"101100101\",\n        \":\": \"1101011011\",\n        \"/\": \"1101101011\",\n        \".\": \"1101101101\",\n        \"+\": \"101100110011\",\n        \"A\": \"1011001001\",\n        \"B\": \"1001001011\",\n        \"C\": \"1010010011\",\n        \"D\": \"1010011001\" };\n\n    } }]);\n\n\n  return codabar;\n}(_Barcode3.default);\n\nexports.codabar = codabar;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///790\n");

/***/ }),

/***/ 791:
/*!***************************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/tki-barcode/barcodes/GenericBarcode/index.js ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true });\n\nexports.GenericBarcode = undefined;\n\nvar _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\nvar _Barcode2 = __webpack_require__(/*! ../Barcode.js */ 759);\n\nvar _Barcode3 = _interopRequireDefault(_Barcode2);\n\nfunction _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\nfunction _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nfunction _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;}\n\nfunction _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}\n\nvar GenericBarcode = function (_Barcode) {\n  _inherits(GenericBarcode, _Barcode);\n\n  function GenericBarcode(data, options) {\n    _classCallCheck(this, GenericBarcode);\n\n    return _possibleConstructorReturn(this, (GenericBarcode.__proto__ || Object.getPrototypeOf(GenericBarcode)).call(this, data, options)); // Sets this.data and this.text\n  }\n\n  // Return the corresponding binary numbers for the data provided\n\n\n  _createClass(GenericBarcode, [{\n    key: \"encode\",\n    value: function encode() {\n      return {\n        data: \"10101010101010101010101010101010101010101\",\n        text: this.text };\n\n    }\n\n    // Resturn true/false if the string provided is valid for this encoder\n  },\n  {\n    key: \"valid\",\n    value: function valid() {\n      return true;\n    } }]);\n\n\n  return GenericBarcode;\n}(_Barcode3.default);\n\nexports.GenericBarcode = GenericBarcode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///791\n");

/***/ }),

/***/ 8:
/*!**********************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/pages.json?{"type":"stat"} ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"appid\": \"__UNI__3F9221C\" };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJzR0FBZSxFQUFDLFNBQVEsZ0JBQVQsRSIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1wiYXBwaWRcIjpcIl9fVU5JX18zRjkyMjFDXCJ9Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n");

/***/ }),

/***/ 806:
/*!*************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/components/uni-icons/icons.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = {\n  'contact': \"\\uE100\",\n  'person': \"\\uE101\",\n  'personadd': \"\\uE102\",\n  'contact-filled': \"\\uE130\",\n  'person-filled': \"\\uE131\",\n  'personadd-filled': \"\\uE132\",\n  'phone': \"\\uE200\",\n  'email': \"\\uE201\",\n  'chatbubble': \"\\uE202\",\n  'chatboxes': \"\\uE203\",\n  'phone-filled': \"\\uE230\",\n  'email-filled': \"\\uE231\",\n  'chatbubble-filled': \"\\uE232\",\n  'chatboxes-filled': \"\\uE233\",\n  'weibo': \"\\uE260\",\n  'weixin': \"\\uE261\",\n  'pengyouquan': \"\\uE262\",\n  'chat': \"\\uE263\",\n  'qq': \"\\uE264\",\n  'videocam': \"\\uE300\",\n  'camera': \"\\uE301\",\n  'mic': \"\\uE302\",\n  'location': \"\\uE303\",\n  'mic-filled': \"\\uE332\",\n  'speech': \"\\uE332\",\n  'location-filled': \"\\uE333\",\n  'micoff': \"\\uE360\",\n  'image': \"\\uE363\",\n  'map': \"\\uE364\",\n  'compose': \"\\uE400\",\n  'trash': \"\\uE401\",\n  'upload': \"\\uE402\",\n  'download': \"\\uE403\",\n  'close': \"\\uE404\",\n  'redo': \"\\uE405\",\n  'undo': \"\\uE406\",\n  'refresh': \"\\uE407\",\n  'star': \"\\uE408\",\n  'plus': \"\\uE409\",\n  'minus': \"\\uE410\",\n  'circle': \"\\uE411\",\n  'checkbox': \"\\uE411\",\n  'close-filled': \"\\uE434\",\n  'clear': \"\\uE434\",\n  'refresh-filled': \"\\uE437\",\n  'star-filled': \"\\uE438\",\n  'plus-filled': \"\\uE439\",\n  'minus-filled': \"\\uE440\",\n  'circle-filled': \"\\uE441\",\n  'checkbox-filled': \"\\uE442\",\n  'closeempty': \"\\uE460\",\n  'refreshempty': \"\\uE461\",\n  'reload': \"\\uE462\",\n  'starhalf': \"\\uE463\",\n  'spinner': \"\\uE464\",\n  'spinner-cycle': \"\\uE465\",\n  'search': \"\\uE466\",\n  'plusempty': \"\\uE468\",\n  'forward': \"\\uE470\",\n  'back': \"\\uE471\",\n  'left-nav': \"\\uE471\",\n  'checkmarkempty': \"\\uE472\",\n  'home': \"\\uE500\",\n  'navigate': \"\\uE501\",\n  'gear': \"\\uE502\",\n  'paperplane': \"\\uE503\",\n  'info': \"\\uE504\",\n  'help': \"\\uE505\",\n  'locked': \"\\uE506\",\n  'more': \"\\uE507\",\n  'flag': \"\\uE508\",\n  'home-filled': \"\\uE530\",\n  'gear-filled': \"\\uE532\",\n  'info-filled': \"\\uE534\",\n  'help-filled': \"\\uE535\",\n  'more-filled': \"\\uE537\",\n  'settings': \"\\uE560\",\n  'list': \"\\uE562\",\n  'bars': \"\\uE563\",\n  'loop': \"\\uE565\",\n  'paperclip': \"\\uE567\",\n  'eye': \"\\uE568\",\n  'arrowup': \"\\uE580\",\n  'arrowdown': \"\\uE581\",\n  'arrowleft': \"\\uE582\",\n  'arrowright': \"\\uE583\",\n  'arrowthinup': \"\\uE584\",\n  'arrowthindown': \"\\uE585\",\n  'arrowthinleft': \"\\uE586\",\n  'arrowthinright': \"\\uE587\",\n  'pulldown': \"\\uE588\",\n  'closefill': \"\\uE589\",\n  'sound': \"\\uE590\",\n  'scan': \"\\uE612\" };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy91bmktaWNvbnMvaWNvbnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6InNHQUFlO0FBQ2QsYUFBVyxRQURHO0FBRWQsWUFBVSxRQUZJO0FBR2QsZUFBYSxRQUhDO0FBSWQsb0JBQWtCLFFBSko7QUFLZCxtQkFBaUIsUUFMSDtBQU1kLHNCQUFvQixRQU5OO0FBT2QsV0FBUyxRQVBLO0FBUWQsV0FBUyxRQVJLO0FBU2QsZ0JBQWMsUUFUQTtBQVVkLGVBQWEsUUFWQztBQVdkLGtCQUFnQixRQVhGO0FBWWQsa0JBQWdCLFFBWkY7QUFhZCx1QkFBcUIsUUFiUDtBQWNkLHNCQUFvQixRQWROO0FBZWQsV0FBUyxRQWZLO0FBZ0JkLFlBQVUsUUFoQkk7QUFpQmQsaUJBQWUsUUFqQkQ7QUFrQmQsVUFBUSxRQWxCTTtBQW1CZCxRQUFNLFFBbkJRO0FBb0JkLGNBQVksUUFwQkU7QUFxQmQsWUFBVSxRQXJCSTtBQXNCZCxTQUFPLFFBdEJPO0FBdUJkLGNBQVksUUF2QkU7QUF3QmQsZ0JBQWMsUUF4QkE7QUF5QmQsWUFBVSxRQXpCSTtBQTBCZCxxQkFBbUIsUUExQkw7QUEyQmQsWUFBVSxRQTNCSTtBQTRCZCxXQUFTLFFBNUJLO0FBNkJkLFNBQU8sUUE3Qk87QUE4QmQsYUFBVyxRQTlCRztBQStCZCxXQUFTLFFBL0JLO0FBZ0NkLFlBQVUsUUFoQ0k7QUFpQ2QsY0FBWSxRQWpDRTtBQWtDZCxXQUFTLFFBbENLO0FBbUNkLFVBQVEsUUFuQ007QUFvQ2QsVUFBUSxRQXBDTTtBQXFDZCxhQUFXLFFBckNHO0FBc0NkLFVBQVEsUUF0Q007QUF1Q2QsVUFBUSxRQXZDTTtBQXdDZCxXQUFTLFFBeENLO0FBeUNkLFlBQVUsUUF6Q0k7QUEwQ2QsY0FBWSxRQTFDRTtBQTJDZCxrQkFBZ0IsUUEzQ0Y7QUE0Q2QsV0FBUyxRQTVDSztBQTZDZCxvQkFBa0IsUUE3Q0o7QUE4Q2QsaUJBQWUsUUE5Q0Q7QUErQ2QsaUJBQWUsUUEvQ0Q7QUFnRGQsa0JBQWdCLFFBaERGO0FBaURkLG1CQUFpQixRQWpESDtBQWtEZCxxQkFBbUIsUUFsREw7QUFtRGQsZ0JBQWMsUUFuREE7QUFvRGQsa0JBQWdCLFFBcERGO0FBcURkLFlBQVUsUUFyREk7QUFzRGQsY0FBWSxRQXRERTtBQXVEZCxhQUFXLFFBdkRHO0FBd0RkLG1CQUFpQixRQXhESDtBQXlEZCxZQUFVLFFBekRJO0FBMERkLGVBQWEsUUExREM7QUEyRGQsYUFBVyxRQTNERztBQTREZCxVQUFRLFFBNURNO0FBNkRkLGNBQVksUUE3REU7QUE4RGQsb0JBQWtCLFFBOURKO0FBK0RkLFVBQVEsUUEvRE07QUFnRWQsY0FBWSxRQWhFRTtBQWlFZCxVQUFRLFFBakVNO0FBa0VkLGdCQUFjLFFBbEVBO0FBbUVkLFVBQVEsUUFuRU07QUFvRWQsVUFBUSxRQXBFTTtBQXFFZCxZQUFVLFFBckVJO0FBc0VkLFVBQVEsUUF0RU07QUF1RWQsVUFBUSxRQXZFTTtBQXdFZCxpQkFBZSxRQXhFRDtBQXlFZCxpQkFBZSxRQXpFRDtBQTBFZCxpQkFBZSxRQTFFRDtBQTJFZCxpQkFBZSxRQTNFRDtBQTRFZCxpQkFBZSxRQTVFRDtBQTZFZCxjQUFZLFFBN0VFO0FBOEVkLFVBQVEsUUE5RU07QUErRWQsVUFBUSxRQS9FTTtBQWdGZCxVQUFRLFFBaEZNO0FBaUZkLGVBQWEsUUFqRkM7QUFrRmQsU0FBTyxRQWxGTztBQW1GZCxhQUFXLFFBbkZHO0FBb0ZkLGVBQWEsUUFwRkM7QUFxRmQsZUFBYSxRQXJGQztBQXNGZCxnQkFBYyxRQXRGQTtBQXVGZCxpQkFBZSxRQXZGRDtBQXdGZCxtQkFBaUIsUUF4Rkg7QUF5RmQsbUJBQWlCLFFBekZIO0FBMEZkLG9CQUFrQixRQTFGSjtBQTJGZCxjQUFZLFFBM0ZFO0FBNEZkLGVBQWEsUUE1RkM7QUE2RmQsV0FBUyxRQTdGSztBQThGZCxVQUFRLFFBOUZNLEUiLCJmaWxlIjoiODA2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xyXG5cdCdjb250YWN0JzogJ1xcdWUxMDAnLFxyXG5cdCdwZXJzb24nOiAnXFx1ZTEwMScsXHJcblx0J3BlcnNvbmFkZCc6ICdcXHVlMTAyJyxcclxuXHQnY29udGFjdC1maWxsZWQnOiAnXFx1ZTEzMCcsXHJcblx0J3BlcnNvbi1maWxsZWQnOiAnXFx1ZTEzMScsXHJcblx0J3BlcnNvbmFkZC1maWxsZWQnOiAnXFx1ZTEzMicsXHJcblx0J3Bob25lJzogJ1xcdWUyMDAnLFxyXG5cdCdlbWFpbCc6ICdcXHVlMjAxJyxcclxuXHQnY2hhdGJ1YmJsZSc6ICdcXHVlMjAyJyxcclxuXHQnY2hhdGJveGVzJzogJ1xcdWUyMDMnLFxyXG5cdCdwaG9uZS1maWxsZWQnOiAnXFx1ZTIzMCcsXHJcblx0J2VtYWlsLWZpbGxlZCc6ICdcXHVlMjMxJyxcclxuXHQnY2hhdGJ1YmJsZS1maWxsZWQnOiAnXFx1ZTIzMicsXHJcblx0J2NoYXRib3hlcy1maWxsZWQnOiAnXFx1ZTIzMycsXHJcblx0J3dlaWJvJzogJ1xcdWUyNjAnLFxyXG5cdCd3ZWl4aW4nOiAnXFx1ZTI2MScsXHJcblx0J3Blbmd5b3VxdWFuJzogJ1xcdWUyNjInLFxyXG5cdCdjaGF0JzogJ1xcdWUyNjMnLFxyXG5cdCdxcSc6ICdcXHVlMjY0JyxcclxuXHQndmlkZW9jYW0nOiAnXFx1ZTMwMCcsXHJcblx0J2NhbWVyYSc6ICdcXHVlMzAxJyxcclxuXHQnbWljJzogJ1xcdWUzMDInLFxyXG5cdCdsb2NhdGlvbic6ICdcXHVlMzAzJyxcclxuXHQnbWljLWZpbGxlZCc6ICdcXHVlMzMyJyxcclxuXHQnc3BlZWNoJzogJ1xcdWUzMzInLFxyXG5cdCdsb2NhdGlvbi1maWxsZWQnOiAnXFx1ZTMzMycsXHJcblx0J21pY29mZic6ICdcXHVlMzYwJyxcclxuXHQnaW1hZ2UnOiAnXFx1ZTM2MycsXHJcblx0J21hcCc6ICdcXHVlMzY0JyxcclxuXHQnY29tcG9zZSc6ICdcXHVlNDAwJyxcclxuXHQndHJhc2gnOiAnXFx1ZTQwMScsXHJcblx0J3VwbG9hZCc6ICdcXHVlNDAyJyxcclxuXHQnZG93bmxvYWQnOiAnXFx1ZTQwMycsXHJcblx0J2Nsb3NlJzogJ1xcdWU0MDQnLFxyXG5cdCdyZWRvJzogJ1xcdWU0MDUnLFxyXG5cdCd1bmRvJzogJ1xcdWU0MDYnLFxyXG5cdCdyZWZyZXNoJzogJ1xcdWU0MDcnLFxyXG5cdCdzdGFyJzogJ1xcdWU0MDgnLFxyXG5cdCdwbHVzJzogJ1xcdWU0MDknLFxyXG5cdCdtaW51cyc6ICdcXHVlNDEwJyxcclxuXHQnY2lyY2xlJzogJ1xcdWU0MTEnLFxyXG5cdCdjaGVja2JveCc6ICdcXHVlNDExJyxcclxuXHQnY2xvc2UtZmlsbGVkJzogJ1xcdWU0MzQnLFxyXG5cdCdjbGVhcic6ICdcXHVlNDM0JyxcclxuXHQncmVmcmVzaC1maWxsZWQnOiAnXFx1ZTQzNycsXHJcblx0J3N0YXItZmlsbGVkJzogJ1xcdWU0MzgnLFxyXG5cdCdwbHVzLWZpbGxlZCc6ICdcXHVlNDM5JyxcclxuXHQnbWludXMtZmlsbGVkJzogJ1xcdWU0NDAnLFxyXG5cdCdjaXJjbGUtZmlsbGVkJzogJ1xcdWU0NDEnLFxyXG5cdCdjaGVja2JveC1maWxsZWQnOiAnXFx1ZTQ0MicsXHJcblx0J2Nsb3NlZW1wdHknOiAnXFx1ZTQ2MCcsXHJcblx0J3JlZnJlc2hlbXB0eSc6ICdcXHVlNDYxJyxcclxuXHQncmVsb2FkJzogJ1xcdWU0NjInLFxyXG5cdCdzdGFyaGFsZic6ICdcXHVlNDYzJyxcclxuXHQnc3Bpbm5lcic6ICdcXHVlNDY0JyxcclxuXHQnc3Bpbm5lci1jeWNsZSc6ICdcXHVlNDY1JyxcclxuXHQnc2VhcmNoJzogJ1xcdWU0NjYnLFxyXG5cdCdwbHVzZW1wdHknOiAnXFx1ZTQ2OCcsXHJcblx0J2ZvcndhcmQnOiAnXFx1ZTQ3MCcsXHJcblx0J2JhY2snOiAnXFx1ZTQ3MScsXHJcblx0J2xlZnQtbmF2JzogJ1xcdWU0NzEnLFxyXG5cdCdjaGVja21hcmtlbXB0eSc6ICdcXHVlNDcyJyxcclxuXHQnaG9tZSc6ICdcXHVlNTAwJyxcclxuXHQnbmF2aWdhdGUnOiAnXFx1ZTUwMScsXHJcblx0J2dlYXInOiAnXFx1ZTUwMicsXHJcblx0J3BhcGVycGxhbmUnOiAnXFx1ZTUwMycsXHJcblx0J2luZm8nOiAnXFx1ZTUwNCcsXHJcblx0J2hlbHAnOiAnXFx1ZTUwNScsXHJcblx0J2xvY2tlZCc6ICdcXHVlNTA2JyxcclxuXHQnbW9yZSc6ICdcXHVlNTA3JyxcclxuXHQnZmxhZyc6ICdcXHVlNTA4JyxcclxuXHQnaG9tZS1maWxsZWQnOiAnXFx1ZTUzMCcsXHJcblx0J2dlYXItZmlsbGVkJzogJ1xcdWU1MzInLFxyXG5cdCdpbmZvLWZpbGxlZCc6ICdcXHVlNTM0JyxcclxuXHQnaGVscC1maWxsZWQnOiAnXFx1ZTUzNScsXHJcblx0J21vcmUtZmlsbGVkJzogJ1xcdWU1MzcnLFxyXG5cdCdzZXR0aW5ncyc6ICdcXHVlNTYwJyxcclxuXHQnbGlzdCc6ICdcXHVlNTYyJyxcclxuXHQnYmFycyc6ICdcXHVlNTYzJyxcclxuXHQnbG9vcCc6ICdcXHVlNTY1JyxcclxuXHQncGFwZXJjbGlwJzogJ1xcdWU1NjcnLFxyXG5cdCdleWUnOiAnXFx1ZTU2OCcsXHJcblx0J2Fycm93dXAnOiAnXFx1ZTU4MCcsXHJcblx0J2Fycm93ZG93bic6ICdcXHVlNTgxJyxcclxuXHQnYXJyb3dsZWZ0JzogJ1xcdWU1ODInLFxyXG5cdCdhcnJvd3JpZ2h0JzogJ1xcdWU1ODMnLFxyXG5cdCdhcnJvd3RoaW51cCc6ICdcXHVlNTg0JyxcclxuXHQnYXJyb3d0aGluZG93bic6ICdcXHVlNTg1JyxcclxuXHQnYXJyb3d0aGlubGVmdCc6ICdcXHVlNTg2JyxcclxuXHQnYXJyb3d0aGlucmlnaHQnOiAnXFx1ZTU4NycsXHJcblx0J3B1bGxkb3duJzogJ1xcdWU1ODgnLFxyXG5cdCdjbG9zZWZpbGwnOiAnXFx1ZTU4OScsXHJcblx0J3NvdW5kJzogJ1xcdWU1OTAnLFxyXG5cdCdzY2FuJzogJ1xcdWU2MTInXHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///806\n");

/***/ }),

/***/ 88:
/*!**************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/utils/send_temp.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni, __f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _hydrogenJsSdk = _interopRequireDefault(__webpack_require__(/*! hydrogen-js-sdk */ 14));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var _default =\n{\n  //发送入库模板\n  send_in: function send_in(params) {\n    var openid = uni.getStorageSync(\"setting\").wx_openid;\n    uni.request({\n      url: 'https://www.jimuzhou.com/api/send_temp.php', //仅为示例，并非真实接口地址。\n      method: \"POST\",\n      data: {\n        openid: openid,\n        frist: params.frist,\n        data1: params.data1,\n        data2: params.data2,\n        remark: params.remark,\n        url: params.url,\n        type: \"in\" },\n\n      header: {\n        'content-type': 'application/x-www-form-urlencoded' //自定义请求头信息\n      },\n      success: function success(res) {\n        console.log(__f__(res, \" at utils\\\\send_temp.js:22\"));\n      } });\n\n  },\n\n  //发送采购模板\n  send_in_noconfrim: function send_in_noconfrim(params) {\n    var openid = uni.getStorageSync(\"setting\").wx_openid;\n    uni.request({\n      url: 'https://www.jimuzhou.com/api/send_temp.php', //仅为示例，并非真实接口地址。\n      method: \"POST\",\n      data: {\n        openid: openid,\n        frist: params.frist,\n        data1: params.data1,\n        data2: params.data2,\n        data3: params.data3,\n        data4: params.data4,\n        remark: params.remark,\n        url: params.url,\n        type: \"in_noconfrim\" },\n\n      header: {\n        'content-type': 'application/x-www-form-urlencoded' //自定义请求头信息\n      },\n      success: function success(res) {\n        console.log(__f__(res, \" at utils\\\\send_temp.js:48\"));\n      } });\n\n  },\n\n  //发送入库模板\n  send_in_mini: function send_in_mini(params) {\n    var modelData = {\n      \"touser\": uni.getStorageSync(\"openid\"),\n      \"template_id\": \"nqZl9FWDofCo9cxU4de45grLKh2GU-PJcAvWSbJMy9k\",\n      \"page\": \"/pages/report/EnteringHistory/detail/detail?id=\" + params.id,\n      \"form_id\": params.form_Id,\n      \"data\": params,\n      \"emphasis_keyword\": \"\" };\n\n\n    _hydrogenJsSdk.default.sendWeAppMessage(modelData).then(function (response) {\n      console.log(__f__(response, \" at utils\\\\send_temp.js:65\"));\n    }).catch(function (error) {\n      console.log(__f__(error, \" at utils\\\\send_temp.js:67\"));\n    });\n  },\n\n  //发送入库模板\n  send_out_mini: function send_out_mini(params) {\n    var modelData = {\n      \"touser\": uni.getStorageSync(\"openid\"),\n      \"template_id\": \"z0Km0FFiuvnNiUcXtZD046j43ue5_AxR05cDHFLLXPY\",\n      \"page\": \"/pages/report/EnteringHistory/detail/detail?id=\" + params.id,\n      \"form_id\": params.form_Id,\n      \"data\": params,\n      \"emphasis_keyword\": \"\" };\n\n\n    _hydrogenJsSdk.default.sendWeAppMessage(modelData).then(function (response) {\n      console.log(__f__(response, \" at utils\\\\send_temp.js:83\"));\n    }).catch(function (error) {\n      console.log(__f__(error, \" at utils\\\\send_temp.js:85\"));\n    });\n  },\n\n  //发送出库模板\n  send_temp: function send_temp(params) {\n    var openid = uni.getStorageSync(\"setting\").wx_openid;\n    uni.request({\n      url: 'https://www.jimuzhou.com/api/send_temp.php', //仅为示例，并非真实接口地址。\n      method: \"POST\",\n      data: {\n        openid: openid,\n        data1: params.data1,\n        data2: params.data2,\n        data3: params.data3,\n        data4: params.data4,\n        remark: \"备注:\" + params.remark,\n        url: params.url,\n        type: \"out\" },\n\n      header: {\n        'content-type': 'application/x-www-form-urlencoded' //自定义请求头信息\n      },\n      success: function success(res) {\n        console.log(__f__(res, \" at utils\\\\send_temp.js:109\"));\n      } });\n\n  } };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vdXRpbHMvc2VuZF90ZW1wLmpzIl0sIm5hbWVzIjpbInNlbmRfaW4iLCJwYXJhbXMiLCJvcGVuaWQiLCJ1bmkiLCJnZXRTdG9yYWdlU3luYyIsInd4X29wZW5pZCIsInJlcXVlc3QiLCJ1cmwiLCJtZXRob2QiLCJkYXRhIiwiZnJpc3QiLCJkYXRhMSIsImRhdGEyIiwicmVtYXJrIiwidHlwZSIsImhlYWRlciIsInN1Y2Nlc3MiLCJyZXMiLCJjb25zb2xlIiwibG9nIiwic2VuZF9pbl9ub2NvbmZyaW0iLCJkYXRhMyIsImRhdGE0Iiwic2VuZF9pbl9taW5pIiwibW9kZWxEYXRhIiwiaWQiLCJmb3JtX0lkIiwiQm1vYiIsInNlbmRXZUFwcE1lc3NhZ2UiLCJ0aGVuIiwicmVzcG9uc2UiLCJjYXRjaCIsImVycm9yIiwic2VuZF9vdXRfbWluaSIsInNlbmRfdGVtcCJdLCJtYXBwaW5ncyI6InlJQUFBLDRGO0FBQ2U7QUFDZDtBQUNBQSxTQUZjLG1CQUVOQyxNQUZNLEVBRUM7QUFDZCxRQUFJQyxNQUFNLEdBQUdDLEdBQUcsQ0FBQ0MsY0FBSixDQUFtQixTQUFuQixFQUE4QkMsU0FBM0M7QUFDQUYsT0FBRyxDQUFDRyxPQUFKLENBQVk7QUFDUkMsU0FBRyxFQUFFLDRDQURHLEVBQzJDO0FBQ3REQyxZQUFNLEVBQUMsTUFGSTtBQUdSQyxVQUFJLEVBQUU7QUFDRlAsY0FBTSxFQUFFQSxNQUROO0FBRVJRLGFBQUssRUFBQ1QsTUFBTSxDQUFDUyxLQUZMO0FBR1JDLGFBQUssRUFBRVYsTUFBTSxDQUFDVSxLQUhOO0FBSVJDLGFBQUssRUFBRVgsTUFBTSxDQUFDVyxLQUpOO0FBS1JDLGNBQU0sRUFBRVosTUFBTSxDQUFDWSxNQUxQO0FBTVJOLFdBQUcsRUFBQ04sTUFBTSxDQUFDTSxHQU5IO0FBT1JPLFlBQUksRUFBQyxJQVBHLEVBSEU7O0FBWVJDLFlBQU0sRUFBRTtBQUNKLHdCQUFnQixtQ0FEWixDQUNnRDtBQURoRCxPQVpBO0FBZVJDLGFBQU8s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TjtBQUVSUyxhQUFLLEVBQUVWLE1BQU0sQ0FBQ1UsS0FGTjtBQUdSQyxhQUFLLEVBQUVYLE1BQU0sQ0FBQ1csS0FITjtBQUlSUyxhQUFLLEVBQUVwQixNQUFNLENBQUNvQixLQUpOO0FBS1JDLGFBQUssRUFBRXJCLE1BQU0sQ0FBQ3FCLEtBTE47QUFNUlQsY0FBTSxFQUFFLFFBQU1aLE1BQU0sQ0FBQ1ksTUFOYjtBQU9STixXQUFHLEVBQUNOLE1BQU0sQ0FBQ00sR0FQSDtBQVFSTyxZQUFJLEVBQUMsS0FSRyxFQUhFOztBQWFSQyxZQUFNLEVBQUU7QUFDSix3QkFBZ0IsbUNBRFosQ0FDZ0Q7QUFEaEQsT0FiQTtBQWdCUkMsYUFBTyxFQUFFLGlCQUFDQyxHQUFELEVBQVM7QUFDZEMsZUFBTyxDQUFDQyxHQUFSLE9BQVlGLEdBQVo7QUFDSCxPQWxCTyxFQUFaOztBQW9CQSxHQTlHYSxFIiwiZmlsZSI6Ijg4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJtb2IgZnJvbSBcImh5ZHJvZ2VuLWpzLXNka1wiO1xyXG5leHBvcnQgZGVmYXVsdCB7XHJcblx0Ly/lj5HpgIHlhaXlupPmqKHmnb9cclxuXHRzZW5kX2luKHBhcmFtcyl7XHJcblx0XHRsZXQgb3BlbmlkID0gdW5pLmdldFN0b3JhZ2VTeW5jKFwic2V0dGluZ1wiKS53eF9vcGVuaWRcclxuXHRcdHVuaS5yZXF1ZXN0KHtcclxuXHRcdCAgICB1cmw6ICdodHRwczovL3d3dy5qaW11emhvdS5jb20vYXBpL3NlbmRfdGVtcC5waHAnLCAvL+S7heS4uuekuuS+i++8jOW5tumdnuecn+WunuaOpeWPo+WcsOWdgOOAglxyXG5cdFx0XHRtZXRob2Q6XCJQT1NUXCIsXHJcblx0XHQgICAgZGF0YToge1xyXG5cdFx0ICAgICAgICBvcGVuaWQ6IG9wZW5pZCxcclxuXHRcdFx0XHRmcmlzdDpwYXJhbXMuZnJpc3QsXHJcblx0XHRcdFx0ZGF0YTE6IHBhcmFtcy5kYXRhMSxcclxuXHRcdFx0XHRkYXRhMjogcGFyYW1zLmRhdGEyLFxyXG5cdFx0XHRcdHJlbWFyazogcGFyYW1zLnJlbWFyayxcclxuXHRcdFx0XHR1cmw6cGFyYW1zLnVybCxcclxuXHRcdFx0XHR0eXBlOlwiaW5cIlxyXG5cdFx0ICAgIH0sXHJcblx0XHQgICAgaGVhZGVyOiB7XHJcblx0XHQgICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyAvL+iHquWumuS5ieivt+axguWktOS/oeaBr1xyXG5cdFx0ICAgIH0sXHJcblx0XHQgICAgc3VjY2VzczogKHJlcykgPT4ge1xyXG5cdFx0ICAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xyXG5cdFx0ICAgIH1cclxuXHRcdH0pO1xyXG5cdH0sXHJcblx0XHJcblx0Ly/lj5HpgIHph4fotK3mqKHmnb9cclxuXHRzZW5kX2luX25vY29uZnJpbShwYXJhbXMpe1xyXG5cdFx0bGV0IG9wZW5pZCA9IHVuaS5nZXRTdG9yYWdlU3luYyhcInNldHRpbmdcIikud3hfb3BlbmlkXHJcblx0XHR1bmkucmVxdWVzdCh7XHJcblx0XHQgICAgdXJsOiAnaHR0cHM6Ly93d3cuamltdXpob3UuY29tL2FwaS9zZW5kX3RlbXAucGhwJywgLy/ku4XkuLrnpLrkvovvvIzlubbpnZ7nnJ/lrp7mjqXlj6PlnLDlnYDjgIJcclxuXHRcdFx0bWV0aG9kOlwiUE9TVFwiLFxyXG5cdFx0ICAgIGRhdGE6IHtcclxuXHRcdCAgICBvcGVuaWQ6IG9wZW5pZCxcclxuXHRcdFx0XHRmcmlzdDpwYXJhbXMuZnJpc3QsXHJcblx0XHRcdFx0ZGF0YTE6IHBhcmFtcy5kYXRhMSxcclxuXHRcdFx0XHRkYXRhMjogcGFyYW1zLmRhdGEyLFxyXG5cdFx0XHRcdGRhdGEzOiBwYXJhbXMuZGF0YTMsXHJcblx0XHRcdFx0ZGF0YTQ6IHBhcmFtcy5kYXRhNCxcclxuXHRcdFx0XHRyZW1hcms6IHBhcmFtcy5yZW1hcmssXHJcblx0XHRcdFx0dXJsOnBhcmFtcy51cmwsXHJcblx0XHRcdFx0dHlwZTpcImluX25vY29uZnJpbVwiXHJcblx0XHQgICAgfSxcclxuXHRcdCAgICBoZWFkZXI6IHtcclxuXHRcdCAgICAgICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnIC8v6Ieq5a6a5LmJ6K+35rGC5aS05L+h5oGvXHJcblx0XHQgICAgfSxcclxuXHRcdCAgICBzdWNjZXNzOiAocmVzKSA9PiB7XHJcblx0XHQgICAgICAgIGNvbnNvbGUubG9nKHJlcyk7XHJcblx0XHQgICAgfVxyXG5cdFx0fSk7XHJcblx0fSxcclxuXHRcclxuXHQvL+WPkemAgeWFpeW6k+aooeadv1xyXG5cdHNlbmRfaW5fbWluaShwYXJhbXMpe1xyXG5cdFx0bGV0IG1vZGVsRGF0YSA9IHtcclxuXHRcdCAgICBcInRvdXNlclwiOiB1bmkuZ2V0U3RvcmFnZVN5bmMoXCJvcGVuaWRcIiksXHJcblx0XHQgICAgXCJ0ZW1wbGF0ZV9pZFwiOiBcIm5xWmw5RldEb2ZDbzljeFU0ZGU0NWdyTEtoMkdVLVBKY0F2V1NiSk15OWtcIixcclxuXHRcdCAgICBcInBhZ2VcIjogXCIvcGFnZXMvcmVwb3J0L0VudGVyaW5nSGlzdG9yeS9kZXRhaWwvZGV0YWlsP2lkPVwiK3BhcmFtcy5pZCxcclxuXHRcdCAgICBcImZvcm1faWRcIjpwYXJhbXMuZm9ybV9JZCxcclxuXHRcdCAgICBcImRhdGFcIjogcGFyYW1zLFxyXG5cdFx0ICAgIFwiZW1waGFzaXNfa2V5d29yZFwiOiBcIlwiXHJcblx0XHR9XHJcblx0XHRcclxuXHRcdEJtb2Iuc2VuZFdlQXBwTWVzc2FnZShtb2RlbERhdGEpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcblx0XHQgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xyXG5cdFx0fSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XHJcblx0XHQgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG5cdFx0fSk7XHJcblx0fSxcclxuXHRcclxuXHQvL+WPkemAgeWFpeW6k+aooeadv1xyXG5cdHNlbmRfb3V0X21pbmkocGFyYW1zKXtcclxuXHRcdGxldCBtb2RlbERhdGEgPSB7XHJcblx0XHQgICAgXCJ0b3VzZXJcIjogdW5pLmdldFN0b3JhZ2VTeW5jKFwib3BlbmlkXCIpLFxyXG5cdFx0ICAgIFwidGVtcGxhdGVfaWRcIjogXCJ6MEttMEZGaXV2bk5pVWNYdFpEMDQ2ajQzdWU1X0F4UjA1Y0RIRkxMWFBZXCIsXHJcblx0XHQgICAgXCJwYWdlXCI6IFwiL3BhZ2VzL3JlcG9ydC9FbnRlcmluZ0hpc3RvcnkvZGV0YWlsL2RldGFpbD9pZD1cIitwYXJhbXMuaWQsXHJcblx0XHQgICAgXCJmb3JtX2lkXCI6cGFyYW1zLmZvcm1fSWQsXHJcblx0XHQgICAgXCJkYXRhXCI6IHBhcmFtcyxcclxuXHRcdCAgICBcImVtcGhhc2lzX2tleXdvcmRcIjogXCJcIlxyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHRCbW9iLnNlbmRXZUFwcE1lc3NhZ2UobW9kZWxEYXRhKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG5cdFx0ICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcclxuXHRcdH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xyXG5cdFx0ICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuXHRcdH0pO1xyXG5cdH0sXHJcblx0XHJcblx0Ly/lj5HpgIHlh7rlupPmqKHmnb9cclxuXHRzZW5kX3RlbXAocGFyYW1zKXtcclxuXHRcdGxldCBvcGVuaWQgPSB1bmkuZ2V0U3RvcmFnZVN5bmMoXCJzZXR0aW5nXCIpLnd4X29wZW5pZFxyXG5cdFx0dW5pLnJlcXVlc3Qoe1xyXG5cdFx0ICAgIHVybDogJ2h0dHBzOi8vd3d3LmppbXV6aG91LmNvbS9hcGkvc2VuZF90ZW1wLnBocCcsIC8v5LuF5Li656S65L6L77yM5bm26Z2e55yf5a6e5o6l5Y+j5Zyw5Z2A44CCXHJcblx0XHRcdG1ldGhvZDpcIlBPU1RcIixcclxuXHRcdCAgICBkYXRhOiB7XHJcblx0XHQgICAgICAgIG9wZW5pZDogb3BlbmlkLFxyXG5cdFx0XHRcdGRhdGExOiBwYXJhbXMuZGF0YTEsXHJcblx0XHRcdFx0ZGF0YTI6IHBhcmFtcy5kYXRhMixcclxuXHRcdFx0XHRkYXRhMzogcGFyYW1zLmRhdGEzLFxyXG5cdFx0XHRcdGRhdGE0OiBwYXJhbXMuZGF0YTQsXHJcblx0XHRcdFx0cmVtYXJrOiBcIuWkh+azqDpcIitwYXJhbXMucmVtYXJrLFxyXG5cdFx0XHRcdHVybDpwYXJhbXMudXJsLFxyXG5cdFx0XHRcdHR5cGU6XCJvdXRcIlxyXG5cdFx0ICAgIH0sXHJcblx0XHQgICAgaGVhZGVyOiB7XHJcblx0XHQgICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyAvL+iHquWumuS5ieivt+axguWktOS/oeaBr1xyXG5cdFx0ICAgIH0sXHJcblx0XHQgICAgc3VjY2VzczogKHJlcykgPT4ge1xyXG5cdFx0ICAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xyXG5cdFx0ICAgIH1cclxuXHRcdH0pO1xyXG5cdH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///88\n");

/***/ }),

/***/ 89:
/*!**********************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/utils/print.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__, uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _hydrogenJsSdk = _interopRequireDefault(__webpack_require__(/*! hydrogen-js-sdk */ 14));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var _default =\n{\n  //自动打印凭证\n  autoPrint: function autoPrint(id) {var _this = this;\n    console.log(__f__(\"sssss\", id, \" at utils\\\\print.js:5\"));\n    var query = _hydrogenJsSdk.default.Query('order_opreations');\n    query.include(\"opreater\", \"custom\", \"producer\", \"stock\");\n    query.get(id).then(function (res) {\n      console.log(__f__(res, \" at utils\\\\print.js:9\"));\n      _this.print_operations(res, res.detail);\n    });\n  },\n\n  //打印产品信息\n  print_goodDet: function print_goodDet(item) {\n    //console.log(item)\n    var orderInfo;\n    var good = uni.getStorageSync(\"now_product\");\n    good.objectId = item.good_id;\n    good.stocks = item;\n    good.productCode = item.productCode;\n\n    orderInfo = '<CB>商品信息</CB><BR>';\n    orderInfo += '--------------------------------<BR>';\n    orderInfo += '产品名称：　　 ' + good.goodsName + '<BR>';\n    if (good.stocks) orderInfo += '存放仓库：　　 ' + good.stocks.stock_name + '<BR>';\n\n    if (good.position) orderInfo += '货架位置：　　 ' + good.position + '<BR>';\n    if (good.producttime) orderInfo += '生产日期：　　 ' + good.producttime + '<BR>';\n    if (good.nousetime) orderInfo += '失效日期：　　 ' + good.nousetime + '<BR>';\n    orderInfo += '当前库存：　　 ' + good.reserve + '<BR>';\n    orderInfo += '产品规格:　　　' + good.packageContent + '*' + good.packingUnit + '<BR>';\n    orderInfo += '进货价格:      ' + good.costPrice + '<BR>';\n    orderInfo += '零售价格:      ' + good.retailPrice + '<BR>';\n    if (good.bad_num) orderInfo += '货损数量:      ' + good.bad_num + '<BR>';\n    orderInfo += '--------------------------------<BR>';\n    orderInfo += '产品二维码：<BR>';\n    orderInfo += '<QR>' + good.productCode + '</QR>'; //把二维码字符串用标签套上即可自动生成二维码\n\n    this.print_by_code(orderInfo);\n  },\n\n  //打印操作记录明细\n  print_operations: function print_operations(detail, products) {\n    console.log(__f__(detail, \" at utils\\\\print.js:45\"));\n\n    if (detail.type == 3) {\n      orderInfo = '<CB>盘点单</CB><BR>';\n      orderInfo += '--------------------------------<BR>';\n      for (var i = 0; i < products.length; i++) {\n        orderInfo += '产品名称：' + products[i].goodsName + '<BR>';\n        orderInfo += '盘点前库存：' + products[i].reserve + '<BR>';\n        orderInfo += '盘点后库存：' + products[i].now_reserve + '<BR>';\n        orderInfo += '--------------------------------<BR>';\n      }\n    } else if (detail.type == -2) {\n      orderInfo = '<CB>调拨单</CB><BR>';\n      orderInfo += '--------------------------------<BR>';\n      for (var _i = 0; _i < products.length; _i++) {\n        orderInfo += '产品名称：' + products[_i].goodsName + '<BR>';\n        orderInfo += '调拨数量：' + products[_i].num + '<BR>';\n        orderInfo += '--------------------------------<BR>';var _iteratorNormalCompletion = true;var _didIteratorError = false;var _iteratorError = undefined;try {\n          for (var _iterator = detail.detail[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {var item = _step.value;\n            orderInfo += '调出仓库：' + item.stock + '<BR>';\n            orderInfo += '<RIGHT>当前库存：' + (item.reserve - item.num) + '</RIGHT><BR>';\n            orderInfo += '调入仓库：' + item.out_stock + '<BR>';\n            orderInfo += '<RIGHT>当前库存：' + (item.out_reserve + item.num) + '</RIGHT><BR>';\n          }} catch (err) {_didIteratorError = true;_iteratorError = err;} finally {try {if (!_iteratorNormalCompletion && _iterator.return != null) {_iterator.return();}} finally {if (_didIteratorError) {throw _iteratorError;}}}\n      }\n      orderInfo += '--------------------------------<BR>';\n    } else if (detail.type == 2) {\n      orderInfo = '<CB>退货单</CB><BR>';\n      orderInfo += '--------------------------------<BR>';\n      for (var _i2 = 0; _i2 < products.length; _i2++) {\n        orderInfo += '产品名称：' + products[_i2].goodsName + '<BR>';\n        orderInfo += '零售价：' + products[_i2].retailPrice + '<BR>';\n        orderInfo += '数量    ：X' + products[_i2].num + '<BR>';\n        orderInfo += '<RIGHT>总计：' + products[_i2].total_money + '</RIGHT>';\n        orderInfo += '--------------------------------<BR>';\n        orderInfo += '退货明细：<BR>';\n        if (detail.custom != null) {\n          orderInfo += '客户姓名：' + detail.custom.custom_name + '<BR>';\n        } else {\n          orderInfo += '未记录客户 <BR>';\n        }\n      }\n      orderInfo += '<BOLD><RIGHT>全部总计：' + detail.all_money + '</RIGHT></BOLD>';\n      orderInfo += '--------------------------------<BR>';\n    } else {\n      var orderInfo;\n      if (detail.type == 1) {\n        orderInfo = '<CB>入库单</CB><BR>';\n      } else {\n        orderInfo = '<CB>出库单</CB><BR>';\n      }\n      orderInfo += '--------------------------------<BR>';\n      for (var _i3 = 0; _i3 < products.length; _i3++) {\n        orderInfo += '产品名称：' + products[_i3].goodsName + '<BR>';\n        orderInfo += '实际单价：' + products[_i3].retailPrice + '<BR>';\n        orderInfo += '数量    ：X' + products[_i3].num + '<BR>';\n        orderInfo += '<RIGHT>总计：' + products[_i3].total_money + '</RIGHT>';\n        orderInfo += '--------------------------------<BR>';\n      }\n      orderInfo += '<BOLD><RIGHT>全部总计：' + detail.all_money + '</RIGHT></BOLD>';\n      orderInfo += '--------------------------------<BR>';\n      if (detail.type == 1) {\n        orderInfo += '开单明细：<BR>';\n        orderInfo += '<BR>';\n        if (detail.producer != null) {\n          orderInfo += '供货商姓名：' + detail.producer.producer_name + '<BR>';\n        }\n        if (detail.real_money == null) {\n          orderInfo += '实际收款：未填写 <BR>';\n        } else {\n          orderInfo += '实际收款：' + detail.real_money + '<BR>';\n        }\n        if (detail.debt > 0) {\n          orderInfo += '本次欠款：' + detail.debt + '<BR>';\n        }\n        orderInfo += '--------------------------------<BR>';\n      }\n\n      if (detail.type == -1) {\n        orderInfo += '开单明细：<BR>';\n        orderInfo += '<BR>';\n        if (detail.custom) {\n          orderInfo += '客户姓名：' + detail.custom.custom_name + '<BR>';\n        }\n        if (detail.real_money) {\n          orderInfo += '实际收款：未填写 <BR>';\n        } else {\n          orderInfo += '实际收款：' + detail.real_money + '<BR>';\n        }\n\n        if (detail.debt > 0) {\n          orderInfo += '本次欠款  ：' + detail.debt + '<BR>';\n        }\n\n        orderInfo += '--------------------------------<BR>';\n      }\n    }\n\n    orderInfo += '操作者：' + detail.opreater.nickName + '<BR>';\n    orderInfo +=  true ? '备注：' + detail.beizhu + '<BR>' : undefined;\n    orderInfo += '操作时间：' + detail.createdAt + '<BR>';\n\n    this.print_by_code(orderInfo);\n  },\n\n  //打印商品信息\n  print_by_code: function print_by_code(orderInfo) {\n    //USER和UKEY在飞鹅云（ http://admin.feieyun.com/ ）管理后台的个人中心可以查看\n    var USER = uni.getStorageSync(\"setting\").USER; //必填，飞鹅云 http://admin.feieyun.com/ 管理后台注册的账号名\n    var UKEY = uni.getStorageSync(\"setting\").UKEY; //必填，这个不是填打印机的key，是在飞鹅云后台注册账号后生成的UKEY\n\n    var SN = uni.getStorageSync(\"setting\").number; //必填，打印机编号,打印机必须要在管理后台先添加\n\n    //以下URL参数不需要修改\n    var HOST = \"api.feieyun.cn\"; //域名\n    var PATH = \"/Api/Open/\"; //接口路径\n    var STIME = new Date().getTime(); //请求时间,当前时间的秒数\n    var SIG = hex_sha1(USER + UKEY + STIME); //获取签名\n\n    //标签说明：\n    //单标签:\n    //\"<BR>\"为换行,\"<CUT>\"为切刀指令(主动切纸,仅限切刀打印机使用才有效果)\n    //\"<LOGO>\"为打印LOGO指令(前提是预先在机器内置LOGO图片),\"<PLUGIN>\"为钱箱或者外置音响指令\n    //成对标签：\n    //\"<CB></CB>\"为居中放大一倍,\"<B></B>\"为放大一倍,\"<C></C>\"为居中,<L></L>字体变高一倍\n    //<W></W>字体变宽一倍,\"<QR></QR>\"为二维码,\"<BOLD></BOLD>\"为字体加粗,\"<RIGHT></RIGHT>\"为右对齐\n    //拼凑订单内容时可参考如下格式\n    //根据打印纸张的宽度，自行调整内容的格式，可参考下面的样例格式\n\n\n\n    //***接口返回值说明***\n    //正确例子：{\"msg\":\"ok\",\"ret\":0,\"data\":\"123456789_20160823165104_1853029628\",\"serverExecutedTime\":6}\n    //错误：{\"msg\":\"错误信息.\",\"ret\":非零错误码,\"data\":null,\"serverExecutedTime\":5}\n    // console.log(orderInfo);\n    //打开注释可测试\n    print_r(SN, orderInfo, 1);\n\n    var hexcase = 0;\n    var chrsz = 8;\n\n    function hex_sha1(s) {\n      return binb2hex(core_sha1(AlignSHA1(s)));\n    }\n\n    function core_sha1(blockArray) {\n      var x = blockArray;\n      var w = Array(80);\n      var a = 1732584193;\n      var b = -271733879;\n      var c = -1732584194;\n      var d = 271733878;\n      var e = -1009589776;\n      for (var i = 0; i < x.length; i += 16) {\n        var olda = a;\n        var oldb = b;\n        var oldc = c;\n        var oldd = d;\n        var olde = e;\n        for (var j = 0; j < 80; j++) {\n          if (j < 16)\n          w[j] = x[i + j];else\n\n          w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n          var t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)), safe_add(safe_add(e, w[j]), sha1_kt(j)));\n          e = d;\n          d = c;\n          c = rol(b, 30);\n          b = a;\n          a = t;\n        }\n        a = safe_add(a, olda);\n        b = safe_add(b, oldb);\n        c = safe_add(c, oldc);\n        d = safe_add(d, oldd);\n        e = safe_add(e, olde);\n      }\n      return new Array(a, b, c, d, e);\n    }\n\n    function sha1_ft(t, b, c, d) {\n      if (t < 20)\n      return b & c | ~b & d;\n      if (t < 40)\n      return b ^ c ^ d;\n      if (t < 60)\n      return b & c | b & d | c & d;\n      return b ^ c ^ d;\n    }\n\n    function sha1_kt(t) {\n      return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\n    }\n\n    function safe_add(x, y) {\n      var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n      var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n      return msw << 16 | lsw & 0xFFFF;\n    }\n\n    function rol(num, cnt) {\n      return num << cnt | num >>> 32 - cnt;\n    }\n\n    function AlignSHA1(str) {\n      var nblk = (str.length + 8 >> 6) + 1,\n      blks = new Array(nblk * 16);\n      for (var i = 0; i < nblk * 16; i++) {\n        blks[i] = 0;}\n      for (i = 0; i < str.length; i++) {\n        blks[i >> 2] |= str.charCodeAt(i) << 24 - (i & 3) * 8;}\n      blks[i >> 2] |= 0x80 << 24 - (i & 3) * 8;\n      blks[nblk * 16 - 1] = str.length * 8;\n      return blks;\n    }\n\n    function binb2hex(binarray) {\n      var hex_tab = hexcase ? \"0123456789ABCDEF\" : \"0123456789abcdef\";\n      var str = \"\";\n      for (var i = 0; i < binarray.length * 4; i++) {\n        str += hex_tab.charAt(binarray[i >> 2] >> (3 - i % 4) * 8 + 4 & 0xF) +\n        hex_tab.charAt(binarray[i >> 2] >> (3 - i % 4) * 8 & 0xF);\n      }\n      return str;\n    }\n\n    /*\r\n       *  打印订单方法：Open_printMsg\r\n       */\n    function print_r(SN, orderInfo, TIMES) {\n      uni.request({\n        url: 'https://' + HOST + PATH,\n        data: {\n          user: USER, //账号\n          stime: STIME, //当前时间的秒数，请求时间\n          sig: SIG, //签名\n\n          apiname: \"Open_printMsg\", //不需要修改\n          sn: SN, //打印机编号\n          content: orderInfo, //打印内容\n          times: TIMES //打印联数,默认为1\n        },\n        method: \"POST\",\n        header: {\n          \"content-type\": \"application/x-www-form-urlencoded\" },\n\n        success: function success(res) {\n          console.log(__f__(res.data, \" at utils\\\\print.js:292\"));\n          if (res.data.ret != 0) {\n            uni.showToast({\n              icon: \"none\",\n              title: res.data.msg });\n\n          } else {\n            uni.showToast({\n              icon: \"none\",\n              title: \"打印成功\" });\n\n          }\n        } });\n\n    }\n  } };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///89\n");

/***/ }),

/***/ 9:
/*!**************************************************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/node_modules/vue-i18n/dist/vue-i18n.esm.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; /*!\n                                                                                                      * vue-i18n v8.11.2 \n                                                                                                      * (c) 2019 kazuya kawaguchi\n                                                                                                      * Released under the MIT License.\n                                                                                                      */\n/*  */\n\n/**\n        * constants\n        */\n\nvar numberFormatKeys = [\n'style',\n'currency',\n'currencyDisplay',\n'useGrouping',\n'minimumIntegerDigits',\n'minimumFractionDigits',\n'maximumFractionDigits',\n'minimumSignificantDigits',\n'maximumSignificantDigits',\n'localeMatcher',\n'formatMatcher'];\n\n\n/**\n                   * utilities\n                   */\n\nfunction warn(msg, err) {\n  if (typeof console !== 'undefined') {\n    console.warn(__f__('[vue-i18n] ' + msg, \" at node_modules\\\\vue-i18n\\\\dist\\\\vue-i18n.esm.js:32\"));\n    /* istanbul ignore if */\n    if (err) {\n      console.warn(__f__(err.stack, \" at node_modules\\\\vue-i18n\\\\dist\\\\vue-i18n.esm.js:35\"));\n    }\n  }\n}\n\nfunction error(msg, err) {\n  if (typeof console !== 'undefined') {\n    console.error(__f__('[vue-i18n] ' + msg, \" at node_modules\\\\vue-i18n\\\\dist\\\\vue-i18n.esm.js:42\"));\n    /* istanbul ignore if */\n    if (err) {\n      console.error(__f__(err.stack, \" at node_modules\\\\vue-i18n\\\\dist\\\\vue-i18n.esm.js:45\"));\n    }\n  }\n}\n\nfunction isObject(obj) {\n  return obj !== null && typeof obj === 'object';\n}\n\nvar toString = Object.prototype.toString;\nvar OBJECT_STRING = '[object Object]';\nfunction isPlainObject(obj) {\n  return toString.call(obj) === OBJECT_STRING;\n}\n\nfunction isNull(val) {\n  return val === null || val === undefined;\n}\n\nfunction parseArgs() {\n  var args = [],len = arguments.length;\n  while (len--) {args[len] = arguments[len];}\n\n  var locale = null;\n  var params = null;\n  if (args.length === 1) {\n    if (isObject(args[0]) || Array.isArray(args[0])) {\n      params = args[0];\n    } else if (typeof args[0] === 'string') {\n      locale = args[0];\n    }\n  } else if (args.length === 2) {\n    if (typeof args[0] === 'string') {\n      locale = args[0];\n    }\n    /* istanbul ignore if */\n    if (isObject(args[1]) || Array.isArray(args[1])) {\n      params = args[1];\n    }\n  }\n\n  return { locale: locale, params: params };\n}\n\nfunction looseClone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n\nfunction remove(arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1);\n    }\n  }\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\n\nfunction merge(target) {\n  var arguments$1 = arguments;\n\n  var output = Object(target);\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments$1[i];\n    if (source !== undefined && source !== null) {\n      var key = void 0;\n      for (key in source) {\n        if (hasOwn(source, key)) {\n          if (isObject(source[key])) {\n            output[key] = merge(output[key], source[key]);\n          } else {\n            output[key] = source[key];\n          }\n        }\n      }\n    }\n  }\n  return output;\n}\n\nfunction looseEqual(a, b) {\n  if (a === b) {return true;}\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i]);\n        });\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key]);\n        });\n      } else {\n        /* istanbul ignore next */\n        return false;\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false;\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b);\n  } else {\n    return false;\n  }\n}\n\n/*  */\n\nfunction extend(Vue) {\n  if (!Vue.prototype.hasOwnProperty('$i18n')) {\n    // $FlowFixMe\n    Object.defineProperty(Vue.prototype, '$i18n', {\n      get: function get() {return this._i18n;} });\n\n  }\n\n  Vue.prototype.$t = function (key) {\n    var values = [],len = arguments.length - 1;\n    while (len-- > 0) {values[len] = arguments[len + 1];}\n\n    var i18n = this.$i18n;\n    return i18n._t.apply(i18n, [key, i18n.locale, i18n._getMessages(), this].concat(values));\n  };\n\n  Vue.prototype.$tc = function (key, choice) {\n    var values = [],len = arguments.length - 2;\n    while (len-- > 0) {values[len] = arguments[len + 2];}\n\n    var i18n = this.$i18n;\n    return i18n._tc.apply(i18n, [key, i18n.locale, i18n._getMessages(), this, choice].concat(values));\n  };\n\n  Vue.prototype.$te = function (key, locale) {\n    var i18n = this.$i18n;\n    return i18n._te(key, i18n.locale, i18n._getMessages(), locale);\n  };\n\n  Vue.prototype.$d = function (value) {\n    var ref;\n\n    var args = [],len = arguments.length - 1;\n    while (len-- > 0) {args[len] = arguments[len + 1];}\n    return (ref = this.$i18n).d.apply(ref, [value].concat(args));\n  };\n\n  Vue.prototype.$n = function (value) {\n    var ref;\n\n    var args = [],len = arguments.length - 1;\n    while (len-- > 0) {args[len] = arguments[len + 1];}\n    return (ref = this.$i18n).n.apply(ref, [value].concat(args));\n  };\n}\n\n/*  */\n\nvar mixin = {\n  beforeCreate: function beforeCreate() {\n    var options = this.$options;\n    options.i18n = options.i18n || (options.__i18n ? {} : null);\n\n    if (options.i18n) {\n      if (options.i18n instanceof VueI18n) {\n        // init locale messages via custom blocks\n        if (options.__i18n) {\n          try {\n            var localeMessages = {};\n            options.__i18n.forEach(function (resource) {\n              localeMessages = merge(localeMessages, JSON.parse(resource));\n            });\n            Object.keys(localeMessages).forEach(function (locale) {\n              options.i18n.mergeLocaleMessage(locale, localeMessages[locale]);\n            });\n          } catch (e) {\n            if (true) {\n              warn(\"Cannot parse locale messages via custom blocks.\", e);\n            }\n          }\n        }\n        this._i18n = options.i18n;\n        this._i18nWatcher = this._i18n.watchI18nData();\n      } else if (isPlainObject(options.i18n)) {\n        // component local i18n\n        if (this.$root && this.$root.$i18n && this.$root.$i18n instanceof VueI18n) {\n          options.i18n.root = this.$root;\n          options.i18n.formatter = this.$root.$i18n.formatter;\n          options.i18n.fallbackLocale = this.$root.$i18n.fallbackLocale;\n          options.i18n.silentTranslationWarn = this.$root.$i18n.silentTranslationWarn;\n          options.i18n.silentFallbackWarn = this.$root.$i18n.silentFallbackWarn;\n          options.i18n.pluralizationRules = this.$root.$i18n.pluralizationRules;\n          options.i18n.preserveDirectiveContent = this.$root.$i18n.preserveDirectiveContent;\n        }\n\n        // init locale messages via custom blocks\n        if (options.__i18n) {\n          try {\n            var localeMessages$1 = {};\n            options.__i18n.forEach(function (resource) {\n              localeMessages$1 = merge(localeMessages$1, JSON.parse(resource));\n            });\n            options.i18n.messages = localeMessages$1;\n          } catch (e) {\n            if (true) {\n              warn(\"Cannot parse locale messages via custom blocks.\", e);\n            }\n          }\n        }\n\n        this._i18n = new VueI18n(options.i18n);\n        this._i18nWatcher = this._i18n.watchI18nData();\n\n        if (options.i18n.sync === undefined || !!options.i18n.sync) {\n          this._localeWatcher = this.$i18n.watchLocale();\n        }\n      } else {\n        if (true) {\n          warn(\"Cannot be interpreted 'i18n' option.\");\n        }\n      }\n    } else if (this.$root && this.$root.$i18n && this.$root.$i18n instanceof VueI18n) {\n      // root i18n\n      this._i18n = this.$root.$i18n;\n    } else if (options.parent && options.parent.$i18n && options.parent.$i18n instanceof VueI18n) {\n      // parent i18n\n      this._i18n = options.parent.$i18n;\n    }\n  },\n\n  beforeMount: function beforeMount() {\n    var options = this.$options;\n    options.i18n = options.i18n || (options.__i18n ? {} : null);\n\n    if (options.i18n) {\n      if (options.i18n instanceof VueI18n) {\n        // init locale messages via custom blocks\n        this._i18n.subscribeDataChanging(this);\n        this._subscribing = true;\n      } else if (isPlainObject(options.i18n)) {\n        this._i18n.subscribeDataChanging(this);\n        this._subscribing = true;\n      } else {\n        if (true) {\n          warn(\"Cannot be interpreted 'i18n' option.\");\n        }\n      }\n    } else if (this.$root && this.$root.$i18n && this.$root.$i18n instanceof VueI18n) {\n      this._i18n.subscribeDataChanging(this);\n      this._subscribing = true;\n    } else if (options.parent && options.parent.$i18n && options.parent.$i18n instanceof VueI18n) {\n      this._i18n.subscribeDataChanging(this);\n      this._subscribing = true;\n    }\n  },\n\n  beforeDestroy: function beforeDestroy() {\n    if (!this._i18n) {return;}\n\n    var self = this;\n    this.$nextTick(function () {\n      if (self._subscribing) {\n        self._i18n.unsubscribeDataChanging(self);\n        delete self._subscribing;\n      }\n\n      if (self._i18nWatcher) {\n        self._i18nWatcher();\n        self._i18n.destroyVM();\n        delete self._i18nWatcher;\n      }\n\n      if (self._localeWatcher) {\n        self._localeWatcher();\n        delete self._localeWatcher;\n      }\n\n      self._i18n = null;\n    });\n  } };\n\n\n/*  */\n\nvar interpolationComponent = {\n  name: 'i18n',\n  functional: true,\n  props: {\n    tag: {\n      type: String,\n      default: 'span' },\n\n    path: {\n      type: String,\n      required: true },\n\n    locale: {\n      type: String },\n\n    places: {\n      type: [Array, Object] } },\n\n\n  render: function render(h, ref) {\n    var props = ref.props;\n    var data = ref.data;\n    var children = ref.children;\n    var parent = ref.parent;\n\n    var i18n = parent.$i18n;\n\n    children = (children || []).filter(function (child) {\n      return child.tag || (child.text = child.text.trim());\n    });\n\n    if (!i18n) {\n      if (true) {\n        warn('Cannot find VueI18n instance!');\n      }\n      return children;\n    }\n\n    var path = props.path;\n    var locale = props.locale;\n\n    var params = {};\n    var places = props.places || {};\n\n    var hasPlaces = Array.isArray(places) ?\n    places.length > 0 :\n    Object.keys(places).length > 0;\n\n    var everyPlace = children.every(function (child) {\n      if (child.data && child.data.attrs) {\n        var place = child.data.attrs.place;\n        return typeof place !== 'undefined' && place !== '';\n      }\n    });\n\n    if ( true && hasPlaces && children.length > 0 && !everyPlace) {\n      warn('If places prop is set, all child elements must have place prop set.');\n    }\n\n    if (Array.isArray(places)) {\n      places.forEach(function (el, i) {\n        params[i] = el;\n      });\n    } else {\n      Object.keys(places).forEach(function (key) {\n        params[key] = places[key];\n      });\n    }\n\n    children.forEach(function (child, i) {\n      var key = everyPlace ?\n      \"\" + child.data.attrs.place :\n      \"\" + i;\n      params[key] = child;\n    });\n\n    return h(props.tag, data, i18n.i(path, locale, params));\n  } };\n\n\n/*  */\n\nvar numberComponent = {\n  name: 'i18n-n',\n  functional: true,\n  props: {\n    tag: {\n      type: String,\n      default: 'span' },\n\n    value: {\n      type: Number,\n      required: true },\n\n    format: {\n      type: [String, Object] },\n\n    locale: {\n      type: String } },\n\n\n  render: function render(h, ref) {\n    var props = ref.props;\n    var parent = ref.parent;\n    var data = ref.data;\n\n    var i18n = parent.$i18n;\n\n    if (!i18n) {\n      if (true) {\n        warn('Cannot find VueI18n instance!');\n      }\n      return null;\n    }\n\n    var key = null;\n    var options = null;\n\n    if (typeof props.format === 'string') {\n      key = props.format;\n    } else if (isObject(props.format)) {\n      if (props.format.key) {\n        key = props.format.key;\n      }\n\n      // Filter out number format options only\n      options = Object.keys(props.format).reduce(function (acc, prop) {\n        var obj;\n\n        if (numberFormatKeys.includes(prop)) {\n          return Object.assign({}, acc, (obj = {}, obj[prop] = props.format[prop], obj));\n        }\n        return acc;\n      }, null);\n    }\n\n    var locale = props.locale || i18n.locale;\n    var parts = i18n._ntp(props.value, locale, key, options);\n\n    var values = parts.map(function (part, index) {\n      var obj;\n\n      var slot = data.scopedSlots && data.scopedSlots[part.type];\n      return slot ? slot((obj = {}, obj[part.type] = part.value, obj.index = index, obj.parts = parts, obj)) : part.value;\n    });\n\n    return h(props.tag, {\n      attrs: data.attrs,\n      'class': data['class'],\n      staticClass: data.staticClass },\n    values);\n  } };\n\n\n/*  */\n\nfunction bind(el, binding, vnode) {\n  if (!assert(el, vnode)) {return;}\n\n  t(el, binding, vnode);\n}\n\nfunction update(el, binding, vnode, oldVNode) {\n  if (!assert(el, vnode)) {return;}\n\n  var i18n = vnode.context.$i18n;\n  if (localeEqual(el, vnode) &&\n  looseEqual(binding.value, binding.oldValue) &&\n  looseEqual(el._localeMessage, i18n.getLocaleMessage(i18n.locale))) {return;}\n\n  t(el, binding, vnode);\n}\n\nfunction unbind(el, binding, vnode, oldVNode) {\n  var vm = vnode.context;\n  if (!vm) {\n    warn('Vue instance does not exists in VNode context');\n    return;\n  }\n\n  var i18n = vnode.context.$i18n || {};\n  if (!binding.modifiers.preserve && !i18n.preserveDirectiveContent) {\n    el.textContent = '';\n  }\n  el._vt = undefined;\n  delete el['_vt'];\n  el._locale = undefined;\n  delete el['_locale'];\n  el._localeMessage = undefined;\n  delete el['_localeMessage'];\n}\n\nfunction assert(el, vnode) {\n  var vm = vnode.context;\n  if (!vm) {\n    warn('Vue instance does not exists in VNode context');\n    return false;\n  }\n\n  if (!vm.$i18n) {\n    warn('VueI18n instance does not exists in Vue instance');\n    return false;\n  }\n\n  return true;\n}\n\nfunction localeEqual(el, vnode) {\n  var vm = vnode.context;\n  return el._locale === vm.$i18n.locale;\n}\n\nfunction t(el, binding, vnode) {\n  var ref$1, ref$2;\n\n  var value = binding.value;\n\n  var ref = parseValue(value);\n  var path = ref.path;\n  var locale = ref.locale;\n  var args = ref.args;\n  var choice = ref.choice;\n  if (!path && !locale && !args) {\n    warn('value type not supported');\n    return;\n  }\n\n  if (!path) {\n    warn('`path` is required in v-t directive');\n    return;\n  }\n\n  var vm = vnode.context;\n  if (choice) {\n    el._vt = el.textContent = (ref$1 = vm.$i18n).tc.apply(ref$1, [path, choice].concat(makeParams(locale, args)));\n  } else {\n    el._vt = el.textContent = (ref$2 = vm.$i18n).t.apply(ref$2, [path].concat(makeParams(locale, args)));\n  }\n  el._locale = vm.$i18n.locale;\n  el._localeMessage = vm.$i18n.getLocaleMessage(vm.$i18n.locale);\n}\n\nfunction parseValue(value) {\n  var path;\n  var locale;\n  var args;\n  var choice;\n\n  if (typeof value === 'string') {\n    path = value;\n  } else if (isPlainObject(value)) {\n    path = value.path;\n    locale = value.locale;\n    args = value.args;\n    choice = value.choice;\n  }\n\n  return { path: path, locale: locale, args: args, choice: choice };\n}\n\nfunction makeParams(locale, args) {\n  var params = [];\n\n  locale && params.push(locale);\n  if (args && (Array.isArray(args) || isPlainObject(args))) {\n    params.push(args);\n  }\n\n  return params;\n}\n\nvar Vue;\n\nfunction install(_Vue) {\n  /* istanbul ignore if */\n  if ( true && install.installed && _Vue === Vue) {\n    warn('already installed.');\n    return;\n  }\n  install.installed = true;\n\n  Vue = _Vue;\n\n  var version = Vue.version && Number(Vue.version.split('.')[0]) || -1;\n  /* istanbul ignore if */\n  if ( true && version < 2) {\n    warn(\"vue-i18n (\" + install.version + \") need to use Vue 2.0 or later (Vue: \" + Vue.version + \").\");\n    return;\n  }\n\n  extend(Vue);\n  Vue.mixin(mixin);\n  Vue.directive('t', { bind: bind, update: update, unbind: unbind });\n  Vue.component(interpolationComponent.name, interpolationComponent);\n  Vue.component(numberComponent.name, numberComponent);\n\n  // use simple mergeStrategies to prevent i18n instance lose '__proto__'\n  var strats = Vue.config.optionMergeStrategies;\n  strats.i18n = function (parentVal, childVal) {\n    return childVal === undefined ?\n    parentVal :\n    childVal;\n  };\n}\n\n/*  */\n\nvar BaseFormatter = function BaseFormatter() {\n  this._caches = Object.create(null);\n};\n\nBaseFormatter.prototype.interpolate = function interpolate(message, values) {\n  if (!values) {\n    return [message];\n  }\n  var tokens = this._caches[message];\n  if (!tokens) {\n    tokens = parse(message);\n    this._caches[message] = tokens;\n  }\n  return compile(tokens, values);\n};\n\n\n\nvar RE_TOKEN_LIST_VALUE = /^(?:\\d)+/;\nvar RE_TOKEN_NAMED_VALUE = /^(?:\\w)+/;\n\nfunction parse(format) {\n  var tokens = [];\n  var position = 0;\n\n  var text = '';\n  while (position < format.length) {\n    var char = format[position++];\n    if (char === '{') {\n      if (text) {\n        tokens.push({ type: 'text', value: text });\n      }\n\n      text = '';\n      var sub = '';\n      char = format[position++];\n      while (char !== undefined && char !== '}') {\n        sub += char;\n        char = format[position++];\n      }\n      var isClosed = char === '}';\n\n      var type = RE_TOKEN_LIST_VALUE.test(sub) ?\n      'list' :\n      isClosed && RE_TOKEN_NAMED_VALUE.test(sub) ?\n      'named' :\n      'unknown';\n      tokens.push({ value: sub, type: type });\n    } else if (char === '%') {\n      // when found rails i18n syntax, skip text capture\n      if (format[position] !== '{') {\n        text += char;\n      }\n    } else {\n      text += char;\n    }\n  }\n\n  text && tokens.push({ type: 'text', value: text });\n\n  return tokens;\n}\n\nfunction compile(tokens, values) {\n  var compiled = [];\n  var index = 0;\n\n  var mode = Array.isArray(values) ?\n  'list' :\n  isObject(values) ?\n  'named' :\n  'unknown';\n  if (mode === 'unknown') {return compiled;}\n\n  while (index < tokens.length) {\n    var token = tokens[index];\n    switch (token.type) {\n      case 'text':\n        compiled.push(token.value);\n        break;\n      case 'list':\n        compiled.push(values[parseInt(token.value, 10)]);\n        break;\n      case 'named':\n        if (mode === 'named') {\n          compiled.push(values[token.value]);\n        } else {\n          if (true) {\n            warn(\"Type of token '\" + token.type + \"' and format of value '\" + mode + \"' don't match!\");\n          }\n        }\n        break;\n      case 'unknown':\n        if (true) {\n          warn(\"Detect 'unknown' type of token!\");\n        }\n        break;}\n\n    index++;\n  }\n\n  return compiled;\n}\n\n/*  */\n\n/**\n        *  Path parser\n        *  - Inspired:\n        *    Vue.js Path parser\n        */\n\n// actions\nvar APPEND = 0;\nvar PUSH = 1;\nvar INC_SUB_PATH_DEPTH = 2;\nvar PUSH_SUB_PATH = 3;\n\n// states\nvar BEFORE_PATH = 0;\nvar IN_PATH = 1;\nvar BEFORE_IDENT = 2;\nvar IN_IDENT = 3;\nvar IN_SUB_PATH = 4;\nvar IN_SINGLE_QUOTE = 5;\nvar IN_DOUBLE_QUOTE = 6;\nvar AFTER_PATH = 7;\nvar ERROR = 8;\n\nvar pathStateMachine = [];\n\npathStateMachine[BEFORE_PATH] = {\n  'ws': [BEFORE_PATH],\n  'ident': [IN_IDENT, APPEND],\n  '[': [IN_SUB_PATH],\n  'eof': [AFTER_PATH] };\n\n\npathStateMachine[IN_PATH] = {\n  'ws': [IN_PATH],\n  '.': [BEFORE_IDENT],\n  '[': [IN_SUB_PATH],\n  'eof': [AFTER_PATH] };\n\n\npathStateMachine[BEFORE_IDENT] = {\n  'ws': [BEFORE_IDENT],\n  'ident': [IN_IDENT, APPEND],\n  '0': [IN_IDENT, APPEND],\n  'number': [IN_IDENT, APPEND] };\n\n\npathStateMachine[IN_IDENT] = {\n  'ident': [IN_IDENT, APPEND],\n  '0': [IN_IDENT, APPEND],\n  'number': [IN_IDENT, APPEND],\n  'ws': [IN_PATH, PUSH],\n  '.': [BEFORE_IDENT, PUSH],\n  '[': [IN_SUB_PATH, PUSH],\n  'eof': [AFTER_PATH, PUSH] };\n\n\npathStateMachine[IN_SUB_PATH] = {\n  \"'\": [IN_SINGLE_QUOTE, APPEND],\n  '\"': [IN_DOUBLE_QUOTE, APPEND],\n  '[': [IN_SUB_PATH, INC_SUB_PATH_DEPTH],\n  ']': [IN_PATH, PUSH_SUB_PATH],\n  'eof': ERROR,\n  'else': [IN_SUB_PATH, APPEND] };\n\n\npathStateMachine[IN_SINGLE_QUOTE] = {\n  \"'\": [IN_SUB_PATH, APPEND],\n  'eof': ERROR,\n  'else': [IN_SINGLE_QUOTE, APPEND] };\n\n\npathStateMachine[IN_DOUBLE_QUOTE] = {\n  '\"': [IN_SUB_PATH, APPEND],\n  'eof': ERROR,\n  'else': [IN_DOUBLE_QUOTE, APPEND] };\n\n\n/**\n                                        * Check if an expression is a literal value.\n                                        */\n\nvar literalValueRE = /^\\s?(?:true|false|-?[\\d.]+|'[^']*'|\"[^\"]*\")\\s?$/;\nfunction isLiteral(exp) {\n  return literalValueRE.test(exp);\n}\n\n/**\n   * Strip quotes from a string\n   */\n\nfunction stripQuotes(str) {\n  var a = str.charCodeAt(0);\n  var b = str.charCodeAt(str.length - 1);\n  return a === b && (a === 0x22 || a === 0x27) ?\n  str.slice(1, -1) :\n  str;\n}\n\n/**\n   * Determine the type of a character in a keypath.\n   */\n\nfunction getPathCharType(ch) {\n  if (ch === undefined || ch === null) {return 'eof';}\n\n  var code = ch.charCodeAt(0);\n\n  switch (code) {\n    case 0x5B: // [\n    case 0x5D: // ]\n    case 0x2E: // .\n    case 0x22: // \"\n    case 0x27: // '\n      return ch;\n\n    case 0x5F: // _\n    case 0x24: // $\n    case 0x2D: // -\n      return 'ident';\n\n    case 0x09: // Tab\n    case 0x0A: // Newline\n    case 0x0D: // Return\n    case 0xA0: // No-break space\n    case 0xFEFF: // Byte Order Mark\n    case 0x2028: // Line Separator\n    case 0x2029: // Paragraph Separator\n      return 'ws';}\n\n\n  return 'ident';\n}\n\n/**\n   * Format a subPath, return its plain form if it is\n   * a literal string or number. Otherwise prepend the\n   * dynamic indicator (*).\n   */\n\nfunction formatSubPath(path) {\n  var trimmed = path.trim();\n  // invalid leading 0\n  if (path.charAt(0) === '0' && isNaN(path)) {return false;}\n\n  return isLiteral(trimmed) ? stripQuotes(trimmed) : '*' + trimmed;\n}\n\n/**\n   * Parse a string path into an array of segments\n   */\n\nfunction parse$1(path) {\n  var keys = [];\n  var index = -1;\n  var mode = BEFORE_PATH;\n  var subPathDepth = 0;\n  var c;\n  var key;\n  var newChar;\n  var type;\n  var transition;\n  var action;\n  var typeMap;\n  var actions = [];\n\n  actions[PUSH] = function () {\n    if (key !== undefined) {\n      keys.push(key);\n      key = undefined;\n    }\n  };\n\n  actions[APPEND] = function () {\n    if (key === undefined) {\n      key = newChar;\n    } else {\n      key += newChar;\n    }\n  };\n\n  actions[INC_SUB_PATH_DEPTH] = function () {\n    actions[APPEND]();\n    subPathDepth++;\n  };\n\n  actions[PUSH_SUB_PATH] = function () {\n    if (subPathDepth > 0) {\n      subPathDepth--;\n      mode = IN_SUB_PATH;\n      actions[APPEND]();\n    } else {\n      subPathDepth = 0;\n      key = formatSubPath(key);\n      if (key === false) {\n        return false;\n      } else {\n        actions[PUSH]();\n      }\n    }\n  };\n\n  function maybeUnescapeQuote() {\n    var nextChar = path[index + 1];\n    if (mode === IN_SINGLE_QUOTE && nextChar === \"'\" ||\n    mode === IN_DOUBLE_QUOTE && nextChar === '\"') {\n      index++;\n      newChar = '\\\\' + nextChar;\n      actions[APPEND]();\n      return true;\n    }\n  }\n\n  while (mode !== null) {\n    index++;\n    c = path[index];\n\n    if (c === '\\\\' && maybeUnescapeQuote()) {\n      continue;\n    }\n\n    type = getPathCharType(c);\n    typeMap = pathStateMachine[mode];\n    transition = typeMap[type] || typeMap['else'] || ERROR;\n\n    if (transition === ERROR) {\n      return; // parse error\n    }\n\n    mode = transition[0];\n    action = actions[transition[1]];\n    if (action) {\n      newChar = transition[2];\n      newChar = newChar === undefined ?\n      c :\n      newChar;\n      if (action() === false) {\n        return;\n      }\n    }\n\n    if (mode === AFTER_PATH) {\n      return keys;\n    }\n  }\n}\n\n\n\n\n\nvar I18nPath = function I18nPath() {\n  this._cache = Object.create(null);\n};\n\n/**\n    * External parse that check for a cache hit first\n    */\nI18nPath.prototype.parsePath = function parsePath(path) {\n  var hit = this._cache[path];\n  if (!hit) {\n    hit = parse$1(path);\n    if (hit) {\n      this._cache[path] = hit;\n    }\n  }\n  return hit || [];\n};\n\n/**\n    * Get path value from path string\n    */\nI18nPath.prototype.getPathValue = function getPathValue(obj, path) {\n  if (!isObject(obj)) {return null;}\n\n  var paths = this.parsePath(path);\n  if (paths.length === 0) {\n    return null;\n  } else {\n    var length = paths.length;\n    var last = obj;\n    var i = 0;\n    while (i < length) {\n      var value = last[paths[i]];\n      if (value === undefined) {\n        return null;\n      }\n      last = value;\n      i++;\n    }\n\n    return last;\n  }\n};\n\n/*  */\n\n\n\nvar htmlTagMatcher = /<\\/?[\\w\\s=\"/.':;#-\\/]+>/;\nvar linkKeyMatcher = /(?:@(?:\\.[a-z]+)?:(?:[\\w\\-_|.]+|\\([\\w\\-_|.]+\\)))/g;\nvar linkKeyPrefixMatcher = /^@(?:\\.([a-z]+))?:/;\nvar bracketsMatcher = /[()]/g;\nvar formatters = {\n  'upper': function upper(str) {return str.toLocaleUpperCase();},\n  'lower': function lower(str) {return str.toLocaleLowerCase();} };\n\n\nvar defaultFormatter = new BaseFormatter();\n\nvar VueI18n = function VueI18n(options) {\n  var this$1 = this;\n  if (options === void 0) options = {};\n\n  // Auto install if it is not done yet and `window` has `Vue`.\n  // To allow users to avoid auto-installation in some cases,\n  // this code should be placed here. See #290\n  /* istanbul ignore if */\n  if (!Vue && typeof window !== 'undefined' && window.Vue) {\n    install(window.Vue);\n  }\n\n  var locale = options.locale || 'en-US';\n  var fallbackLocale = options.fallbackLocale || 'en-US';\n  var messages = options.messages || {};\n  var dateTimeFormats = options.dateTimeFormats || {};\n  var numberFormats = options.numberFormats || {};\n\n  this._vm = null;\n  this._formatter = options.formatter || defaultFormatter;\n  this._missing = options.missing || null;\n  this._root = options.root || null;\n  this._sync = options.sync === undefined ? true : !!options.sync;\n  this._fallbackRoot = options.fallbackRoot === undefined ?\n  true :\n  !!options.fallbackRoot;\n  this._silentTranslationWarn = options.silentTranslationWarn === undefined ?\n  false :\n  !!options.silentTranslationWarn;\n  this._silentFallbackWarn = options.silentFallbackWarn === undefined ?\n  false :\n  !!options.silentFallbackWarn;\n  this._dateTimeFormatters = {};\n  this._numberFormatters = {};\n  this._path = new I18nPath();\n  this._dataListeners = [];\n  this._preserveDirectiveContent = options.preserveDirectiveContent === undefined ?\n  false :\n  !!options.preserveDirectiveContent;\n  this.pluralizationRules = options.pluralizationRules || {};\n  this._warnHtmlInMessage = options.warnHtmlInMessage || 'off';\n\n  this._exist = function (message, key) {\n    if (!message || !key) {return false;}\n    if (!isNull(this$1._path.getPathValue(message, key))) {return true;}\n    // fallback for flat key\n    if (message[key]) {return true;}\n    return false;\n  };\n\n  if (this._warnHtmlInMessage === 'warn' || this._warnHtmlInMessage === 'error') {\n    Object.keys(messages).forEach(function (locale) {\n      this$1._checkLocaleMessage(locale, this$1._warnHtmlInMessage, messages[locale]);\n    });\n  }\n\n  this._initVM({\n    locale: locale,\n    fallbackLocale: fallbackLocale,\n    messages: messages,\n    dateTimeFormats: dateTimeFormats,\n    numberFormats: numberFormats });\n\n};\n\nvar prototypeAccessors = { vm: { configurable: true }, messages: { configurable: true }, dateTimeFormats: { configurable: true }, numberFormats: { configurable: true }, availableLocales: { configurable: true }, locale: { configurable: true }, fallbackLocale: { configurable: true }, missing: { configurable: true }, formatter: { configurable: true }, silentTranslationWarn: { configurable: true }, silentFallbackWarn: { configurable: true }, preserveDirectiveContent: { configurable: true }, warnHtmlInMessage: { configurable: true } };\n\nVueI18n.prototype._checkLocaleMessage = function _checkLocaleMessage(locale, level, message) {\n  var paths = [];\n\n  var fn = function fn(level, locale, message, paths) {\n    if (isPlainObject(message)) {\n      Object.keys(message).forEach(function (key) {\n        var val = message[key];\n        if (isPlainObject(val)) {\n          paths.push(key);\n          paths.push('.');\n          fn(level, locale, val, paths);\n          paths.pop();\n          paths.pop();\n        } else {\n          paths.push(key);\n          fn(level, locale, val, paths);\n          paths.pop();\n        }\n      });\n    } else if (Array.isArray(message)) {\n      message.forEach(function (item, index) {\n        if (isPlainObject(item)) {\n          paths.push(\"[\" + index + \"]\");\n          paths.push('.');\n          fn(level, locale, item, paths);\n          paths.pop();\n          paths.pop();\n        } else {\n          paths.push(\"[\" + index + \"]\");\n          fn(level, locale, item, paths);\n          paths.pop();\n        }\n      });\n    } else if (typeof message === 'string') {\n      var ret = htmlTagMatcher.test(message);\n      if (ret) {\n        var msg = \"Detected HTML in message '\" + message + \"' of keypath '\" + paths.join('') + \"' at '\" + locale + \"'. Consider component interpolation with '<i18n>' to avoid XSS. See https://bit.ly/2ZqJzkp\";\n        if (level === 'warn') {\n          warn(msg);\n        } else if (level === 'error') {\n          error(msg);\n        }\n      }\n    }\n  };\n\n  fn(level, locale, message, paths);\n};\n\nVueI18n.prototype._initVM = function _initVM(data) {\n  var silent = Vue.config.silent;\n  Vue.config.silent = true;\n  this._vm = new Vue({ data: data });\n  Vue.config.silent = silent;\n};\n\nVueI18n.prototype.destroyVM = function destroyVM() {\n  this._vm.$destroy();\n};\n\nVueI18n.prototype.subscribeDataChanging = function subscribeDataChanging(vm) {\n  this._dataListeners.push(vm);\n};\n\nVueI18n.prototype.unsubscribeDataChanging = function unsubscribeDataChanging(vm) {\n  remove(this._dataListeners, vm);\n};\n\nVueI18n.prototype.watchI18nData = function watchI18nData() {\n  var self = this;\n  return this._vm.$watch('$data', function () {\n    var i = self._dataListeners.length;\n    while (i--) {\n      Vue.nextTick(function () {\n        self._dataListeners[i] && self._dataListeners[i].$forceUpdate();\n      });\n    }\n  }, { deep: true });\n};\n\nVueI18n.prototype.watchLocale = function watchLocale() {\n  /* istanbul ignore if */\n  if (!this._sync || !this._root) {return null;}\n  var target = this._vm;\n  return this._root.$i18n.vm.$watch('locale', function (val) {\n    target.$set(target, 'locale', val);\n    target.$forceUpdate();\n  }, { immediate: true });\n};\n\nprototypeAccessors.vm.get = function () {return this._vm;};\n\nprototypeAccessors.messages.get = function () {return looseClone(this._getMessages());};\nprototypeAccessors.dateTimeFormats.get = function () {return looseClone(this._getDateTimeFormats());};\nprototypeAccessors.numberFormats.get = function () {return looseClone(this._getNumberFormats());};\nprototypeAccessors.availableLocales.get = function () {return Object.keys(this.messages).sort();};\n\nprototypeAccessors.locale.get = function () {return this._vm.locale;};\nprototypeAccessors.locale.set = function (locale) {\n  this._vm.$set(this._vm, 'locale', locale);\n};\n\nprototypeAccessors.fallbackLocale.get = function () {return this._vm.fallbackLocale;};\nprototypeAccessors.fallbackLocale.set = function (locale) {\n  this._vm.$set(this._vm, 'fallbackLocale', locale);\n};\n\nprototypeAccessors.missing.get = function () {return this._missing;};\nprototypeAccessors.missing.set = function (handler) {this._missing = handler;};\n\nprototypeAccessors.formatter.get = function () {return this._formatter;};\nprototypeAccessors.formatter.set = function (formatter) {this._formatter = formatter;};\n\nprototypeAccessors.silentTranslationWarn.get = function () {return this._silentTranslationWarn;};\nprototypeAccessors.silentTranslationWarn.set = function (silent) {this._silentTranslationWarn = silent;};\n\nprototypeAccessors.silentFallbackWarn.get = function () {return this._silentFallbackWarn;};\nprototypeAccessors.silentFallbackWarn.set = function (silent) {this._silentFallbackWarn = silent;};\n\nprototypeAccessors.preserveDirectiveContent.get = function () {return this._preserveDirectiveContent;};\nprototypeAccessors.preserveDirectiveContent.set = function (preserve) {this._preserveDirectiveContent = preserve;};\n\nprototypeAccessors.warnHtmlInMessage.get = function () {return this._warnHtmlInMessage;};\nprototypeAccessors.warnHtmlInMessage.set = function (level) {\n  var this$1 = this;\n\n  var orgLevel = this._warnHtmlInMessage;\n  this._warnHtmlInMessage = level;\n  if (orgLevel !== level && (level === 'warn' || level === 'error')) {\n    var messages = this._getMessages();\n    Object.keys(messages).forEach(function (locale) {\n      this$1._checkLocaleMessage(locale, this$1._warnHtmlInMessage, messages[locale]);\n    });\n  }\n};\n\nVueI18n.prototype._getMessages = function _getMessages() {return this._vm.messages;};\nVueI18n.prototype._getDateTimeFormats = function _getDateTimeFormats() {return this._vm.dateTimeFormats;};\nVueI18n.prototype._getNumberFormats = function _getNumberFormats() {return this._vm.numberFormats;};\n\nVueI18n.prototype._warnDefault = function _warnDefault(locale, key, result, vm, values) {\n  if (!isNull(result)) {return result;}\n  if (this._missing) {\n    var missingRet = this._missing.apply(null, [locale, key, vm, values]);\n    if (typeof missingRet === 'string') {\n      return missingRet;\n    }\n  } else {\n    if ( true && !this._silentTranslationWarn) {\n      warn(\n      \"Cannot translate the value of keypath '\" + key + \"'. \" +\n      'Use the value of keypath as default.');\n\n    }\n  }\n  return key;\n};\n\nVueI18n.prototype._isFallbackRoot = function _isFallbackRoot(val) {\n  return !val && !isNull(this._root) && this._fallbackRoot;\n};\n\nVueI18n.prototype._isSilentFallback = function _isSilentFallback(locale) {\n  return this._silentFallbackWarn && (this._isFallbackRoot() || locale !== this.fallbackLocale);\n};\n\nVueI18n.prototype._interpolate = function _interpolate(\nlocale,\nmessage,\nkey,\nhost,\ninterpolateMode,\nvalues,\nvisitedLinkStack)\n{\n  if (!message) {return null;}\n\n  var pathRet = this._path.getPathValue(message, key);\n  if (Array.isArray(pathRet) || isPlainObject(pathRet)) {return pathRet;}\n\n  var ret;\n  if (isNull(pathRet)) {\n    /* istanbul ignore else */\n    if (isPlainObject(message)) {\n      ret = message[key];\n      if (typeof ret !== 'string') {\n        if ( true && !this._silentTranslationWarn && !this._isSilentFallback(locale)) {\n          warn(\"Value of key '\" + key + \"' is not a string!\");\n        }\n        return null;\n      }\n    } else {\n      return null;\n    }\n  } else {\n    /* istanbul ignore else */\n    if (typeof pathRet === 'string') {\n      ret = pathRet;\n    } else {\n      if ( true && !this._silentTranslationWarn && !this._isSilentFallback(locale)) {\n        warn(\"Value of key '\" + key + \"' is not a string!\");\n      }\n      return null;\n    }\n  }\n\n  // Check for the existence of links within the translated string\n  if (ret.indexOf('@:') >= 0 || ret.indexOf('@.') >= 0) {\n    ret = this._link(locale, message, ret, host, 'raw', values, visitedLinkStack);\n  }\n\n  return this._render(ret, interpolateMode, values, key);\n};\n\nVueI18n.prototype._link = function _link(\nlocale,\nmessage,\nstr,\nhost,\ninterpolateMode,\nvalues,\nvisitedLinkStack)\n{\n  var ret = str;\n\n  // Match all the links within the local\n  // We are going to replace each of\n  // them with its translation\n  var matches = ret.match(linkKeyMatcher);\n  for (var idx in matches) {\n    // ie compatible: filter custom array\n    // prototype method\n    if (!matches.hasOwnProperty(idx)) {\n      continue;\n    }\n    var link = matches[idx];\n    var linkKeyPrefixMatches = link.match(linkKeyPrefixMatcher);\n    var linkPrefix = linkKeyPrefixMatches[0];\n    var formatterName = linkKeyPrefixMatches[1];\n\n    // Remove the leading @:, @.case: and the brackets\n    var linkPlaceholder = link.replace(linkPrefix, '').replace(bracketsMatcher, '');\n\n    if (visitedLinkStack.includes(linkPlaceholder)) {\n      if (true) {\n        warn(\"Circular reference found. \\\"\" + link + \"\\\" is already visited in the chain of \" + visitedLinkStack.reverse().join(' <- '));\n      }\n      return ret;\n    }\n    visitedLinkStack.push(linkPlaceholder);\n\n    // Translate the link\n    var translated = this._interpolate(\n    locale, message, linkPlaceholder, host,\n    interpolateMode === 'raw' ? 'string' : interpolateMode,\n    interpolateMode === 'raw' ? undefined : values,\n    visitedLinkStack);\n\n\n    if (this._isFallbackRoot(translated)) {\n      if ( true && !this._silentTranslationWarn) {\n        warn(\"Fall back to translate the link placeholder '\" + linkPlaceholder + \"' with root locale.\");\n      }\n      /* istanbul ignore if */\n      if (!this._root) {throw Error('unexpected error');}\n      var root = this._root.$i18n;\n      translated = root._translate(\n      root._getMessages(), root.locale, root.fallbackLocale,\n      linkPlaceholder, host, interpolateMode, values);\n\n    }\n    translated = this._warnDefault(\n    locale, linkPlaceholder, translated, host,\n    Array.isArray(values) ? values : [values]);\n\n    if (formatters.hasOwnProperty(formatterName)) {\n      translated = formatters[formatterName](translated);\n    }\n\n    visitedLinkStack.pop();\n\n    // Replace the link with the translated\n    ret = !translated ? ret : ret.replace(link, translated);\n  }\n\n  return ret;\n};\n\nVueI18n.prototype._render = function _render(message, interpolateMode, values, path) {\n  var ret = this._formatter.interpolate(message, values, path);\n\n  // If the custom formatter refuses to work - apply the default one\n  if (!ret) {\n    ret = defaultFormatter.interpolate(message, values, path);\n  }\n\n  // if interpolateMode is **not** 'string' ('row'),\n  // return the compiled data (e.g. ['foo', VNode, 'bar']) with formatter\n  return interpolateMode === 'string' ? ret.join('') : ret;\n};\n\nVueI18n.prototype._translate = function _translate(\nmessages,\nlocale,\nfallback,\nkey,\nhost,\ninterpolateMode,\nargs)\n{\n  var res =\n  this._interpolate(locale, messages[locale], key, host, interpolateMode, args, [key]);\n  if (!isNull(res)) {return res;}\n\n  res = this._interpolate(fallback, messages[fallback], key, host, interpolateMode, args, [key]);\n  if (!isNull(res)) {\n    if ( true && !this._silentTranslationWarn && !this._silentFallbackWarn) {\n      warn(\"Fall back to translate the keypath '\" + key + \"' with '\" + fallback + \"' locale.\");\n    }\n    return res;\n  } else {\n    return null;\n  }\n};\n\nVueI18n.prototype._t = function _t(key, _locale, messages, host) {\n  var ref;\n\n  var values = [],len = arguments.length - 4;\n  while (len-- > 0) {values[len] = arguments[len + 4];}\n  if (!key) {return '';}\n\n  var parsedArgs = parseArgs.apply(void 0, values);\n  var locale = parsedArgs.locale || _locale;\n\n  var ret = this._translate(\n  messages, locale, this.fallbackLocale, key,\n  host, 'string', parsedArgs.params);\n\n  if (this._isFallbackRoot(ret)) {\n    if ( true && !this._silentTranslationWarn && !this._silentFallbackWarn) {\n      warn(\"Fall back to translate the keypath '\" + key + \"' with root locale.\");\n    }\n    /* istanbul ignore if */\n    if (!this._root) {throw Error('unexpected error');}\n    return (ref = this._root).$t.apply(ref, [key].concat(values));\n  } else {\n    return this._warnDefault(locale, key, ret, host, values);\n  }\n};\n\nVueI18n.prototype.t = function t(key) {\n  var ref;\n\n  var values = [],len = arguments.length - 1;\n  while (len-- > 0) {values[len] = arguments[len + 1];}\n  return (ref = this)._t.apply(ref, [key, this.locale, this._getMessages(), null].concat(values));\n};\n\nVueI18n.prototype._i = function _i(key, locale, messages, host, values) {\n  var ret =\n  this._translate(messages, locale, this.fallbackLocale, key, host, 'raw', values);\n  if (this._isFallbackRoot(ret)) {\n    if ( true && !this._silentTranslationWarn) {\n      warn(\"Fall back to interpolate the keypath '\" + key + \"' with root locale.\");\n    }\n    if (!this._root) {throw Error('unexpected error');}\n    return this._root.$i18n.i(key, locale, values);\n  } else {\n    return this._warnDefault(locale, key, ret, host, [values]);\n  }\n};\n\nVueI18n.prototype.i = function i(key, locale, values) {\n  /* istanbul ignore if */\n  if (!key) {return '';}\n\n  if (typeof locale !== 'string') {\n    locale = this.locale;\n  }\n\n  return this._i(key, locale, this._getMessages(), null, values);\n};\n\nVueI18n.prototype._tc = function _tc(\nkey,\n_locale,\nmessages,\nhost,\nchoice)\n{\n  var ref;\n\n  var values = [],len = arguments.length - 5;\n  while (len-- > 0) {values[len] = arguments[len + 5];}\n  if (!key) {return '';}\n  if (choice === undefined) {\n    choice = 1;\n  }\n\n  var predefined = { 'count': choice, 'n': choice };\n  var parsedArgs = parseArgs.apply(void 0, values);\n  parsedArgs.params = Object.assign(predefined, parsedArgs.params);\n  values = parsedArgs.locale === null ? [parsedArgs.params] : [parsedArgs.locale, parsedArgs.params];\n  return this.fetchChoice((ref = this)._t.apply(ref, [key, _locale, messages, host].concat(values)), choice);\n};\n\nVueI18n.prototype.fetchChoice = function fetchChoice(message, choice) {\n  /* istanbul ignore if */\n  if (!message && typeof message !== 'string') {return null;}\n  var choices = message.split('|');\n\n  choice = this.getChoiceIndex(choice, choices.length);\n  if (!choices[choice]) {return message;}\n  return choices[choice].trim();\n};\n\n/**\n    * @param choice {number} a choice index given by the input to $tc: `$tc('path.to.rule', choiceIndex)`\n    * @param choicesLength {number} an overall amount of available choices\n    * @returns a final choice index\n   */\nVueI18n.prototype.getChoiceIndex = function getChoiceIndex(choice, choicesLength) {\n  // Default (old) getChoiceIndex implementation - english-compatible\n  var defaultImpl = function defaultImpl(_choice, _choicesLength) {\n    _choice = Math.abs(_choice);\n\n    if (_choicesLength === 2) {\n      return _choice ?\n      _choice > 1 ?\n      1 :\n      0 :\n      1;\n    }\n\n    return _choice ? Math.min(_choice, 2) : 0;\n  };\n\n  if (this.locale in this.pluralizationRules) {\n    return this.pluralizationRules[this.locale].apply(this, [choice, choicesLength]);\n  } else {\n    return defaultImpl(choice, choicesLength);\n  }\n};\n\nVueI18n.prototype.tc = function tc(key, choice) {\n  var ref;\n\n  var values = [],len = arguments.length - 2;\n  while (len-- > 0) {values[len] = arguments[len + 2];}\n  return (ref = this)._tc.apply(ref, [key, this.locale, this._getMessages(), null, choice].concat(values));\n};\n\nVueI18n.prototype._te = function _te(key, locale, messages) {\n  var args = [],len = arguments.length - 3;\n  while (len-- > 0) {args[len] = arguments[len + 3];}\n\n  var _locale = parseArgs.apply(void 0, args).locale || locale;\n  return this._exist(messages[_locale], key);\n};\n\nVueI18n.prototype.te = function te(key, locale) {\n  return this._te(key, this.locale, this._getMessages(), locale);\n};\n\nVueI18n.prototype.getLocaleMessage = function getLocaleMessage(locale) {\n  return looseClone(this._vm.messages[locale] || {});\n};\n\nVueI18n.prototype.setLocaleMessage = function setLocaleMessage(locale, message) {\n  if (this._warnHtmlInMessage === 'warn' || this._warnHtmlInMessage === 'error') {\n    this._checkLocaleMessage(locale, this._warnHtmlInMessage, message);\n    if (this._warnHtmlInMessage === 'error') {return;}\n  }\n  this._vm.$set(this._vm.messages, locale, message);\n};\n\nVueI18n.prototype.mergeLocaleMessage = function mergeLocaleMessage(locale, message) {\n  if (this._warnHtmlInMessage === 'warn' || this._warnHtmlInMessage === 'error') {\n    this._checkLocaleMessage(locale, this._warnHtmlInMessage, message);\n    if (this._warnHtmlInMessage === 'error') {return;}\n  }\n  this._vm.$set(this._vm.messages, locale, merge(this._vm.messages[locale] || {}, message));\n};\n\nVueI18n.prototype.getDateTimeFormat = function getDateTimeFormat(locale) {\n  return looseClone(this._vm.dateTimeFormats[locale] || {});\n};\n\nVueI18n.prototype.setDateTimeFormat = function setDateTimeFormat(locale, format) {\n  this._vm.$set(this._vm.dateTimeFormats, locale, format);\n};\n\nVueI18n.prototype.mergeDateTimeFormat = function mergeDateTimeFormat(locale, format) {\n  this._vm.$set(this._vm.dateTimeFormats, locale, merge(this._vm.dateTimeFormats[locale] || {}, format));\n};\n\nVueI18n.prototype._localizeDateTime = function _localizeDateTime(\nvalue,\nlocale,\nfallback,\ndateTimeFormats,\nkey)\n{\n  var _locale = locale;\n  var formats = dateTimeFormats[_locale];\n\n  // fallback locale\n  if (isNull(formats) || isNull(formats[key])) {\n    if ( true && !this._silentTranslationWarn) {\n      warn(\"Fall back to '\" + fallback + \"' datetime formats from '\" + locale + \" datetime formats.\");\n    }\n    _locale = fallback;\n    formats = dateTimeFormats[_locale];\n  }\n\n  if (isNull(formats) || isNull(formats[key])) {\n    return null;\n  } else {\n    var format = formats[key];\n    var id = _locale + \"__\" + key;\n    var formatter = this._dateTimeFormatters[id];\n    if (!formatter) {\n      formatter = this._dateTimeFormatters[id] = new Intl.DateTimeFormat(_locale, format);\n    }\n    return formatter.format(value);\n  }\n};\n\nVueI18n.prototype._d = function _d(value, locale, key) {\n  /* istanbul ignore if */\n  if ( true && !VueI18n.availabilities.dateTimeFormat) {\n    warn('Cannot format a Date value due to not supported Intl.DateTimeFormat.');\n    return '';\n  }\n\n  if (!key) {\n    return new Intl.DateTimeFormat(locale).format(value);\n  }\n\n  var ret =\n  this._localizeDateTime(value, locale, this.fallbackLocale, this._getDateTimeFormats(), key);\n  if (this._isFallbackRoot(ret)) {\n    if ( true && !this._silentTranslationWarn) {\n      warn(\"Fall back to datetime localization of root: key '\" + key + \"' .\");\n    }\n    /* istanbul ignore if */\n    if (!this._root) {throw Error('unexpected error');}\n    return this._root.$i18n.d(value, key, locale);\n  } else {\n    return ret || '';\n  }\n};\n\nVueI18n.prototype.d = function d(value) {\n  var args = [],len = arguments.length - 1;\n  while (len-- > 0) {args[len] = arguments[len + 1];}\n\n  var locale = this.locale;\n  var key = null;\n\n  if (args.length === 1) {\n    if (typeof args[0] === 'string') {\n      key = args[0];\n    } else if (isObject(args[0])) {\n      if (args[0].locale) {\n        locale = args[0].locale;\n      }\n      if (args[0].key) {\n        key = args[0].key;\n      }\n    }\n  } else if (args.length === 2) {\n    if (typeof args[0] === 'string') {\n      key = args[0];\n    }\n    if (typeof args[1] === 'string') {\n      locale = args[1];\n    }\n  }\n\n  return this._d(value, locale, key);\n};\n\nVueI18n.prototype.getNumberFormat = function getNumberFormat(locale) {\n  return looseClone(this._vm.numberFormats[locale] || {});\n};\n\nVueI18n.prototype.setNumberFormat = function setNumberFormat(locale, format) {\n  this._vm.$set(this._vm.numberFormats, locale, format);\n};\n\nVueI18n.prototype.mergeNumberFormat = function mergeNumberFormat(locale, format) {\n  this._vm.$set(this._vm.numberFormats, locale, merge(this._vm.numberFormats[locale] || {}, format));\n};\n\nVueI18n.prototype._getNumberFormatter = function _getNumberFormatter(\nvalue,\nlocale,\nfallback,\nnumberFormats,\nkey,\noptions)\n{\n  var _locale = locale;\n  var formats = numberFormats[_locale];\n\n  // fallback locale\n  if (isNull(formats) || isNull(formats[key])) {\n    if ( true && !this._silentTranslationWarn) {\n      warn(\"Fall back to '\" + fallback + \"' number formats from '\" + locale + \" number formats.\");\n    }\n    _locale = fallback;\n    formats = numberFormats[_locale];\n  }\n\n  if (isNull(formats) || isNull(formats[key])) {\n    return null;\n  } else {\n    var format = formats[key];\n\n    var formatter;\n    if (options) {\n      // If options specified - create one time number formatter\n      formatter = new Intl.NumberFormat(_locale, Object.assign({}, format, options));\n    } else {\n      var id = _locale + \"__\" + key;\n      formatter = this._numberFormatters[id];\n      if (!formatter) {\n        formatter = this._numberFormatters[id] = new Intl.NumberFormat(_locale, format);\n      }\n    }\n    return formatter;\n  }\n};\n\nVueI18n.prototype._n = function _n(value, locale, key, options) {\n  /* istanbul ignore if */\n  if (!VueI18n.availabilities.numberFormat) {\n    if (true) {\n      warn('Cannot format a Number value due to not supported Intl.NumberFormat.');\n    }\n    return '';\n  }\n\n  if (!key) {\n    var nf = !options ? new Intl.NumberFormat(locale) : new Intl.NumberFormat(locale, options);\n    return nf.format(value);\n  }\n\n  var formatter = this._getNumberFormatter(value, locale, this.fallbackLocale, this._getNumberFormats(), key, options);\n  var ret = formatter && formatter.format(value);\n  if (this._isFallbackRoot(ret)) {\n    if ( true && !this._silentTranslationWarn) {\n      warn(\"Fall back to number localization of root: key '\" + key + \"' .\");\n    }\n    /* istanbul ignore if */\n    if (!this._root) {throw Error('unexpected error');}\n    return this._root.$i18n.n(value, Object.assign({}, { key: key, locale: locale }, options));\n  } else {\n    return ret || '';\n  }\n};\n\nVueI18n.prototype.n = function n(value) {\n  var args = [],len = arguments.length - 1;\n  while (len-- > 0) {args[len] = arguments[len + 1];}\n\n  var locale = this.locale;\n  var key = null;\n  var options = null;\n\n  if (args.length === 1) {\n    if (typeof args[0] === 'string') {\n      key = args[0];\n    } else if (isObject(args[0])) {\n      if (args[0].locale) {\n        locale = args[0].locale;\n      }\n      if (args[0].key) {\n        key = args[0].key;\n      }\n\n      // Filter out number format options only\n      options = Object.keys(args[0]).reduce(function (acc, key) {\n        var obj;\n\n        if (numberFormatKeys.includes(key)) {\n          return Object.assign({}, acc, (obj = {}, obj[key] = args[0][key], obj));\n        }\n        return acc;\n      }, null);\n    }\n  } else if (args.length === 2) {\n    if (typeof args[0] === 'string') {\n      key = args[0];\n    }\n    if (typeof args[1] === 'string') {\n      locale = args[1];\n    }\n  }\n\n  return this._n(value, locale, key, options);\n};\n\nVueI18n.prototype._ntp = function _ntp(value, locale, key, options) {\n  /* istanbul ignore if */\n  if (!VueI18n.availabilities.numberFormat) {\n    if (true) {\n      warn('Cannot format to parts a Number value due to not supported Intl.NumberFormat.');\n    }\n    return [];\n  }\n\n  if (!key) {\n    var nf = !options ? new Intl.NumberFormat(locale) : new Intl.NumberFormat(locale, options);\n    return nf.formatToParts(value);\n  }\n\n  var formatter = this._getNumberFormatter(value, locale, this.fallbackLocale, this._getNumberFormats(), key, options);\n  var ret = formatter && formatter.formatToParts(value);\n  if (this._isFallbackRoot(ret)) {\n    if ( true && !this._silentTranslationWarn) {\n      warn(\"Fall back to format number to parts of root: key '\" + key + \"' .\");\n    }\n    /* istanbul ignore if */\n    if (!this._root) {throw Error('unexpected error');}\n    return this._root.$i18n._ntp(value, locale, key, options);\n  } else {\n    return ret || [];\n  }\n};\n\nObject.defineProperties(VueI18n.prototype, prototypeAccessors);\n\nvar availabilities;\n// $FlowFixMe\nObject.defineProperty(VueI18n, 'availabilities', {\n  get: function get() {\n    if (!availabilities) {\n      var intlDefined = typeof Intl !== 'undefined';\n      availabilities = {\n        dateTimeFormat: intlDefined && typeof Intl.DateTimeFormat !== 'undefined',\n        numberFormat: intlDefined && typeof Intl.NumberFormat !== 'undefined' };\n\n    }\n\n    return availabilities;\n  } });\n\n\nVueI18n.install = install;\nVueI18n.version = '8.11.2';var _default =\n\nVueI18n;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n");

/***/ }),

/***/ 98:
/*!**********************************************************************!*\
  !*** C:/Users/Administrator/Desktop/新建文件夹 (8)/wechat/utils/goods.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__, uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _hydrogenJsSdk = _interopRequireDefault(__webpack_require__(/*! hydrogen-js-sdk */ 14));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var _default =\n{\n  //批量删除功能\n  delete_goods: function delete_goods(goods) {\n    return new Promise(function (resolve, reject) {\n      var count = 0;var _iteratorNormalCompletion = true;var _didIteratorError = false;var _iteratorError = undefined;try {\n        for (var _iterator = goods[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {var good = _step.value;\n          var query = _hydrogenJsSdk.default.Query('Goods');\n          query.destroy(good.objectId).then(function (res) {\n\n            count += 1;\n            if (count == goods.length) {\n              //console.log(res,count)\n              resolve(true);\n            }\n          }).catch(function (err) {\n            console.log(__f__(err, \" at utils\\\\goods.js:17\"));\n          });\n        }} catch (err) {_didIteratorError = true;_iteratorError = err;} finally {try {if (!_iteratorNormalCompletion && _iterator.return != null) {_iterator.return();}} finally {if (_didIteratorError) {throw _iteratorError;}}}\n    });\n  },\n\n  //上传商品\n  upload_good_withNoCan: function upload_good_withNoCan(good, stock) {\n    return new Promise(function (resolve, reject) {\n      var uid = uni.getStorageSync(\"uid\");\n      var pointer = _hydrogenJsSdk.default.Pointer('_User');\n      var userid = pointer.set(uid);\n\n      var reserve = good.reserve;\n\n      var pointer1 = _hydrogenJsSdk.default.Pointer('stocks');\n      var p_stock_id = pointer1.set(stock.objectId); //仓库的id关联\n\n      var query = _hydrogenJsSdk.default.Query(\"Goods\");\n      query.equalTo(\"userId\", \"==\", uid);\n      query.equalTo(\"goodsName\", \"==\", good.goodsName);\n      query.equalTo(\"stocks\", \"==\", stock.objectId);\n      query.find().then(function (res) {\n        console.log(__f__(res, \" at utils\\\\goods.js:40\"));\n        if (res.length >= 1) {\n          resolve([false, '该商品存在此仓库中']);\n        } else {\n          var _query = _hydrogenJsSdk.default.Query('Goods');\n          _query.set(\"goodsName\", good.goodsName);\n          _query.set(\"goodsIcon\", good.goodsIcon);\n          _query.set(\"costPrice\", good.costPrice);\n          _query.set(\"retailPrice\", good.retailPrice);\n          //query.set(\"producttime\", good.producttime)\n          //query.set(\"nousetime\", good.nousetime)\n          //query.set(\"regNumber\", good.regNumber)\n          _query.set(\"reserve\", Number(good.reserve));\n          _query.set(\"productCode\", good.productCode ? good.productCode : '');\n          _query.set(\"stocks\", p_stock_id);\n          _query.set(\"product_info\", good.product_info ? good.product_info : '');\n          _query.set(\"producer\", good.producer ? good.producer : '');\n          _query.set(\"packingUnit\", good.packingUnit ? good.packingUnit : '');\n          _query.set(\"packageContent\", good.packageContent ? good.packageContent : '');\n          _query.set(\"warning_num\", Number(good.warning_num ? good.warning_num : 0));\n          _query.set(\"stocktype\", Number(good.warning_num ? good.warning_num : 0) >= Number(reserve) ? 0 : 1); //库存数量类型 0代表库存不足 1代表库存充足\n\n          if (good.second_class) {\n            var pointer2 = _hydrogenJsSdk.default.Pointer('class_user');\n            var p_class_user_id = pointer2.set(good.goodsClass); //一级分类id关联\n            _query.set(\"second_class\", p_second_class_id);\n\n            var pointer3 = _hydrogenJsSdk.default.Pointer('second_class');\n            var p_second_class_id = pointer3.set(good.second_class); //仓库的id关联\n            _query.set(\"goodsClass\", p_class_user_id);\n          }\n\n          _query.set(\"userId\", userid);\n          _query.save().then(function (res) {\n            console.log(__f__(res, \" at utils\\\\goods.js:74\"));\n            resolve([true, res]);\n          }).catch(function (err) {\n            console.log(__f__(err, \" at utils\\\\goods.js:77\"));\n          });\n        }\n      });\n\n    });\n\n  },\n\n  //上传商品\n  upload_good: function upload_good(good) {\n    return new Promise(function (resolve, reject) {\n      var uid = JSON.parse(localStorage.getItem('bmob')).objectId;\n\n      var pointer = _hydrogenJsSdk.default.Pointer('_User');\n      var userid = pointer.set(uid);\n\n      var pointer2 = _hydrogenJsSdk.default.Pointer('class_user');\n      var p_class_user_id = pointer2.set(good.goodsClass); //一级分类id关联\n\n      var pointer3 = _hydrogenJsSdk.default.Pointer('second_class');\n      var p_second_class_id = pointer3.set(good.second_class); //仓库的id关联\n\n      var query = _hydrogenJsSdk.default.Query(\"Goods\");\n      query.equalTo(\"userId\", \"==\", uid);\n      query.equalTo(\"goodsName\", \"==\", good.goodsName);\n      query.equalTo(\"position\", \"==\", good.position);\n      query.equalTo(\"stocks\", \"==\", good.stocks);\n      query.find().then(function (res) {\n        console.log(__f__(res, \" at utils\\\\goods.js:106\"));\n        if (res.length >= 1) {\n          resolve([false, res]);\n        } else {\n          var reserve = good.reserve;\n\n          var pointer1 = _hydrogenJsSdk.default.Pointer('stocks');\n          var p_stock_id = pointer1.set(good.stocks); //仓库的id关联\n\n          var _query2 = _hydrogenJsSdk.default.Query('Goods');\n          _query2.set(\"goodsName\", good.goodsName);\n          _query2.set(\"goodsIcon\", good.goodsIcon);\n          _query2.set(\"costPrice\", good.costPrice);\n          _query2.set(\"retailPrice\", good.retailPrice);\n          _query2.set(\"producttime\", good.producttime);\n          _query2.set(\"nousetime\", good.nousetime);\n          _query2.set(\"regNumber\", good.regNumber);\n          _query2.set(\"reserve\", Number(good.reserve));\n          _query2.set(\"productCode\", good.productCode);\n          _query2.set(\"stocks\", p_stock_id);\n          _query2.set(\"product_info\", good.product_info);\n          _query2.set(\"producer\", good.producer);\n          _query2.set(\"packingUnit\", good.packingUnit);\n          _query2.set(\"packageContent\", good.packageContent);\n          _query2.set(\"warning_num\", Number(good.warning_num));\n          _query2.set(\"stocktype\", Number(good.warning_num) >= Number(reserve) ? 0 : 1); //库存数量类型 0代表库存不足 1代表库存充足\n          _query2.set(\"second_class\", p_second_class_id);\n          _query2.set(\"goodsClass\", p_class_user_id);\n\n          _query2.set(\"userId\", userid);\n          _query2.save().then(function (res) {\n            console.log(__f__(res, \" at utils\\\\goods.js:137\"));\n            resolve([true, res]);\n          }).catch(function (err) {\n            console.log(__f__(err, \" at utils\\\\goods.js:140\"));\n          });\n        }\n      });\n    });\n\n  },\n\n\n  //获得产品一级分类\n  get_fristclass: function get_fristclass() {\n    var userid = JSON.parse(localStorage.getItem('bmob')).objectId;\n    return new Promise(function (resolve, reject) {\n\n      var query = _hydrogenJsSdk.default.Query(\"class_user\");\n      query.equalTo(\"parent\", \"==\", userid);\n      query.find().then(function (res) {\n        //console.log(res)\n        localStorage.setItem(\"frist_class\", JSON.stringify(res));\n        resolve(res);\n      });\n\n    });\n  },\n\n  //获得产品的二级分类\n  get_secondclass: function get_secondclass(frist_classid) {\n    return new Promise(function (resolve, reject) {\n\n      var query = _hydrogenJsSdk.default.Query('class_user');\n      query.field('second', frist_classid);\n      query.relation('second_class').then(function (res) {\n        //console.log(res);\n        resolve(res.results);\n      });\n    });\n  },\n\n  //得到仓库列表\n  getstock_list: function getstock_list(search_text) {\n    var userid = JSON.parse(localStorage.getItem('bmob')).objectId;\n    return new Promise(function (resolve, reject) {\n      var query = _hydrogenJsSdk.default.Query(\"stocks\");\n      query.order(\"-num\");\n      query.include(\"charge\", \"shop\");\n      query.equalTo(\"parent\", \"==\", userid);\n      //query.equalTo(\"disabled\", \"==\", that.disabled);\n      if (search_text) {\n        query.equalTo(\"stock_name\", \"==\", {\n          \"$regex\": \"\" + search_text + \".*\" });\n\n\n      }\n      query.find().then(function (res) {\n        //console.log(res)\n        localStorage.setItem(\"stocks\", JSON.stringify(res));\n        resolve(res);\n      });\n    });\n  } };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 10)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///98\n");

/***/ })

}]);